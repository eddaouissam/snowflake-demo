{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.1", "generated_at": "2024-12-18T15:42:01.645027Z", "invocation_id": "caa05c91-c67b-42f5-9c93-4092cee110be", "env": {}, "project_name": "dbt_vault_v2", "project_id": "53acfbb21dad1dafc76bbdeb2d603900", "user_id": "a9cad1ea-cdfa-484d-ab47-86098c1539e0", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.dbt_vault_v2.fct_sales": {"database": "DBT_DB", "schema": "data_mart", "name": "fct_sales", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "marts/fct_sales.sql", "original_file_path": "models/marts/fct_sales.sql", "unique_id": "model.dbt_vault_v2.fct_sales", "fqn": ["dbt_vault_v2", "marts", "fct_sales"], "alias": "fct_sales", "checksum": {"name": "sha256", "checksum": "d2bb1c72668b32234279753eff14ffae6d1eb3d72db3a71bbfb7581bd51764b2"}, "config": {"enabled": true, "alias": null, "schema": "data_mart", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["marts"], "description": "This fact table combines data from the sales, location, and product satellite tables to provide a comprehensive view of sales transactions.", "columns": {"transaction_sales": {"name": "transaction_sales", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_vault_v2://models/marts/fct_sales.yml", "build_path": null, "unrendered_config": {"schema": "data_mart", "materialized": "table", "tags": ["marts"]}, "created_at": 1734520878.522783, "relation_name": "DBT_DB.data_mart.fct_sales", "raw_code": "with selected_sat_sales as (\n    select *\n    from {{ ref('sat_sales') }} qualify\n        lead(load_date)\n            over (partition by sales_hk order by load_date asc)\n        is null\n),\n\nselected_sat_location as (\n    select *\n    from {{ ref('sat_location') }} qualify\n        lead(load_date)\n            over (partition by location_hk order by load_date asc)\n        is null\n),\n\nselected_sat_product as (\n    select *\n    from {{ ref('sat_product') }} qualify\n        lead(load_date)\n            over (partition by product_hk order by load_date asc)\n        is null\n)\n\nselect\n    hs.transaction_sales,\n    ss.partition_key,\n    ss.subpartition_key,\n    ss.ticket_code,\n    ss.ticket_line_code,\n    hl.location_id,\n    sl.location_code,\n    ss.location_original_id,\n    ss.business_date,\n    ss.register_code,\n    ss.transaction_time,\n    ss.transaction_type_id,\n    ss.transaction_type_code,\n    hp.sku_id,\n    sp.material_code\nfrom {{ ref('hub_sales') }} as hs\nleft join selected_sat_sales as ss on hs.sales_hk = ss.sales_hk\nleft join {{ ref('link_location_sales') }} as lls on hs.sales_hk = lls.sales_hk\nleft join {{ ref('hub_location') }} as hl on lls.location_hk = hl.location_hk\nleft join selected_sat_location as sl on hl.location_hk = sl.location_hk\nleft join {{ ref('link_product_sales') }} as lps on hs.sales_hk = lps.sales_hk\nleft join {{ ref('hub_product') }} as hp on lps.product_hk = hp.product_hk\nleft join selected_sat_product as sp on hp.product_hk = sp.product_hk", "language": "sql", "refs": [{"name": "sat_sales", "package": null, "version": null}, {"name": "sat_location", "package": null, "version": null}, {"name": "sat_product", "package": null, "version": null}, {"name": "hub_sales", "package": null, "version": null}, {"name": "link_location_sales", "package": null, "version": null}, {"name": "hub_location", "package": null, "version": null}, {"name": "link_product_sales", "package": null, "version": null}, {"name": "hub_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_vault_v2.sat_sales", "model.dbt_vault_v2.sat_location", "model.dbt_vault_v2.sat_product", "model.dbt_vault_v2.hub_sales", "model.dbt_vault_v2.link_location_sales", "model.dbt_vault_v2.hub_location", "model.dbt_vault_v2.link_product_sales", "model.dbt_vault_v2.hub_product"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/fct_sales.sql", "compiled": true, "compiled_code": "with selected_sat_sales as (\n    select *\n    from DBT_DB.DBT_VAULT.sat_sales qualify\n        lead(load_date)\n            over (partition by sales_hk order by load_date asc)\n        is null\n),\n\nselected_sat_location as (\n    select *\n    from DBT_DB.DBT_VAULT.sat_location qualify\n        lead(load_date)\n            over (partition by location_hk order by load_date asc)\n        is null\n),\n\nselected_sat_product as (\n    select *\n    from DBT_DB.DBT_VAULT.sat_product qualify\n        lead(load_date)\n            over (partition by product_hk order by load_date asc)\n        is null\n)\n\nselect\n    hs.transaction_sales,\n    ss.partition_key,\n    ss.subpartition_key,\n    ss.ticket_code,\n    ss.ticket_line_code,\n    hl.location_id,\n    sl.location_code,\n    ss.location_original_id,\n    ss.business_date,\n    ss.register_code,\n    ss.transaction_time,\n    ss.transaction_type_id,\n    ss.transaction_type_code,\n    hp.sku_id,\n    sp.material_code\nfrom DBT_DB.DBT_VAULT.hub_sales as hs\nleft join selected_sat_sales as ss on hs.sales_hk = ss.sales_hk\nleft join DBT_DB.DBT_VAULT.link_location_sales as lls on hs.sales_hk = lls.sales_hk\nleft join DBT_DB.DBT_VAULT.hub_location as hl on lls.location_hk = hl.location_hk\nleft join selected_sat_location as sl on hl.location_hk = sl.location_hk\nleft join DBT_DB.DBT_VAULT.link_product_sales as lps on hs.sales_hk = lps.sales_hk\nleft join DBT_DB.DBT_VAULT.hub_product as hp on lps.product_hk = hp.product_hk\nleft join selected_sat_product as sp on hp.product_hk = sp.product_hk", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["transaction_sales"], "time_spine": null}, "model.dbt_vault_v2.dim_product": {"database": "DBT_DB", "schema": "data_mart", "name": "dim_product", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "marts/dim_product.sql", "original_file_path": "models/marts/dim_product.sql", "unique_id": "model.dbt_vault_v2.dim_product", "fqn": ["dbt_vault_v2", "marts", "dim_product"], "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "d927fb7cce2b6b6058c4f01b57aa2d9f3b3509aab3504473bbc4ca7b118313d5"}, "config": {"enabled": true, "alias": null, "schema": "data_mart", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["marts"], "description": "This dimension table contains information about the products sold by the company.", "columns": {"sku_id": {"name": "sku_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_vault_v2://models/marts/dim_product.yml", "build_path": null, "unrendered_config": {"schema": "data_mart", "materialized": "table", "tags": ["marts"]}, "created_at": 1734520878.4549756, "relation_name": "DBT_DB.data_mart.dim_product", "raw_code": "WITH product_hub_sat AS (\n    SELECT\n        s.*,\n        h.sku_id\n    FROM {{ ref('hub_product') }} AS h\n    INNER JOIN {{ ref(\"sat_product\") }} AS s\n        ON h.product_hk = s.product_hk\n    QUALIFY lead(s.load_date) OVER (\n        PARTITION BY h.product_hk\n        ORDER BY s.load_date\n    ) IS NULL\n),\n\nstar_product AS (\n    SELECT\n        sku_id,\n        load_date,\n        class_id,\n        color_id,\n        curr_status_id,\n        function_id,\n        line_id,\n        model_id,\n        style_color_id,\n        style_id\n    FROM product_hub_sat\n)\n\nSELECT *\nFROM star_product", "language": "sql", "refs": [{"name": "hub_product", "package": null, "version": null}, {"name": "sat_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_vault_v2.hub_product", "model.dbt_vault_v2.sat_product"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/dim_product.sql", "compiled": true, "compiled_code": "WITH product_hub_sat AS (\n    SELECT\n        s.*,\n        h.sku_id\n    FROM DBT_DB.DBT_VAULT.hub_product AS h\n    INNER JOIN DBT_DB.DBT_VAULT.sat_product AS s\n        ON h.product_hk = s.product_hk\n    QUALIFY lead(s.load_date) OVER (\n        PARTITION BY h.product_hk\n        ORDER BY s.load_date\n    ) IS NULL\n),\n\nstar_product AS (\n    SELECT\n        sku_id,\n        load_date,\n        class_id,\n        color_id,\n        curr_status_id,\n        function_id,\n        line_id,\n        model_id,\n        style_color_id,\n        style_id\n    FROM product_hub_sat\n)\n\nSELECT *\nFROM star_product", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["sku_id"], "time_spine": null}, "model.dbt_vault_v2.dim_location": {"database": "DBT_DB", "schema": "data_mart", "name": "dim_location", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "marts/dim_location.sql", "original_file_path": "models/marts/dim_location.sql", "unique_id": "model.dbt_vault_v2.dim_location", "fqn": ["dbt_vault_v2", "marts", "dim_location"], "alias": "dim_location", "checksum": {"name": "sha256", "checksum": "9636a3a7047ba0e508ca0789581f93007ac7c5943738ffe22c31de7923dc5ef5"}, "config": {"enabled": true, "alias": null, "schema": "data_mart", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["marts"], "description": "This dimension table contains information about the locations where the company operates.", "columns": {"location_id": {"name": "location_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_vault_v2://models/marts/dim_location.yml", "build_path": null, "unrendered_config": {"schema": "data_mart", "materialized": "table", "tags": ["marts"]}, "created_at": 1734520878.5262558, "relation_name": "DBT_DB.data_mart.dim_location", "raw_code": "WITH location_hub_sat AS (\n    SELECT\n        s.*,\n        h.location_id\n    FROM {{ ref(\"hub_location\") }} AS h\n    INNER JOIN {{ ref(\"sat_location\") }} AS s\n        ON h.location_hk = s.location_hk\n    QUALIFY lead(s.load_date) OVER (\n        PARTITION BY h.location_hk\n        ORDER BY s.load_date\n    ) IS NULL\n),\n\nstar_location AS (\n    SELECT\n        location_hub_sat.location_id,\n        location_hub_sat.load_date,\n        location_hub_sat.location_code,\n        location_hub_sat.city_id,\n        location_hub_sat.state_id,\n        location_hub_sat.country_id,\n        location_hub_sat.district_id,\n        location_hub_sat.zone_id,\n        location_hub_sat.region_id,\n        location_hub_sat.area_id\n    FROM location_hub_sat\n)\n\nSELECT *\nFROM star_location", "language": "sql", "refs": [{"name": "hub_location", "package": null, "version": null}, {"name": "sat_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_vault_v2.hub_location", "model.dbt_vault_v2.sat_location"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/dim_location.sql", "compiled": true, "compiled_code": "WITH location_hub_sat AS (\n    SELECT\n        s.*,\n        h.location_id\n    FROM DBT_DB.DBT_VAULT.hub_location AS h\n    INNER JOIN DBT_DB.DBT_VAULT.sat_location AS s\n        ON h.location_hk = s.location_hk\n    QUALIFY lead(s.load_date) OVER (\n        PARTITION BY h.location_hk\n        ORDER BY s.load_date\n    ) IS NULL\n),\n\nstar_location AS (\n    SELECT\n        location_hub_sat.location_id,\n        location_hub_sat.load_date,\n        location_hub_sat.location_code,\n        location_hub_sat.city_id,\n        location_hub_sat.state_id,\n        location_hub_sat.country_id,\n        location_hub_sat.district_id,\n        location_hub_sat.zone_id,\n        location_hub_sat.region_id,\n        location_hub_sat.area_id\n    FROM location_hub_sat\n)\n\nSELECT *\nFROM star_location", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["location_id"], "time_spine": null}, "model.dbt_vault_v2.raw_location": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "raw_location", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_stage/raw_location.sql", "original_file_path": "models/raw_stage/raw_location.sql", "unique_id": "model.dbt_vault_v2.raw_location", "fqn": ["dbt_vault_v2", "raw_stage", "raw_location"], "alias": "raw_location", "checksum": {"name": "sha256", "checksum": "04e4ccecc44d25091f0e9bfbeaa5025a56cc06a122c38139bad837036ccca412"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["raw"]}, "created_at": 1734520877.3449402, "relation_name": "DBT_DB.DBT_VAULT.raw_location", "raw_code": "select distinct * from {{ source('samples_data', 'STG_LOCATION_RAW') }}", "language": "sql", "refs": [], "sources": [["samples_data", "STG_LOCATION_RAW"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_vault_v2.samples_data.STG_LOCATION_RAW"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_stage/raw_location.sql", "compiled": true, "compiled_code": "select distinct * from DBT_DB.STAGING.STG_LOCATION_RAW", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.raw_sales": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "raw_sales", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_stage/raw_sales.sql", "original_file_path": "models/raw_stage/raw_sales.sql", "unique_id": "model.dbt_vault_v2.raw_sales", "fqn": ["dbt_vault_v2", "raw_stage", "raw_sales"], "alias": "raw_sales", "checksum": {"name": "sha256", "checksum": "a59cc142e68b6f4a8a5961f77368ff2d961fe4bb6c9c5ff09b5c35d94579af0b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["raw"]}, "created_at": 1734520877.3462534, "relation_name": "DBT_DB.DBT_VAULT.raw_sales", "raw_code": "select * from {{ source('samples_data', 'STG_SALES_RAW') }}", "language": "sql", "refs": [], "sources": [["samples_data", "STG_SALES_RAW"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_vault_v2.samples_data.STG_SALES_RAW"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_stage/raw_sales.sql", "compiled": true, "compiled_code": "select * from DBT_DB.STAGING.STG_SALES_RAW", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.raw_product": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "raw_product", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_stage/raw_product.sql", "original_file_path": "models/raw_stage/raw_product.sql", "unique_id": "model.dbt_vault_v2.raw_product", "fqn": ["dbt_vault_v2", "raw_stage", "raw_product"], "alias": "raw_product", "checksum": {"name": "sha256", "checksum": "25d0c70178349fcf007bf614a59d962bf094b126fbedb1e674432283e7e3a645"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["raw"]}, "created_at": 1734520877.3477836, "relation_name": "DBT_DB.DBT_VAULT.raw_product", "raw_code": "select * from {{ source('samples_data', 'STG_PRODUCT_RAW') }}", "language": "sql", "refs": [], "sources": [["samples_data", "STG_PRODUCT_RAW"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_vault_v2.samples_data.STG_PRODUCT_RAW"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_stage/raw_product.sql", "compiled": true, "compiled_code": "select * from DBT_DB.STAGING.STG_PRODUCT_RAW", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.v_stg_sales": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "v_stg_sales", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "stage/v_stg_sales.sql", "original_file_path": "models/stage/v_stg_sales.sql", "unique_id": "model.dbt_vault_v2.v_stg_sales", "fqn": ["dbt_vault_v2", "stage", "v_stg_sales"], "alias": "v_stg_sales", "checksum": {"name": "sha256", "checksum": "c351203c38a37472d74c3b9d684cf47d6443764e533671fc5926c12e40854fbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["stage"], "enabled": true}, "created_at": 1734520877.3491747, "relation_name": "DBT_DB.DBT_VAULT.v_stg_sales", "raw_code": "{%- set yaml_metadata -%}\n\nsource_model: 'raw_sales'\nderived_columns:\n  RECORD_SOURCE: 'SOURCE_FILE'\n  SALES_KEY: 'TRANSACTION_SALES'\n  LOAD_DATE: 'LDTS'\n--   EFFECTIVE_FROM: 'TRANSACTION_DATE'\nhashed_columns:\n    SALES_HK: 'TRANSACTION_SALES'\n\n    LOCATION_HK: 'LOCATION_ID'\n    PRODUCT_HK: 'SKU_ID'\n\n    PRODUCT_SALES_PK:\n        - 'SKU_ID'\n        - 'TRANSACTION_SALES'\n\n    LOCATION_SALES_PK:\n        - 'LOCATION_ID'\n        - 'TRANSACTION_SALES'\n    SALES_HASHDIFF:\n        is_hashdiff: true\n        columns: []\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{# Example: Dynamically fetch columns from the raw_SALES model #}\n{% set dynamic_columns = get_filtered_columns(ref('raw_sales'), except=['TRANSACTION_SALES', 'LDTS', 'SOURCE_FILE' ,'RECORD_SOURCE', 'SALES_KEY', 'LOAD_DATE']) %}\n\n{# Populate the columns in SALES_HASHDIFF dynamically #}\n{% set _ = metadata_dict['hashed_columns']['SALES_HASHDIFF'].update({\n    'columns': dynamic_columns\n}) %}\n\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=source_model,\n                     derived_columns=derived_columns,\n                     hashed_columns=hashed_columns,\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "raw_sales", "package": null, "version": null}, {"name": "raw_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_vault_v2.get_filtered_columns", "macro.automate_dv.stage"], "nodes": ["model.dbt_vault_v2.raw_sales"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/stage/v_stg_sales.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT *\n\n    FROM DBT_DB.DBT_VAULT.raw_sales\n),\n\nderived_columns AS (\n\n    SELECT\n\n    SOURCE_FILE AS RECORD_SOURCE,\n    TRANSACTION_SALES AS SALES_KEY,\n    LDTS AS LOAD_DATE\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    SALES_KEY,\n    LOAD_DATE,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(TRANSACTION_SALES AS VARCHAR))), '')) AS BINARY(16)) AS SALES_HK,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(LOCATION_ID AS VARCHAR))), '')) AS BINARY(16)) AS LOCATION_HK,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(SKU_ID AS VARCHAR))), '')) AS BINARY(16)) AS PRODUCT_HK,\n\n    CAST(MD5_BINARY(NULLIF(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(SKU_ID AS VARCHAR))), ''), '^^'), '||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(TRANSACTION_SALES AS VARCHAR))), ''), '^^')\n    ), '^^||^^')) AS BINARY(16)) AS PRODUCT_SALES_PK,\n\n    CAST(MD5_BINARY(NULLIF(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(LOCATION_ID AS VARCHAR))), ''), '^^'), '||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(TRANSACTION_SALES AS VARCHAR))), ''), '^^')\n    ), '^^||^^')) AS BINARY(16)) AS LOCATION_SALES_PK,\n\n    CAST(MD5_BINARY() AS BINARY(16)) AS SALES_HASHDIFF\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    SALES_KEY,\n    LOAD_DATE,\n    SALES_HK,\n    LOCATION_HK,\n    PRODUCT_HK,\n    PRODUCT_SALES_PK,\n    LOCATION_SALES_PK,\n    SALES_HASHDIFF\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.v_stg_location": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "v_stg_location", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "stage/v_stg_location.sql", "original_file_path": "models/stage/v_stg_location.sql", "unique_id": "model.dbt_vault_v2.v_stg_location", "fqn": ["dbt_vault_v2", "stage", "v_stg_location"], "alias": "v_stg_location", "checksum": {"name": "sha256", "checksum": "0b261ad581b15176fef3b04145bd3220fdaefe56a8d5321a88e302109329bcf1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["stage"], "enabled": true}, "created_at": 1734520877.4800024, "relation_name": "DBT_DB.DBT_VAULT.v_stg_location", "raw_code": "{%- set yaml_metadata -%}\n\nsource_model: 'raw_location'\nderived_columns:\n  RECORD_SOURCE: 'SOURCE_FILE'\n  LOCATION_KEY: 'LOCATION_ID'\n  LOAD_DATE: 'LDTS'\n--   EFFECTIVE_FROM: 'TRANSACTION_DATE'\n\nhashed_columns:\n    LOCATION_HK: 'LOCATION_ID'\n\n    LOCATION_HASHDIFF:\n        is_hashdiff: true\n        columns: []\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{# Example: Dynamically fetch columns from the raw_location model #}\n{% set dynamic_columns = get_filtered_columns(ref('raw_location'), except=['LOCATION_ID', 'LDTS', 'SOURCE_FILE' ,'RECORD_SOURCE', 'LOCATION_KEY', 'LOAD_DATE']) %}\n\n{# Populate the columns in LOCATION_HASHDIFF dynamically #}\n{% set _ = metadata_dict['hashed_columns']['LOCATION_HASHDIFF'].update({\n    'columns': dynamic_columns\n}) %}\n\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=source_model,\n                     derived_columns=derived_columns,\n                     hashed_columns=hashed_columns,\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "raw_location", "package": null, "version": null}, {"name": "raw_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_vault_v2.get_filtered_columns", "macro.automate_dv.stage"], "nodes": ["model.dbt_vault_v2.raw_location"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/stage/v_stg_location.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT *\n\n    FROM DBT_DB.DBT_VAULT.raw_location\n),\n\nderived_columns AS (\n\n    SELECT\n\n    SOURCE_FILE AS RECORD_SOURCE,\n    LOCATION_ID AS LOCATION_KEY,\n    LDTS AS LOAD_DATE\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    LOCATION_KEY,\n    LOAD_DATE,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(LOCATION_ID AS VARCHAR))), '')) AS BINARY(16)) AS LOCATION_HK,\n\n    CAST(MD5_BINARY() AS BINARY(16)) AS LOCATION_HASHDIFF\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    LOCATION_KEY,\n    LOAD_DATE,\n    LOCATION_HK,\n    LOCATION_HASHDIFF\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.v_stg_product": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "v_stg_product", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "stage/v_stg_product.sql", "original_file_path": "models/stage/v_stg_product.sql", "unique_id": "model.dbt_vault_v2.v_stg_product", "fqn": ["dbt_vault_v2", "stage", "v_stg_product"], "alias": "v_stg_product", "checksum": {"name": "sha256", "checksum": "fe3b29c1514a5906ad5576adb8992adeeede3a39fa42c9c992811b9845dee573"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["stage"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["stage"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["stage"], "enabled": true}, "created_at": 1734520877.489267, "relation_name": "DBT_DB.DBT_VAULT.v_stg_product", "raw_code": "{%- set yaml_metadata -%}\n\nsource_model: 'raw_product'\nderived_columns:\n  RECORD_SOURCE: 'SOURCE_FILE'\n  PRODUCT_KEY: 'SKU_ID'\n  LOAD_DATE: 'LDTS'\n--   EFFECTIVE_FROM: 'TRANSACTION_DATE'\nhashed_columns:\n    PRODUCT_HK: 'SKU_ID'\n\n    PRODUCT_HASHDIFF:\n        is_hashdiff: true\n        columns: []\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{# Example: Dynamically fetch columns from the raw_product model #}\n{% set dynamic_columns = get_filtered_columns(ref('raw_product'), except=['SKU_ID', 'LDTS', 'SOURCE_FILE' ,'RECORD_SOURCE', 'PRODUCT_KEY', 'LOAD_DATE']) %}\n\n{# Populate the columns in PRODUCT_HASHDIFF dynamically #}\n{% set _ = metadata_dict['hashed_columns']['PRODUCT_HASHDIFF'].update({\n    'columns': dynamic_columns\n}) %}\n\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=source_model,\n                     derived_columns=derived_columns,\n                     hashed_columns=hashed_columns,\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}, {"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_vault_v2.get_filtered_columns", "macro.automate_dv.stage"], "nodes": ["model.dbt_vault_v2.raw_product"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/stage/v_stg_product.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT *\n\n    FROM DBT_DB.DBT_VAULT.raw_product\n),\n\nderived_columns AS (\n\n    SELECT\n\n    SOURCE_FILE AS RECORD_SOURCE,\n    SKU_ID AS PRODUCT_KEY,\n    LDTS AS LOAD_DATE\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    PRODUCT_KEY,\n    LOAD_DATE,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(SKU_ID AS VARCHAR))), '')) AS BINARY(16)) AS PRODUCT_HK,\n\n    CAST(MD5_BINARY() AS BINARY(16)) AS PRODUCT_HASHDIFF\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    PRODUCT_KEY,\n    LOAD_DATE,\n    PRODUCT_HK,\n    PRODUCT_HASHDIFF\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.sat_location": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "sat_location", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/sats/sat_location.sql", "original_file_path": "models/raw_vault/sats/sat_location.sql", "unique_id": "model.dbt_vault_v2.sat_location", "fqn": ["dbt_vault_v2", "raw_vault", "sats", "sat_location"], "alias": "sat_location", "checksum": {"name": "sha256", "checksum": "dba96d7350eeeeb7459381095a6a268b4479783295058c39c88af66e25c97c42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "satellite"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "satellite"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["satellite"]}, "created_at": 1734520877.4980001, "relation_name": "DBT_DB.DBT_VAULT.sat_location", "raw_code": "{%- set source_model = \"v_stg_location\" -%}\n{%- set src_pk = \"LOCATION_HK\" -%}\n{%- set src_hashdiff = \"LOCATION_HASHDIFF\" -%}\n{%- set src_payload =  get_filtered_columns(ref('raw_location'), except=['LOCATION_ID', 'LDTS', 'SOURCE_FILE']) -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                   src_payload=src_payload, src_eff=src_eff,\n                   src_ldts=src_ldts, src_source=src_source,\n                   source_model=source_model) }}", "language": "sql", "refs": [{"name": "raw_location", "package": null, "version": null}, {"name": "v_stg_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_vault_v2.get_filtered_columns", "macro.automate_dv.sat"], "nodes": ["model.dbt_vault_v2.raw_location", "model.dbt_vault_v2.v_stg_location"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/sats/sat_location.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.LOCATION_HK, a.LOCATION_HASHDIFF, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM DBT_DB.DBT_VAULT.v_stg_location AS a\n    WHERE a.LOCATION_HK IS NOT NULL\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.LOCATION_HK, stage.LOCATION_HASHDIFF, stage.LOAD_DATE, stage.RECORD_SOURCE\n    FROM source_data AS stage\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.sat_product": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "sat_product", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/sats/sat_product.sql", "original_file_path": "models/raw_vault/sats/sat_product.sql", "unique_id": "model.dbt_vault_v2.sat_product", "fqn": ["dbt_vault_v2", "raw_vault", "sats", "sat_product"], "alias": "sat_product", "checksum": {"name": "sha256", "checksum": "7e296a067a75233f4466219ef7a90cbac40033bf3db7e16b1111a1ff6201a225"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "satellite"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "satellite"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["satellite"]}, "created_at": 1734520877.5635943, "relation_name": "DBT_DB.DBT_VAULT.sat_product", "raw_code": "{%- set source_model = \"v_stg_product\" -%}\n{%- set src_pk = \"PRODUCT_HK\" -%}\n{%- set src_hashdiff = \"PRODUCT_HASHDIFF\" -%}\n{%- set src_payload =  get_filtered_columns(ref('raw_product'), except=['SKU_ID', 'LDTS', 'SOURCE_FILE']) -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                   src_payload=src_payload, src_eff=src_eff,\n                   src_ldts=src_ldts, src_source=src_source,\n                   source_model=source_model) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}, {"name": "v_stg_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_vault_v2.get_filtered_columns", "macro.automate_dv.sat"], "nodes": ["model.dbt_vault_v2.raw_product", "model.dbt_vault_v2.v_stg_product"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/sats/sat_product.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.PRODUCT_HK, a.PRODUCT_HASHDIFF, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM DBT_DB.DBT_VAULT.v_stg_product AS a\n    WHERE a.PRODUCT_HK IS NOT NULL\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.PRODUCT_HK, stage.PRODUCT_HASHDIFF, stage.LOAD_DATE, stage.RECORD_SOURCE\n    FROM source_data AS stage\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.sat_sales": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "sat_sales", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/sats/sat_sales.sql", "original_file_path": "models/raw_vault/sats/sat_sales.sql", "unique_id": "model.dbt_vault_v2.sat_sales", "fqn": ["dbt_vault_v2", "raw_vault", "sats", "sat_sales"], "alias": "sat_sales", "checksum": {"name": "sha256", "checksum": "95ac92eb879c8a2a662ce8f2fbc38edf55258826c282c85ebb7c13f095a2d792"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "satellite"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "satellite"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["satellite"]}, "created_at": 1734520877.5713713, "relation_name": "DBT_DB.DBT_VAULT.sat_sales", "raw_code": "{%- set source_model = \"v_stg_sales\" -%}\n{%- set src_pk = \"SALES_HK\" -%}\n{%- set src_hashdiff = \"SALES_HASHDIFF\" -%}\n{%- set src_payload =  get_filtered_columns(ref('raw_sales'), except=['TRANSACTION_SALES', 'SKU_ID', 'LOCATION_ID', 'LDTS', 'SOURCE_FILE']) -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                   src_payload=src_payload, src_eff=src_eff,\n                   src_ldts=src_ldts, src_source=src_source,\n                   source_model=source_model) }}", "language": "sql", "refs": [{"name": "raw_sales", "package": null, "version": null}, {"name": "v_stg_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_vault_v2.get_filtered_columns", "macro.automate_dv.sat"], "nodes": ["model.dbt_vault_v2.raw_sales", "model.dbt_vault_v2.v_stg_sales"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/sats/sat_sales.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.SALES_HK, a.SALES_HASHDIFF, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS a\n    WHERE a.SALES_HK IS NOT NULL\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.SALES_HK, stage.SALES_HASHDIFF, stage.LOAD_DATE, stage.RECORD_SOURCE\n    FROM source_data AS stage\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.link_product_sales": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "link_product_sales", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/links/link_product_sales.sql", "original_file_path": "models/raw_vault/links/link_product_sales.sql", "unique_id": "model.dbt_vault_v2.link_product_sales", "fqn": ["dbt_vault_v2", "raw_vault", "links", "link_product_sales"], "alias": "link_product_sales", "checksum": {"name": "sha256", "checksum": "77811357c01a87d6b250bb2388a07701419a67a02ec9da62bddb1b866821b06e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "link"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "link"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["link"]}, "created_at": 1734520877.5801058, "relation_name": "DBT_DB.DBT_VAULT.link_product_sales", "raw_code": "{%- set source_model = \"v_stg_sales\" -%}\n{%- set src_pk = \"PRODUCT_SALES_PK\" -%}\n{%- set src_fk = [\"PRODUCT_HK\", \"SALES_HK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "v_stg_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_vault_v2.v_stg_sales"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/links/link_product_sales.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.PRODUCT_SALES_PK, rr.PRODUCT_HK, rr.SALES_HK, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.PRODUCT_SALES_PK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS rr\n    WHERE rr.PRODUCT_SALES_PK IS NOT NULL\n    AND rr.PRODUCT_HK IS NOT NULL\n    AND rr.SALES_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.PRODUCT_SALES_PK, a.PRODUCT_HK, a.SALES_HK, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.link_location_sales": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "link_location_sales", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/links/link_location_sales.sql", "original_file_path": "models/raw_vault/links/link_location_sales.sql", "unique_id": "model.dbt_vault_v2.link_location_sales", "fqn": ["dbt_vault_v2", "raw_vault", "links", "link_location_sales"], "alias": "link_location_sales", "checksum": {"name": "sha256", "checksum": "e04083bedee00bc7c76048e00f618491eb426a4d189719c070a9c76c9e673d06"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "link"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "link"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["link"]}, "created_at": 1734520877.6024377, "relation_name": "DBT_DB.DBT_VAULT.link_location_sales", "raw_code": "{%- set source_model = \"v_stg_sales\" -%}\n{%- set src_pk = \"LOCATION_SALES_PK\" -%}\n{%- set src_fk = [\"LOCATION_HK\", \"SALES_HK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "v_stg_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_vault_v2.v_stg_sales"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/links/link_location_sales.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.LOCATION_SALES_PK, rr.LOCATION_HK, rr.SALES_HK, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.LOCATION_SALES_PK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS rr\n    WHERE rr.LOCATION_SALES_PK IS NOT NULL\n    AND rr.LOCATION_HK IS NOT NULL\n    AND rr.SALES_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.LOCATION_SALES_PK, a.LOCATION_HK, a.SALES_HK, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.hub_product": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "hub_product", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/hubs/hub_product.sql", "original_file_path": "models/raw_vault/hubs/hub_product.sql", "unique_id": "model.dbt_vault_v2.hub_product", "fqn": ["dbt_vault_v2", "raw_vault", "hubs", "hub_product"], "alias": "hub_product", "checksum": {"name": "sha256", "checksum": "4ce9016d866b20782f3b7404866735010013aef0de755d869daad0efb8534f20"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "hub"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "hub"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["hub"]}, "created_at": 1734520877.6101696, "relation_name": "DBT_DB.DBT_VAULT.hub_product", "raw_code": "{%- set source_model = \"v_stg_product\" -%}\n{%- set src_pk = \"PRODUCT_HK\" -%}\n{%- set src_nk = \"SKU_ID\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                   src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "v_stg_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_vault_v2.v_stg_product"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/hubs/hub_product.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.PRODUCT_HK, rr.SKU_ID, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.PRODUCT_HK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_product AS rr\n    WHERE rr.PRODUCT_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.PRODUCT_HK, a.SKU_ID, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.hub_location": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "hub_location", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/hubs/hub_location.sql", "original_file_path": "models/raw_vault/hubs/hub_location.sql", "unique_id": "model.dbt_vault_v2.hub_location", "fqn": ["dbt_vault_v2", "raw_vault", "hubs", "hub_location"], "alias": "hub_location", "checksum": {"name": "sha256", "checksum": "db542b2209d61e5b1c53b7bc2be4db036afc15f73d1c876b170ce4abe7f9c416"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "hub"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "hub"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["hub"]}, "created_at": 1734520877.6277783, "relation_name": "DBT_DB.DBT_VAULT.hub_location", "raw_code": "{%- set source_model = \"v_stg_location\" -%}\n{%- set src_pk = \"LOCATION_HK\" -%}\n{%- set src_nk = \"LOCATION_ID\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                   src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "v_stg_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_vault_v2.v_stg_location"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/hubs/hub_location.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.LOCATION_HK, rr.LOCATION_ID, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.LOCATION_HK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_location AS rr\n    WHERE rr.LOCATION_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.LOCATION_HK, a.LOCATION_ID, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_vault_v2.hub_sales": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "hub_sales", "resource_type": "model", "package_name": "dbt_vault_v2", "path": "raw_vault/hubs/hub_sales.sql", "original_file_path": "models/raw_vault/hubs/hub_sales.sql", "unique_id": "model.dbt_vault_v2.hub_sales", "fqn": ["dbt_vault_v2", "raw_vault", "hubs", "hub_sales"], "alias": "hub_sales", "checksum": {"name": "sha256", "checksum": "2eb80037afa29c525e491cd3db1d39ac2a8d5bd2d826c9a3e938258a4a8f1d2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["raw_vault", "hub"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["raw_vault", "hub"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "tags": ["hub"]}, "created_at": 1734520877.6335914, "relation_name": "DBT_DB.DBT_VAULT.hub_sales", "raw_code": "{%- set source_model = \"v_stg_sales\" -%}\n{%- set src_pk = \"SALES_HK\" -%}\n{%- set src_nk = \"TRANSACTION_SALES\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ automate_dv.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                   src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "v_stg_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_vault_v2.v_stg_sales"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/raw_vault/hubs/hub_sales.sql", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.SALES_HK, rr.TRANSACTION_SALES, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.SALES_HK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS rr\n    WHERE rr.SALES_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.SALES_HK, a.TRANSACTION_SALES, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_node_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_node_relationships.sql", "original_file_path": "models/staging/graph/stg_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_node_relationships"], "alias": "stg_node_relationships", "checksum": {"name": "sha256", "checksum": "3b1dff9088982b74dc0917adbd9567d164e56b85c9fec26adfc961be2b22ac63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520877.712735, "relation_name": "DBT_DB.DBT_VAULT.stg_node_relationships", "raw_code": "with \n\n_base_node_relationships as (\n    select * from {{ ref('base_node_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_node_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_node_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_node_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from DBT_DB.DBT_VAULT.base_node_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_metric_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metric_relationships.sql", "original_file_path": "models/staging/graph/stg_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metric_relationships"], "alias": "stg_metric_relationships", "checksum": {"name": "sha256", "checksum": "0351601c92dd9b5b4b0a4fac69e491f2c6fd568cf38aeb1040947d6b3ecbb9ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520877.7262912, "relation_name": "DBT_DB.DBT_VAULT.stg_metric_relationships", "raw_code": "with \n\n_base_metric_relationships as (\n    select * from {{ ref('base_metric_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_metric_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metric_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from DBT_DB.DBT_VAULT.base_metric_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_columns": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_columns.sql", "original_file_path": "models/staging/graph/stg_columns.sql", "unique_id": "model.dbt_project_evaluator.stg_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_columns"], "alias": "stg_columns", "checksum": {"name": "sha256", "checksum": "c8f3f73b537d183c2b66a143cf4a5bd6f7e0628c091e82b9938183c1d6c8ab71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520877.730659, "relation_name": "DBT_DB.DBT_VAULT.stg_columns", "raw_code": "with\n\nfinal as (\n\n    {{ dbt_utils.union_relations([\n        ref('base_node_columns'),\n        ref('base_source_columns')\n    ])}}\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_node_columns", "package": null, "version": null}, {"name": "base_source_columns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_columns.sql", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.base_node_columns' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.base_node_columns\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.base_source_columns' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.base_source_columns\n\n            \n        )\n\n        \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_sources": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_sources.sql", "original_file_path": "models/staging/graph/stg_sources.sql", "unique_id": "model.dbt_project_evaluator.stg_sources", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_sources"], "alias": "stg_sources", "checksum": {"name": "sha256", "checksum": "e005d460c2569d1719c451e6ae70acada6d2052b776a4be9447f6b6f88d9e34f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='sources') }}"}, "created_at": 1734520877.7485917, "relation_name": "DBT_DB.DBT_VAULT.stg_sources", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as alias,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as source_name,\n    cast(True as {{ dbt.type_boolean() }}) as is_source_described,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(True as {{ dbt.type_boolean() }}) as is_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as loaded_at_field,\n    cast(True as {{ dbt.type_boolean() }}) as is_freshness_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as database,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as schema,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as loader,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as identifier,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }})  as meta,\n    cast(True as {{ dbt.type_boolean() }}) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_sources.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_nodes": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_nodes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_nodes.sql", "original_file_path": "models/staging/graph/stg_nodes.sql", "unique_id": "model.dbt_project_evaluator.stg_nodes", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_nodes"], "alias": "stg_nodes", "checksum": {"name": "sha256", "checksum": "f6c648e7063654b3ef2a7bffe1905ca7eab0f88aeea4a2a35c4c8ec496ed9f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='nodes') }}"}, "created_at": 1734520877.7782083, "relation_name": "DBT_DB.DBT_VAULT.stg_nodes", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_enabled,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as materialized,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as on_schema_change,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as model_group,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as access,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as latest_version,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as version,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as deprecation_date,\n    cast(True as {{ dbt.type_boolean() }}) as is_contract_enforced,\n    cast(0 as {{ dbt.type_int() }}) as total_defined_columns,\n    cast(0 as {{ dbt.type_int() }}) as total_described_columns,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as database,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as schema,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as alias,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as column_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as meta,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as hard_coded_references,\n    cast(null as {{ dbt.type_int() }}) as number_lines,\n    cast(null as {{ dbt.type_float() }}) as sql_complexity,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as macro_dependencies,\n    cast(True as {{ dbt.type_boolean() }}) as is_generic_test,\n    cast(True as {{ dbt.type_boolean() }}) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_nodes.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_exposures": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_exposures", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposures.sql", "original_file_path": "models/staging/graph/stg_exposures.sql", "unique_id": "model.dbt_project_evaluator.stg_exposures", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposures"], "alias": "stg_exposures", "checksum": {"name": "sha256", "checksum": "131e195d8fd57db002d4e3b1d407220d82d1df8d358fd54fbdcaab6fb94672b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='exposures') }}"}, "created_at": 1734520877.8033283, "relation_name": "DBT_DB.DBT_VAULT.stg_exposures", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as exposure_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as maturity,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as url,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as owner_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as owner_email,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }} ) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposures.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_metrics": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_metrics", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metrics.sql", "original_file_path": "models/staging/graph/stg_metrics.sql", "unique_id": "model.dbt_project_evaluator.stg_metrics", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metrics"], "alias": "stg_metrics", "checksum": {"name": "sha256", "checksum": "a071f6a6763991eae8bca6c3d5c41377ad648b130bfca432e58c79f3a8d321c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='metrics') }}"}, "created_at": 1734520877.8178184, "relation_name": "DBT_DB.DBT_VAULT.stg_metrics", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as resource_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as file_path,\n    cast(True as {{ dbt.type_boolean() }}) as is_described,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as label,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as package_name,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_filter,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_measure,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_measure_alias,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as numerator,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as denominator,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as expr,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as metric_window,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as grain_to_date,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metrics.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_exposure_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposure_relationships.sql", "original_file_path": "models/staging/graph/stg_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposure_relationships"], "alias": "stg_exposure_relationships", "checksum": {"name": "sha256", "checksum": "80d348798f7b7c4a00990729922ccdd248ff8f8b29ee3dbffdd6589315d3930f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520877.8337126, "relation_name": "DBT_DB.DBT_VAULT.stg_exposure_relationships", "raw_code": "with \n\n_base_exposure_relationships as (\n    select * from {{ ref('base_exposure_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_exposure_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_exposure_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposure_relationships.sql", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from DBT_DB.DBT_VAULT.base_exposure_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_source_columns": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "base_source_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_source_columns.sql", "original_file_path": "models/staging/graph/base/base_source_columns.sql", "unique_id": "model.dbt_project_evaluator.base_source_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_source_columns"], "alias": "base_source_columns", "checksum": {"name": "sha256", "checksum": "16f0d47e877e31c3599cf7587977283d35473209ccea7f2eea5ab2287d576463"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}"}, "created_at": 1734520877.8392613, "relation_name": "DBT_DB.DBT_VAULT.base_source_columns", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as node_unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as data_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt_project_evaluator.type_large_string", "macro.dbt.type_int", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_source_columns.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_metric_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "base_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_metric_relationships.sql", "original_file_path": "models/staging/graph/base/base_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_metric_relationships"], "alias": "base_metric_relationships", "checksum": {"name": "sha256", "checksum": "fb76ef32293d63bd176c83859f97de76efa56a07835d70188e06010e6c3cd203"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}"}, "created_at": 1734520877.8523464, "relation_name": "DBT_DB.DBT_VAULT.base_metric_relationships", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_metric_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_node_columns": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "base_node_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_columns.sql", "original_file_path": "models/staging/graph/base/base_node_columns.sql", "unique_id": "model.dbt_project_evaluator.base_node_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_columns"], "alias": "base_node_columns", "checksum": {"name": "sha256", "checksum": "069c7d09a5775daef4dd347a11aa091623a17a8416cd72c0516ee9575430f1ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}"}, "created_at": 1734520877.8661084, "relation_name": "DBT_DB.DBT_VAULT.base_node_columns", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe() }}) as node_unique_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as data_type,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as constraints,\n    cast(True as {{ dbt.type_boolean() }}) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt_project_evaluator.type_large_string", "macro.dbt.type_boolean", "macro.dbt.type_int", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_node_columns.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_exposure_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "base_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_exposure_relationships.sql", "original_file_path": "models/staging/graph/base/base_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_exposure_relationships"], "alias": "base_exposure_relationships", "checksum": {"name": "sha256", "checksum": "1e2094a8baab6b2fef788c0967f4210e79cb69071ab3ecb4a0a631f2f9b5707b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}"}, "created_at": 1734520877.8769507, "relation_name": "DBT_DB.DBT_VAULT.base_exposure_relationships", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_exposure_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.base_node_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "base_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_relationships.sql", "original_file_path": "models/staging/graph/base/base_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_relationships"], "alias": "base_node_relationships", "checksum": {"name": "sha256", "checksum": "024d38b5f84cbec88ceaabd20102a562016ba5a515052f31def3b22c2442abba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "post-hook": "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}"}, "created_at": 1734520877.8859115, "relation_name": "DBT_DB.DBT_VAULT.base_node_relationships", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as resource_id,\n    cast(null as {{ dbt_project_evaluator.type_string_dpe()}}) as direct_parent_id,\n    cast(True as {{ dbt.type_boolean() }}) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.insert_resources_from_graph", "macro.dbt_project_evaluator.check_model_is_table"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/base/base_node_relationships.sql", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_naming_convention_folders": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_naming_convention_folders", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_folders.sql", "original_file_path": "models/staging/variables/stg_naming_convention_folders.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_folders"], "alias": "stg_naming_convention_folders", "checksum": {"name": "sha256", "checksum": "269b827916875eb1bdc24c13fd0c33735c86aea2cbb2a978bc3668e5c8cb516f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1734520877.8955448, "relation_name": "DBT_DB.DBT_VAULT.stg_naming_convention_folders", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_folder = '_folder_name' %}\n\n{% set vars_folders = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_folders.append(model_type ~ suffix_folder) %}\n{% endfor %}\n\nwith vars_folders_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_folders) }}\n)\n\nselect\n    var_name as folder_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_folder), \"''\") }} as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_folders.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.stg_naming_convention_prefixes": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "stg_naming_convention_prefixes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_prefixes.sql", "original_file_path": "models/staging/variables/stg_naming_convention_prefixes.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_prefixes"], "alias": "stg_naming_convention_prefixes", "checksum": {"name": "sha256", "checksum": "2dccea5430120d7f403c4f57d02227545db604d23925f41b474236a4094d8c04"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1734520877.9131973, "relation_name": "DBT_DB.DBT_VAULT.stg_naming_convention_prefixes", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_model_type = '_prefixes' %}\n\n{% set vars_prefix = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_prefix.append(model_type ~ suffix_model_type) %}\n{% endfor %}\n\nwith vars_prefix_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_prefix) }}\n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_model_type) , \"''\") }} as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['model_type', 'prefix_value']) }} as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace", "macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_prefixes.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_exposures_dependent_on_private_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_exposures_dependent_on_private_models.sql", "original_file_path": "models/marts/governance/fct_exposures_dependent_on_private_models.sql", "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_exposures_dependent_on_private_models"], "alias": "fct_exposures_dependent_on_private_models", "checksum": {"name": "sha256", "checksum": "b08d3667b3752cd9b0dd8981ec7e55af29c109e2d590c65ab84b77cb213d5a38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each direct relationship between a parent resource and a downstream exposure where the parent resource is not a public model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.5771267, "relation_name": "DBT_DB.DBT_VAULT.fct_exposures_dependent_on_private_models", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_exposures_dependent_on_private_models.sql", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_public_models_without_contract": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_public_models_without_contract", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_public_models_without_contract.sql", "original_file_path": "models/marts/governance/fct_public_models_without_contract.sql", "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_public_models_without_contract"], "alias": "fct_public_models_without_contract", "checksum": {"name": "sha256", "checksum": "76f602dad9bd99ea230d3ecfe7de6503d1d5b0e20ddd1b9f0609d2bfe34244c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have an enforced contract", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.576125, "relation_name": "DBT_DB.DBT_VAULT.fct_public_models_without_contract", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_public_models_without_contract.sql", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_public_models": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_undocumented_public_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_undocumented_public_models.sql", "original_file_path": "models/marts/governance/fct_undocumented_public_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_undocumented_public_models"], "alias": "fct_undocumented_public_models", "checksum": {"name": "sha256", "checksum": "ee476e5f468028cb08f6d0f29adc42829534800da3b524adc2f87c04bd76cef5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have both a model level description, and a description for each of the columns in the model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.5767467, "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_public_models", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/fct_undocumented_public_models.sql", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_model_naming_conventions": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_model_naming_conventions", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_naming_conventions.sql", "original_file_path": "models/marts/structure/fct_model_naming_conventions.sql", "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_naming_conventions"], "alias": "fct_model_naming_conventions", "checksum": {"name": "sha256", "checksum": "93b7e8f66021579d9cc67fdd8690de9110e2f03144e42ed2e0dd686e005250c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where a model does NOT have the appropriate prefix.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.5964851, "relation_name": "DBT_DB.DBT_VAULT.fct_model_naming_conventions", "raw_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        {{ dbt.listagg(\n            measure='prefix_value', \n            delimiter_text=\"', '\", \n            order_by_clause='order by prefix_value' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_naming_conventions.sql", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_prefixes\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    listagg(\n        prefix_value,\n        ', '\n        )\n        within group (order by prefix_value) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_model_directories": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_model_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_directories.sql", "original_file_path": "models/marts/structure/fct_model_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_model_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_directories"], "alias": "fct_model_directories", "checksum": {"name": "sha256", "checksum": "56c25e3298aecc9e1432b197cf0db47eeaf8c86a840d51dd70654a6662324342"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where a model is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.5960975, "relation_name": "DBT_DB.DBT_VAULT.fct_model_directories", "raw_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n{% set directory_pattern = get_directory_pattern() %}\n \nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfolders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nall_dag_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models{{ directory_pattern }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || parent_source_name || '{{ directory_pattern }}' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '{{ directory_pattern }}...{{ directory_pattern }}' || folders.folder_name_value || '{{ directory_pattern }}...{{ directory_pattern }}' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}, {"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_directories.sql", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nfolders as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_folders\n), \n\nall_dag_relationships as (\n    select * from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_source_directories": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_source_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_source_directories.sql", "original_file_path": "models/marts/structure/fct_source_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_source_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_source_directories"], "alias": "fct_source_directories", "checksum": {"name": "sha256", "checksum": "6f8a1d0d64c5cc3b0a40eef7ab06c914651e74da6c2e52b151e9ade07aee03ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where a source definition is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.5968735, "relation_name": "DBT_DB.DBT_VAULT.fct_source_directories", "raw_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n{% set directory_pattern = get_directory_pattern() %}\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models{{ directory_pattern  }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || source_name || '{{ directory_pattern }}' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_source_directories.sql", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_test_directories": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_test_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_test_directories.sql", "original_file_path": "models/marts/structure/fct_test_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_test_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_test_directories"], "alias": "fct_test_directories", "checksum": {"name": "sha256", "checksum": "036ab595e5844a2e326b03b6f0341dd10f37dbc6250f99397cf0fc30cdcf44d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This finds all cases where the yml file for model tests is NOT in the same subdirectory as the corresponding model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.5972283, "relation_name": "DBT_DB.DBT_VAULT.fct_test_directories", "raw_code": "with\n\nresources as (\n\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from {{ ref('int_direct_relationships') }}\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_test_directories.sql", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from DBT_DB.DBT_VAULT.int_direct_relationships\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_all_dag_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "int_all_dag_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_dag_relationships.sql", "original_file_path": "models/marts/core/int_all_dag_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_dag_relationships"], "alias": "int_all_dag_relationships", "checksum": {"name": "sha256", "checksum": "b4c408aa270f14f715b34649af63bf54609d14d2995c38005e858574b531b731"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks', 'clickhouse'] else 'view' }}"}, "created_at": 1734520877.9754703, "relation_name": "DBT_DB.DBT_VAULT.int_all_dag_relationships", "raw_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n{{ dbt_project_evaluator.recursive_dag() }}\n\nselect * from all_relationships\norder by parent, distance", "language": "sql", "refs": [{"name": "int_direct_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.recursive_dag"], "nodes": ["model.dbt_project_evaluator.int_direct_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_dag_relationships.sql", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from DBT_DB.DBT_VAULT.int_direct_relationships\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        array_construct( resource_name ) as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_all_graph_resources": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "int_all_graph_resources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_graph_resources.sql", "original_file_path": "models/marts/core/int_all_graph_resources.sql", "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_graph_resources"], "alias": "int_all_graph_resources", "checksum": {"name": "sha256", "checksum": "aa19df5644c2271606c027bad305e40bd7d64b8c9d0a0fc5e2efb9c330b92e93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520877.9907742, "relation_name": "DBT_DB.DBT_VAULT.int_all_graph_resources", "raw_code": "-- one row for each resource in the graph\n\n{# flatten the sets of permissable primary key test sets to one level for later iteration #}\n{%- set test_macro_list = [] %}\n{%- set test_macro_names_list = [] %}\n{%- for test_set in var('primary_key_test_macros') -%}\n      {%- for test in test_set %}\n            {%- do test_macro_list.append(test) -%}\n      {%- endfor %}\n{%- endfor -%}\n{% for test in test_macro_list %}\n        {%- do test_macro_names_list.append(test.split('.')[1]) -%}\n{%- endfor -%}\n{%- if \"test_unique\" not in test_macro_names_list -%}\n    {%- do test_macro_list.append(\"dbt.test_unique\") -%}\n{%- endif -%}\n{%- set test_macro_set = set_strict(test_macro_list) -%}\n\n{%- set quoted_directory_pattern = wrap_string_with_quotes(get_directory_pattern()) %}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations([\n        ref('stg_nodes'),\n        ref('stg_exposures'),\n        ref('stg_metrics'),\n        ref('stg_sources')\n    ])}}\n\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n), \n\nnaming_convention_folders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  {{ dbt.concat(['source_name',\"'.'\",'name']) }}\n            when coalesce(version, '') != '' then {{ dbt.concat(['name',\"'.v'\",'version']) }} \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else {{ dbt.split_part('name', \"'_'\", 1) }}||'_' \n        end as prefix,\n        {{ get_dbtreplace_directory_pattern() }} as directory_path,\n        regexp_replace(file_path,'.*{{ get_regexp_directory_pattern() }}','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        {% for test in test_macro_set %}\n        unioned_with_calc.macro_dependencies like '%macro.{{ test }}%' and unioned_with_calc.resource_type = 'test' as is_{{ test.split('.')[1] }},  \n        {% endfor %}\n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "language": "sql", "refs": [{"name": "stg_nodes", "package": null, "version": null}, {"name": "stg_exposures", "package": null, "version": null}, {"name": "stg_metrics", "package": null, "version": null}, {"name": "stg_sources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_utils.union_relations", "macro.dbt.concat", "macro.dbt.split_part", "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro.dbt.position"], "nodes": ["model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_sources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_naming_convention_folders"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_graph_resources.sql", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_nodes' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_nodes\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_exposures' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_exposures\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_metrics' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_metrics\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_sources' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_sources\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_prefixes\n), \n\nnaming_convention_folders as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_folders\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n||'_' \n        end as prefix,\n        \n  \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_direct_relationships": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "int_direct_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_direct_relationships.sql", "original_file_path": "models/marts/core/int_direct_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_direct_relationships"], "alias": "int_direct_relationships", "checksum": {"name": "sha256", "checksum": "0c693c72ac6c64259cf842524c04c639becfd5937353f5d5aaa7dd6031bc6f79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}"}, "created_at": 1734520878.0133827, "relation_name": "DBT_DB.DBT_VAULT.int_direct_relationships", "raw_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from {{ ref('int_all_graph_resources') }}\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_node_relationships')}}\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_exposure_relationships')}}\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_metric_relationships')}}\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_node_relationships", "package": null, "version": null}, {"name": "stg_exposure_relationships", "package": null, "version": null}, {"name": "stg_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_node_relationships", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_direct_relationships.sql", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from DBT_DB.DBT_VAULT.int_all_graph_resources\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from DBT_DB.DBT_VAULT.stg_node_relationships\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from DBT_DB.DBT_VAULT.stg_exposure_relationships\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from DBT_DB.DBT_VAULT.stg_metric_relationships\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_models": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_undocumented_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_models.sql", "original_file_path": "models/marts/documentation/fct_undocumented_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_models"], "alias": "fct_undocumented_models", "checksum": {"name": "sha256", "checksum": "c8667f2c44681081d01b644a1cec9f8a0d5d62c1f89d132b5e9fa3e8cace2554"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model contains all models that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6099875, "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_models", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_models.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_sources": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_undocumented_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_sources.sql", "original_file_path": "models/marts/documentation/fct_undocumented_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_sources"], "alias": "fct_undocumented_sources", "checksum": {"name": "sha256", "checksum": "ca85ce862cbe9416515290c5f7e0b4732394c94caad12a0e6d7e0262ca6410be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model contains all sources that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6107132, "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_sources", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_sources.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_undocumented_source_tables": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_undocumented_source_tables", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_source_tables.sql", "original_file_path": "models/marts/documentation/fct_undocumented_source_tables.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_source_tables"], "alias": "fct_undocumented_source_tables", "checksum": {"name": "sha256", "checksum": "ccbde566a67506d88bd664fe2bab505f2736ab003510e6280772b02cc7e20394"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model contains all source tables that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6103556, "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_source_tables", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_source_tables.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_documentation_coverage": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_documentation_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_documentation_coverage.sql", "original_file_path": "models/marts/documentation/fct_documentation_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_documentation_coverage"], "alias": "fct_documentation_coverage", "checksum": {"name": "sha256", "checksum": "2cc61de2fb401924a201b80837ae9a008f8e0b4b337b8774b9cdc04221f3b734"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This model calculates the percent of enabled models in the project that have a configured description.  We recommend you describe at least 75 percent of your models. \n", "columns": {"documentation_coverage_pct": {"name": "documentation_coverage_pct", "description": "the number of models in the project with a description divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6095982, "relation_name": "DBT_DB.DBT_VAULT.fct_documentation_coverage", "raw_code": "with\n\nmodels as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when is_described and model_type = '{{ model_type }}' then 1.0 else 0 end as is_described_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        cast(count(*) as {{ dbt.type_int() }}) as total_models,\n        cast(sum(is_described_model) as {{ dbt.type_int() }}) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_described_\" ~ model_type ~ \"_model) * 100\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_documentation_coverage_pct{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.type_int", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_documentation_coverage.sql", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_test_coverage": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_test_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_test_coverage.sql", "original_file_path": "models/marts/tests/fct_test_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_test_coverage"], "alias": "fct_test_coverage", "checksum": {"name": "sha256", "checksum": "544e9cd5833992cdf8f17e2f2e9b951ea1304bef25e5bddfbb74a5c96ba063c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "this model shows a few key metrics related to how well tested your dbt project is.", "columns": {"test_to_model_ratio": {"name": "test_to_model_ratio", "description": "the total number of tests in the project divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "test_coverage_pct": {"name": "test_coverage_pct", "description": "the number of models in the project with at least one test configured divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6269855, "relation_name": "DBT_DB.DBT_VAULT.fct_test_coverage", "raw_code": "with\n\ntest_counts as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as {{ dbt.type_boolean() }}) as is_tested_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when number_of_tests_on_model > 0 and model_type = '{{ model_type }}' then 1.0 else 0 end as is_tested_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from test_counts\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        cast(count(*) as {{ dbt.type_int() }}) as total_models,\n        cast(sum(number_of_tests_on_model) as {{ dbt.type_int() }}) as total_tests,\n        sum(cast(is_tested_model as {{ dbt.type_int() }})) as tested_models,\n        round(sum(cast(is_tested_model as {{ dbt.type_int() }})) * 100.0 / count(*), 2) as test_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_tested_\" ~ model_type ~ \"_model) * 100.0\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_test_coverage_pct,\n        {% endfor %}\n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.current_timestamp", "macro.dbt.type_int", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_test_coverage.sql", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from DBT_DB.DBT_VAULT.int_model_test_summary\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_missing_primary_key_tests": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_missing_primary_key_tests", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_missing_primary_key_tests.sql", "original_file_path": "models/marts/tests/fct_missing_primary_key_tests.sql", "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_missing_primary_key_tests"], "alias": "fct_missing_primary_key_tests", "checksum": {"name": "sha256", "checksum": "cdee51203c863278be6de20d74ca22fab3afd2c888402a5f06b167fd47670459"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "this model has one record for every model without unique and not null tests configured on a single column", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6273782, "relation_name": "DBT_DB.DBT_VAULT.fct_missing_primary_key_tests", "raw_code": "with\n\ntests as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type in\n    (\n        {% for resource_type in var('enforced_primary_key_node_types') %}'{{ resource_type }}'{% if not loop.last %},{% endif %}\n        {% endfor %}\n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_missing_primary_key_tests.sql", "compiled": true, "compiled_code": "with\n\ntests as (\n    select * from DBT_DB.DBT_VAULT.int_model_test_summary\n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_sources_without_freshness": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_sources_without_freshness", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_sources_without_freshness.sql", "original_file_path": "models/marts/tests/fct_sources_without_freshness.sql", "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_sources_without_freshness"], "alias": "fct_sources_without_freshness", "checksum": {"name": "sha256", "checksum": "124b06dbe86fbaa01ffa291a31950af254badef381a6df23832653fd5ca396d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each source that does not have a source freshness defined, either as a warn or an error", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6277432, "relation_name": "DBT_DB.DBT_VAULT.fct_sources_without_freshness", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_sources_without_freshness.sql", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.int_model_test_summary": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "int_model_test_summary", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/intermediate/int_model_test_summary.sql", "original_file_path": "models/marts/tests/intermediate/int_model_test_summary.sql", "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "fqn": ["dbt_project_evaluator", "marts", "tests", "intermediate", "int_model_test_summary"], "alias": "int_model_test_summary", "checksum": {"name": "sha256", "checksum": "8991efb264e8aa37512a3d1509ab8b54bfe6dadf6191a954b6e9ac75af574103"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.0659902, "relation_name": "DBT_DB.DBT_VAULT.int_model_test_summary", "raw_code": "with \n\nall_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nrelationships as (\n    select * from {{ ref('int_direct_relationships') }}\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,\n        {%- for test_set in var('primary_key_test_macros') %}\n            {%- set outer_loop = loop -%}\n        count(distinct case when \n                {%- for test in test_set %} \n                all_graph_resources.is_{{ test.split('.')[1] }} {%- if not loop.last %} or {% endif %} \n                {%- endfor %}\n            then relationships.resource_id else null end\n        ) as primary_key_method_{{ outer_loop.index }}_count,\n        {%- endfor %}\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from {{ ref('base_node_columns') }}\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    {%- for test_set in var('primary_key_test_macros') %}\n                        {%- set compare_value = test_set | length %}\n                    primary_key_method_{{ loop.index }}_count >= {{ compare_value}}\n                        or\n                    {%- endfor %}\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as {{ dbt.type_boolean() }}) as is_primary_key_tested,\n        cast(sum(tests_count) as {{ dbt.type_int()}}) as number_of_tests_on_model,\n        cast(sum(constraints_count) as {{ dbt.type_int()}}) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as {{ dbt.type_boolean()}}) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as {{ dbt.type_int()}}) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as {{ dbt.type_int()}}) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}, {"name": "base_node_columns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_boolean", "macro.dbt.type_int"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.base_node_columns"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/intermediate/int_model_test_summary.sql", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nrelationships as (\n    select * from DBT_DB.DBT_VAULT.int_direct_relationships\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from DBT_DB.DBT_VAULT.base_node_columns\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_marts_or_intermediate_dependent_on_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "original_file_path": "models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_marts_or_intermediate_dependent_on_source"], "alias": "fct_marts_or_intermediate_dependent_on_source", "checksum": {"name": "sha256", "checksum": "22b5ae735f394581929a7a1e5c7eaa3adfb844b135cd9da9f1cd645b8365a48b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the marts and/or intermediate layer are dependent on source(s).", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.6375577, "relation_name": "DBT_DB.DBT_VAULT.fct_marts_or_intermediate_dependent_on_source", "raw_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_unused_sources": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_unused_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_unused_sources.sql", "original_file_path": "models/marts/dag/fct_unused_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_unused_sources"], "alias": "fct_unused_sources", "checksum": {"name": "sha256", "checksum": "88929ec8435e38da76fe33265736b8599deca039cb881c0e3e1c1bc9416047df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each source with 0 children.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.641052, "relation_name": "DBT_DB.DBT_VAULT.fct_unused_sources", "raw_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_unused_sources.sql", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_direct_join_to_source": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_direct_join_to_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_direct_join_to_source.sql", "original_file_path": "models/marts/dag/fct_direct_join_to_source.sql", "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_direct_join_to_source"], "alias": "fct_direct_join_to_source", "checksum": {"name": "sha256", "checksum": "41902b1a35281f5f48189c1e3a1f0beb3ecb5512f426bb46e1b7a201b7b59264"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where a model has a reference to both a model and a source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.6367998, "relation_name": "DBT_DB.DBT_VAULT.fct_direct_join_to_source", "raw_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_direct_join_to_source.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_multiple_sources_joined": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_multiple_sources_joined", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_multiple_sources_joined.sql", "original_file_path": "models/marts/dag/fct_multiple_sources_joined.sql", "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_multiple_sources_joined"], "alias": "fct_multiple_sources_joined", "checksum": {"name": "sha256", "checksum": "83eb58c45643770dc386ca0180ec384ff959fced06a692d39edb11670d6a59d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each instance where a model references more than one source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.6382701, "relation_name": "DBT_DB.DBT_VAULT.fct_multiple_sources_joined", "raw_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        {{ dbt.listagg(\n            measure='parent', \n            delimiter_text=\"', '\", \n            order_by_clause='order by parent' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_multiple_sources_joined.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    listagg(\n        parent,\n        ', '\n        )\n        within group (order by parent) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_staging": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_staging_dependent_on_staging", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_staging.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_staging.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_staging"], "alias": "fct_staging_dependent_on_staging", "checksum": {"name": "sha256", "checksum": "3ec2cb7f884acdde9d1753cc3924ea1ee40540b92cb88524b5fe99f40e7707d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on each other.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.640669, "relation_name": "DBT_DB.DBT_VAULT.fct_staging_dependent_on_staging", "raw_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_staging.sql", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_duplicate_sources": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_duplicate_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_duplicate_sources.sql", "original_file_path": "models/marts/dag/fct_duplicate_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_duplicate_sources"], "alias": "fct_duplicate_sources", "checksum": {"name": "sha256", "checksum": "a87c995d9f451e35e0c6ec28be4fd2cb481e0dd8eb78d7aebd20953d474a5c70"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each source database location with more than one node in your dbt project.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.637191, "relation_name": "DBT_DB.DBT_VAULT.fct_duplicate_sources", "raw_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then {{ dbt.concat([\"schema\", \"'.'\", \"identifier\"]) }} \n            else {{ dbt.concat([\"database\", \"'.'\", \"schema\", \"'.'\", \"identifier\"]) }} \n        end as source_db_location \n    from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        {{ dbt.listagg(\n            measure = 'resource_name', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by resource_name' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.concat", "macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_duplicate_sources.sql", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n    listagg(\n        resource_name,\n        ', '\n        )\n        within group (order by resource_name) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_too_many_joins": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_too_many_joins", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_too_many_joins.sql", "original_file_path": "models/marts/dag/fct_too_many_joins.sql", "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_too_many_joins"], "alias": "fct_too_many_joins", "checksum": {"name": "sha256", "checksum": "268794bb478818da56cc20dbc2ac8376471088640e89fbeee8869ce7aaaa7c85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This returns models referencing more than 7 or more dependencies. Per dbt best practices, models should be designed in a way that depend on fewer than 7 joins.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.642166, "relation_name": "DBT_DB.DBT_VAULT.fct_too_many_joins", "raw_code": "with all_dag_relationships as (\n    select\n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as {{ dbt.type_int() }}) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= {{ var('too_many_joins_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_int", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_too_many_joins.sql", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_staging_dependent_on_marts_or_intermediate", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_marts_or_intermediate"], "alias": "fct_staging_dependent_on_marts_or_intermediate", "checksum": {"name": "sha256", "checksum": "c8d013ff07426f83d621211293096386fdc508365316947e94bdea3708c786e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on models in the marts and/or intermediate layer.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.6402857, "relation_name": "DBT_DB.DBT_VAULT.fct_staging_dependent_on_marts_or_intermediate", "raw_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_source_fanout": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_source_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_source_fanout.sql", "original_file_path": "models/marts/dag/fct_source_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_source_fanout"], "alias": "fct_source_fanout", "checksum": {"name": "sha256", "checksum": "14d519f1f662fce3c381f4605765d18e1543ba1dfd157e304b74c0cb59a918b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each instance where a source is the direct parent of multiple resources in the DAG.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.6399097, "relation_name": "DBT_DB.DBT_VAULT.fct_source_fanout", "raw_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        {{ dbt.listagg(\n            measure='child', \n            delimiter_text=\"', '\", \n            order_by_clause='order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_source_fanout.sql", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_root_models": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_root_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_root_models.sql", "original_file_path": "models/marts/dag/fct_root_models.sql", "unique_id": "model.dbt_project_evaluator.fct_root_models", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_root_models"], "alias": "fct_root_models", "checksum": {"name": "sha256", "checksum": "dcb918a48c00b83c29289a874867c20f5b1d6dbf162cb2d1cc35922a34e8d89b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each model with 0 direct parents.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.638958, "relation_name": "DBT_DB.DBT_VAULT.fct_root_models", "raw_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_root_models.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_rejoining_of_upstream_concepts", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_rejoining_of_upstream_concepts.sql", "original_file_path": "models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_rejoining_of_upstream_concepts"], "alias": "fct_rejoining_of_upstream_concepts", "checksum": {"name": "sha256", "checksum": "d6ad27a1391ac57dba3dac57a29aa65b71d9210ee8b97ba45f9148bb234c9216"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "\"All cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the  parent's direct children (parent_and_child). Only includes cases where the model \"in between\" the parent and child  has NO other downstream dependencies.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.638621, "relation_name": "DBT_DB.DBT_VAULT.fct_rejoining_of_upstream_concepts", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_model_fanout": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_model_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_model_fanout.sql", "original_file_path": "models/marts/dag/fct_model_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_model_fanout"], "alias": "fct_model_fanout", "checksum": {"name": "sha256", "checksum": "617945b46280b6270d8f5f0cd39cd82ca2024b09a850e197f348b6b576df177f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows all parents with more direct leaf children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.6379156, "relation_name": "DBT_DB.DBT_VAULT.fct_model_fanout", "raw_code": "with all_dag_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        {{ dbt.listagg(\n            measure = 'child', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= {{ var('models_fanout_threshold') }}\n)\n\nselect * from model_fanout_agg\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_model_fanout.sql", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_hard_coded_references": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_hard_coded_references", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_hard_coded_references.sql", "original_file_path": "models/marts/dag/fct_hard_coded_references.sql", "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_hard_coded_references"], "alias": "fct_hard_coded_references", "checksum": {"name": "sha256", "checksum": "75f6517e5ebea4adde2bfd5973fb6dd14df7b5843bc1d6453ed51b160d729e8a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each model that has hard coded references.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1734520878.6417775, "relation_name": "DBT_DB.DBT_VAULT.fct_hard_coded_references", "raw_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_hard_coded_references.sql", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_chained_views_dependencies": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_chained_views_dependencies", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_chained_views_dependencies.sql", "original_file_path": "models/marts/performance/fct_chained_views_dependencies.sql", "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_chained_views_dependencies"], "alias": "fct_chained_views_dependencies", "checksum": {"name": "sha256", "checksum": "aef70a6fecdec6f947f788d52b889e9a7e5e2067e87769c94c30c56d956f2af9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This returns models dependent on chains of \"non-physically-materialized\" models (views and ephemerals), highlighting potential cases for improving performance by switching the materialization of model(s) within  the chain to table or incremental. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/performance/performance.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.686229, "relation_name": "DBT_DB.DBT_VAULT.fct_chained_views_dependencies", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > {{ var('chained_views_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}\n\norder by distance desc", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_chained_views_dependencies.sql", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_project_evaluator.fct_exposure_parents_materializations": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "fct_exposure_parents_materializations", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_exposure_parents_materializations.sql", "original_file_path": "models/marts/performance/fct_exposure_parents_materializations.sql", "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_exposure_parents_materializations"], "alias": "fct_exposure_parents_materializations", "checksum": {"name": "sha256", "checksum": "5e3c973f43ea703994fa8cfc427ec015dd5f23441d4592ef023e2174c241c658"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table shows each direct parent of an exposure that is not materialized as a table or incremental.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1734520878.6414342, "relation_name": "DBT_DB.DBT_VAULT.fct_exposure_parents_materializations", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_exposure_parents_materializations.sql", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": {"database": "DBT_DB", "schema": "DBT_VAULT", "name": "dbt_project_evaluator_exceptions", "resource_type": "seed", "package_name": "dbt_project_evaluator", "path": "dbt_project_evaluator_exceptions.csv", "original_file_path": "seeds/dbt_project_evaluator_exceptions.csv", "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "fqn": ["dbt_project_evaluator", "dbt_project_evaluator_exceptions"], "alias": "dbt_project_evaluator_exceptions", "checksum": {"name": "sha256", "checksum": "55374346a29c2ef9f7ac7b8d3f249e818f60dbd9586ab2645c294d3438f094d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"fct_name": "varchar", "column_name": "varchar", "id_to_exclude": "varchar", "comment": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "List of exceptions not to be reported.", "columns": {"fct_name": {"name": "fct_name", "description": "Name of the fact table to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "column_name": {"name": "column_name", "description": "Column name from fct_name to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "id_to_exclude": {"name": "id_to_exclude", "description": "Values (or like pattern) to exclude for column_name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "comment": {"name": "comment", "description": "Field to document why a given exception is legitimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://seeds/seeds.yml", "build_path": null, "unrendered_config": {"column_types": {"fct_name": "varchar", "column_name": "varchar", "id_to_exclude": "varchar", "comment": "varchar"}}, "created_at": 1734520878.5636463, "relation_name": "DBT_DB.DBT_VAULT.dbt_project_evaluator_exceptions", "raw_code": "", "root_path": "/home/issam/snowflake-demo/dbt_vault_v2/dbt_packages/dbt_project_evaluator", "depends_on": {"macros": []}}, "test.dbt_vault_v2.unique_dim_product_sku_id.cf0a3fd846": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "unique_dim_product_sku_id", "resource_type": "test", "package_name": "dbt_vault_v2", "path": "unique_dim_product_sku_id.sql", "original_file_path": "models/marts/dim_product.yml", "unique_id": "test.dbt_vault_v2.unique_dim_product_sku_id.cf0a3fd846", "fqn": ["dbt_vault_v2", "marts", "unique_dim_product_sku_id"], "alias": "unique_dim_product_sku_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1734520878.5200381, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_vault_v2.dim_product"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/dim_product.yml/unique_dim_product_sku_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sku_id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DB.data_mart.dim_product\nwhere sku_id is not null\ngroup by sku_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sku_id", "file_key_name": "models.dim_product", "attached_node": "model.dbt_vault_v2.dim_product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sku_id", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.dbt_vault_v2.not_null_dim_product_sku_id.f725edd0d7": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "not_null_dim_product_sku_id", "resource_type": "test", "package_name": "dbt_vault_v2", "path": "not_null_dim_product_sku_id.sql", "original_file_path": "models/marts/dim_product.yml", "unique_id": "test.dbt_vault_v2.not_null_dim_product_sku_id.f725edd0d7", "fqn": ["dbt_vault_v2", "marts", "not_null_dim_product_sku_id"], "alias": "not_null_dim_product_sku_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1734520878.5213072, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_vault_v2.dim_product"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/dim_product.yml/not_null_dim_product_sku_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku_id\nfrom DBT_DB.data_mart.dim_product\nwhere sku_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sku_id", "file_key_name": "models.dim_product", "attached_node": "model.dbt_vault_v2.dim_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sku_id", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.dbt_vault_v2.unique_fct_sales_transaction_sales.e7e985ef28": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "unique_fct_sales_transaction_sales", "resource_type": "test", "package_name": "dbt_vault_v2", "path": "unique_fct_sales_transaction_sales.sql", "original_file_path": "models/marts/fct_sales.yml", "unique_id": "test.dbt_vault_v2.unique_fct_sales_transaction_sales.e7e985ef28", "fqn": ["dbt_vault_v2", "marts", "unique_fct_sales_transaction_sales"], "alias": "unique_fct_sales_transaction_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1734520878.5233953, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_vault_v2.fct_sales"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/fct_sales.yml/unique_fct_sales_transaction_sales.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_sales as unique_field,\n    count(*) as n_records\n\nfrom DBT_DB.data_mart.fct_sales\nwhere transaction_sales is not null\ngroup by transaction_sales\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_sales", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_vault_v2.fct_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_sales", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}}, "test.dbt_vault_v2.not_null_fct_sales_transaction_sales.9f2f9fb0c2": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "not_null_fct_sales_transaction_sales", "resource_type": "test", "package_name": "dbt_vault_v2", "path": "not_null_fct_sales_transaction_sales.sql", "original_file_path": "models/marts/fct_sales.yml", "unique_id": "test.dbt_vault_v2.not_null_fct_sales_transaction_sales.9f2f9fb0c2", "fqn": ["dbt_vault_v2", "marts", "not_null_fct_sales_transaction_sales"], "alias": "not_null_fct_sales_transaction_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1734520878.5249114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_vault_v2.fct_sales"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/fct_sales.yml/not_null_fct_sales_transaction_sales.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_sales\nfrom DBT_DB.data_mart.fct_sales\nwhere transaction_sales is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_sales", "file_key_name": "models.fct_sales", "attached_node": "model.dbt_vault_v2.fct_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_sales", "model": "{{ get_where_subquery(ref('fct_sales')) }}"}, "namespace": null}}, "test.dbt_vault_v2.unique_dim_location_location_id.9acbee647a": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "unique_dim_location_location_id", "resource_type": "test", "package_name": "dbt_vault_v2", "path": "unique_dim_location_location_id.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.dbt_vault_v2.unique_dim_location_location_id.9acbee647a", "fqn": ["dbt_vault_v2", "marts", "unique_dim_location_location_id"], "alias": "unique_dim_location_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1734520878.5268643, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_vault_v2.dim_location"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/dim_location.yml/unique_dim_location_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DB.data_mart.dim_location\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.dim_location", "attached_node": "model.dbt_vault_v2.dim_location", "test_metadata": {"name": "unique", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}}, "test.dbt_vault_v2.not_null_dim_location_location_id.8635435d86": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "not_null_dim_location_location_id", "resource_type": "test", "package_name": "dbt_vault_v2", "path": "not_null_dim_location_location_id.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.dbt_vault_v2.not_null_dim_location_location_id.8635435d86", "fqn": ["dbt_vault_v2", "marts", "not_null_dim_location_location_id"], "alias": "not_null_dim_location_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1734520878.527933, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_vault_v2.dim_location"]}, "compiled_path": "target/compiled/dbt_vault_v2/models/marts/dim_location.yml/not_null_dim_location_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom DBT_DB.data_mart.dim_location\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.dim_location", "attached_node": "model.dbt_vault_v2.dim_location", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_public_models_without_contract_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_public_models_without_contract_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_public_models_without_contract_"], "alias": "is_empty_fct_public_models_without_contract_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.577852, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_public_models_without_contract", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_public_models_without_contract"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_public_models_without_contract_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_public_models_without_contract\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_public_models_without_contract", "attached_node": "model.dbt_project_evaluator.fct_public_models_without_contract", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_public_models_without_contract')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_undocumented_public_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_public_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_undocumented_public_models_"], "alias": "is_empty_fct_undocumented_public_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.5905309, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_public_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_public_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_undocumented_public_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_public_models\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_public_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_public_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_public_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_exposures_dependent_on_private_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposures_dependent_on_private_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_exposures_dependent_on_private_models_"], "alias": "is_empty_fct_exposures_dependent_on_private_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.5934932, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposures_dependent_on_private_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/governance/governance.yml/is_empty_fct_exposures_dependent_on_private_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_exposures_dependent_on_private_models\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposures_dependent_on_private_models", "attached_node": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposures_dependent_on_private_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_model_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_directories_"], "alias": "is_empty_fct_model_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.5978389, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_model_directories\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_directories", "attached_node": "model.dbt_project_evaluator.fct_model_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_model_naming_conventions_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_naming_conventions_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_naming_conventions_"], "alias": "is_empty_fct_model_naming_conventions_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6011448, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_naming_conventions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_naming_conventions"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_naming_conventions_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_model_naming_conventions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_naming_conventions", "attached_node": "model.dbt_project_evaluator.fct_model_naming_conventions", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_naming_conventions')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_source_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_source_directories_"], "alias": "is_empty_fct_source_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.604013, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_source_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_source_directories\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_directories", "attached_node": "model.dbt_project_evaluator.fct_source_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_test_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_test_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_test_directories_"], "alias": "is_empty_fct_test_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6066458, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_test_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_directories"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_test_directories_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_test_directories\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_test_directories", "attached_node": "model.dbt_project_evaluator.fct_test_directories", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_test_directories')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "valid_documentation_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_documentation_coverage.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "fqn": ["dbt_project_evaluator", "marts", "documentation", "valid_documentation_coverage"], "alias": "valid_documentation_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1734520878.6115527, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_documentation_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_documentation_coverage"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/valid_documentation_coverage.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from DBT_DB.DBT_VAULT.fct_documentation_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "documentation_coverage_pct", "file_key_name": "models.fct_documentation_coverage", "attached_node": "model.dbt_project_evaluator.fct_documentation_coverage", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('documentation_coverage_target') }}", "column_name": "documentation_coverage_pct", "model": "{{ get_where_subquery(ref('fct_documentation_coverage')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_undocumented_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_models_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_models_"], "alias": "is_empty_fct_undocumented_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6177456, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_models\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_undocumented_source_tables_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_source_tables_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_source_tables_"], "alias": "is_empty_fct_undocumented_source_tables_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6202831, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_source_tables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_source_tables"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_source_tables_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_source_tables\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_source_tables", "attached_node": "model.dbt_project_evaluator.fct_undocumented_source_tables", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_source_tables')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_undocumented_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_sources_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_sources_"], "alias": "is_empty_fct_undocumented_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6231372, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_sources\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_sources", "attached_node": "model.dbt_project_evaluator.fct_undocumented_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "valid_test_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_test_coverage.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "fqn": ["dbt_project_evaluator", "marts", "tests", "valid_test_coverage"], "alias": "valid_test_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1734520878.628455, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_coverage"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/valid_test_coverage.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from DBT_DB.DBT_VAULT.fct_test_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_coverage_pct", "file_key_name": "models.fct_test_coverage", "attached_node": "model.dbt_project_evaluator.fct_test_coverage", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('test_coverage_target') }}", "column_name": "test_coverage_pct", "model": "{{ get_where_subquery(ref('fct_test_coverage')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_missing_primary_key_tests_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_missing_primary_key_tests_.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_missing_primary_key_tests_"], "alias": "is_empty_fct_missing_primary_key_tests_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6317747, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_missing_primary_key_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/is_empty_fct_missing_primary_key_tests_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_missing_primary_key_tests\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_missing_primary_key_tests", "attached_node": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_missing_primary_key_tests')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_sources_without_freshness_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_sources_without_freshness_.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_sources_without_freshness_"], "alias": "is_empty_fct_sources_without_freshness_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.634314, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_sources_without_freshness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_sources_without_freshness"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/is_empty_fct_sources_without_freshness_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_sources_without_freshness\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_sources_without_freshness", "attached_node": "model.dbt_project_evaluator.fct_sources_without_freshness", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_sources_without_freshness')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_direct_join_to_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_direct_join_to_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_direct_join_to_source_"], "alias": "is_empty_fct_direct_join_to_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6430216, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_direct_join_to_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_direct_join_to_source"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_direct_join_to_source_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_direct_join_to_source\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_direct_join_to_source", "attached_node": "model.dbt_project_evaluator.fct_direct_join_to_source", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_direct_join_to_source')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_duplicate_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_duplicate_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_duplicate_sources_"], "alias": "is_empty_fct_duplicate_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6459866, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_duplicate_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_duplicate_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_duplicate_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_duplicate_sources\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_duplicate_sources", "attached_node": "model.dbt_project_evaluator.fct_duplicate_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_duplicate_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_marts_or_intermediate_dependent_on_source_"], "alias": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6484997, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_marts_or_intermediate_dependent_on_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_marts_or_intermediate_dependent_on_source\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_marts_or_intermediate_dependent_on_source", "attached_node": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_marts_or_intermediate_dependent_on_source')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_model_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_model_fanout_"], "alias": "is_empty_fct_model_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6510851, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_fanout"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_model_fanout_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_model_fanout\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_fanout", "attached_node": "model.dbt_project_evaluator.fct_model_fanout", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_fanout')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_multiple_sources_joined_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_multiple_sources_joined_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_multiple_sources_joined_"], "alias": "is_empty_fct_multiple_sources_joined_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6536715, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_multiple_sources_joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_multiple_sources_joined"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_multiple_sources_joined_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_multiple_sources_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_multiple_sources_joined", "attached_node": "model.dbt_project_evaluator.fct_multiple_sources_joined", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_multiple_sources_joined')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_rejoining_of_upstream_concepts_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_rejoining_of_upstream_concepts_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_rejoining_of_upstream_concepts_"], "alias": "is_empty_fct_rejoining_of_upstream_concepts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6561136, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_rejoining_of_upstream_concepts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_rejoining_of_upstream_concepts_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_rejoining_of_upstream_concepts\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_rejoining_of_upstream_concepts", "attached_node": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_rejoining_of_upstream_concepts')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_root_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_root_models_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_root_models_"], "alias": "is_empty_fct_root_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.659728, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_root_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_root_models"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_root_models_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_root_models\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_root_models", "attached_node": "model.dbt_project_evaluator.fct_root_models", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_root_models')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_source_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_source_fanout_"], "alias": "is_empty_fct_source_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6638935, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_fanout"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_source_fanout_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_source_fanout\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_fanout", "attached_node": "model.dbt_project_evaluator.fct_source_fanout", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_fanout')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_marts_or_intermediate_"], "alias": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6665814, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_marts_or_intermediate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_staging_dependent_on_marts_or_intermediate\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_marts_or_intermediate", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_marts_or_intermediate')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_staging_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_staging_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_staging_"], "alias": "is_empty_fct_staging_dependent_on_staging_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6691198, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_staging", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_staging_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_staging_dependent_on_staging\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_staging", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_staging')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_unused_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_unused_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_unused_sources_"], "alias": "is_empty_fct_unused_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.671669, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_unused_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_unused_sources"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_unused_sources_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_unused_sources\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_unused_sources", "attached_node": "model.dbt_project_evaluator.fct_unused_sources", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_unused_sources')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_exposure_parents_materializations_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposure_parents_materializations_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_exposure_parents_materializations_"], "alias": "is_empty_fct_exposure_parents_materializations_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6756568, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposure_parents_materializations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_exposure_parents_materializations_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_exposure_parents_materializations\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposure_parents_materializations", "attached_node": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposure_parents_materializations')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_hard_coded_references_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_hard_coded_references_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_hard_coded_references_"], "alias": "is_empty_fct_hard_coded_references_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6802967, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_hard_coded_references", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_hard_coded_references"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_hard_coded_references_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_hard_coded_references\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_hard_coded_references", "attached_node": "model.dbt_project_evaluator.fct_hard_coded_references", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_hard_coded_references')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_too_many_joins_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_too_many_joins_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_too_many_joins_"], "alias": "is_empty_fct_too_many_joins_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6834497, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_too_many_joins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_too_many_joins"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_too_many_joins_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_too_many_joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_too_many_joins", "attached_node": "model.dbt_project_evaluator.fct_too_many_joins", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_too_many_joins')) }}"}, "namespace": null}}, "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": {"database": "DBT_DB", "schema": "dbt_test__audit", "name": "is_empty_fct_chained_views_dependencies_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_chained_views_dependencies_.sql", "original_file_path": "models/marts/performance/performance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "fqn": ["dbt_project_evaluator", "marts", "performance", "is_empty_fct_chained_views_dependencies_"], "alias": "is_empty_fct_chained_views_dependencies_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1734520878.6868804, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_chained_views_dependencies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_chained_views_dependencies"]}, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/performance.yml/is_empty_fct_chained_views_dependencies_.sql", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_chained_views_dependencies\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_chained_views_dependencies", "attached_node": "model.dbt_project_evaluator.fct_chained_views_dependencies", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_chained_views_dependencies')) }}"}, "namespace": null}}}, "sources": {"source.dbt_vault_v2.samples_data.STG_LOCATION_RAW": {"database": "DBT_DB", "schema": "STAGING", "name": "STG_LOCATION_RAW", "resource_type": "source", "package_name": "dbt_vault_v2", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.dbt_vault_v2.samples_data.STG_LOCATION_RAW", "fqn": ["dbt_vault_v2", "samples_data", "STG_LOCATION_RAW"], "source_name": "samples_data", "source_description": "", "loader": "", "identifier": "STG_LOCATION_RAW", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "DBT_DB.STAGING.STG_LOCATION_RAW", "created_at": 1734520878.6933658, "unrendered_database": "{{ target.database }}", "unrendered_schema": "STAGING"}, "source.dbt_vault_v2.samples_data.STG_PRODUCT_RAW": {"database": "DBT_DB", "schema": "STAGING", "name": "STG_PRODUCT_RAW", "resource_type": "source", "package_name": "dbt_vault_v2", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.dbt_vault_v2.samples_data.STG_PRODUCT_RAW", "fqn": ["dbt_vault_v2", "samples_data", "STG_PRODUCT_RAW"], "source_name": "samples_data", "source_description": "", "loader": "", "identifier": "STG_PRODUCT_RAW", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "DBT_DB.STAGING.STG_PRODUCT_RAW", "created_at": 1734520878.694489, "unrendered_database": "{{ target.database }}", "unrendered_schema": "STAGING"}, "source.dbt_vault_v2.samples_data.STG_SALES_RAW": {"database": "DBT_DB", "schema": "STAGING", "name": "STG_SALES_RAW", "resource_type": "source", "package_name": "dbt_vault_v2", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.dbt_vault_v2.samples_data.STG_SALES_RAW", "fqn": ["dbt_vault_v2", "samples_data", "STG_SALES_RAW"], "source_name": "samples_data", "source_description": "", "loader": "", "identifier": "STG_SALES_RAW", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "DBT_DB.STAGING.STG_SALES_RAW", "created_at": 1734520878.6946192, "unrendered_database": "{{ target.database }}", "unrendered_schema": "STAGING"}}, "macros": {"macro.dbt_vault_v2.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt_vault_v2", "path": "macros/macro_generate_schema_name.sql", "original_file_path": "macros/macro_generate_schema_name.sql", "unique_id": "macro.dbt_vault_v2.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6343703, "supported_languages": null}, "macro.dbt_vault_v2.get_filtered_columns": {"name": "get_filtered_columns", "resource_type": "macro", "package_name": "dbt_vault_v2", "path": "macros/macro_generate_columns.sql", "original_file_path": "macros/macro_generate_columns.sql", "unique_id": "macro.dbt_vault_v2.get_filtered_columns", "macro_sql": "{% macro get_filtered_columns(from, except=[]) %}\n {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.dbt_vault_v2.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6350098, "supported_languages": null}, "macro.dbt_vault_v2.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_vault_v2", "path": "macros/macro_generate_columns.sql", "original_file_path": "macros/macro_generate_columns.sql", "unique_id": "macro.dbt_vault_v2.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6360009, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6391795, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6395247, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.640478, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6408536, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6415017, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {% if schema_relation is string %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% else %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% endif -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n            dbt is currently configured to list a maximum of {{ max_total_results }} objects per schema.\n            {{ schema_relation }} exceeds this limit. If this is expected, you may configure this limit\n            by setting list_relations_per_page and list_relations_page_limit in your project flags.\n            It is recommended to start by increasing list_relations_page_limit to something more than the default of 10.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6431081, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n  {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n  {%- set sql -%}\n    {% if schema_relation is string %}\n      show objects in {{ schema_relation }} limit {{ max_results_per_iter }};\n    {% else %}\n      show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }};\n    {% endif -%}\n\n    {# -- Gated for performance reason. If you don't want Iceberg, you shouldn't pay the\n       -- latency penalty. #}\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n      select all_objects.*, is_iceberg\n      from table(result_scan(last_query_id(-1))) all_objects\n      left join INFORMATION_SCHEMA.tables as all_tables\n        on all_tables.table_name = all_objects.\"name\"\n        and all_tables.table_schema = all_objects.\"schema_name\"\n        and all_tables.table_catalog = all_objects.\"database_name\"\n    {% endif -%}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6447883, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6451917, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6455667, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.646012, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6468692, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6470964, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6473002, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.647909, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6481383, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6488364, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6505816, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6509333, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6513233, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6517398, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6519117, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.652969, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6534164, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.653625, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6537652, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6538644, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6540642, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6543674, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6550412, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.655756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6560583, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6564076, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6569343, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6573558, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6576893, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6581178, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6584446, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.658687, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.659361, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.660974, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6611614, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6624906, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6635919, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6637762, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic table with a new dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6649613, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql": {"name": "_get_replace_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a standard dynamic table with a new standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6654415, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql": {"name": "_get_replace_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create or replace dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.666372, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6668947, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6678743, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql": {"name": "_get_create_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6683817, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql": {"name": "_get_create_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6690595, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n--  Get all relevant metadata about a dynamic table\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A dictionary with one or two entries depending on whether iceberg is enabled:\n--      - dynamic_table: the metadata associated with a standard dynamic table\n--      - catalog: the metadata associated with the iceberg catalog\n-#}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\",\n            \"refresh_mode\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set results = {'dynamic_table': run_query(_dynamic_table_sql)} %}\n\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n        {% set _ = results.update({'catalog': run_query(_get_describe_iceberg_catalog_sql(relation))}) %}\n    {% endif %}\n\n    {% do return(results) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake._get_describe_iceberg_catalog_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6700206, "supported_languages": null}, "macro.dbt_snowflake._get_describe_iceberg_catalog_sql": {"name": "_get_describe_iceberg_catalog_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake._get_describe_iceberg_catalog_sql", "macro_sql": "{% macro _get_describe_iceberg_catalog_sql(relation) %}\n{#-\n--  Produce DQL that returns all relevant metadata about an iceberg catalog\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A valid DQL statement that will return metadata associated with an iceberg catalog\n-#}\n    show iceberg tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"catalog_name\",\n        \"external_volume_name\",\n        \"base_location\"\n    from table(result_scan(last_query_id()))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6702597, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6705234, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6706975, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6709383, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- if relation.is_iceberg_format and not adapter.behavior.enable_iceberg_materializations.no_warn %}\n    {% do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') %}\n  {%- endif %}\n\n  {%- set materialization_prefix = relation.get_ddl_prefix_for_create(config.model.config, temporary) -%}\n  {%- set alter_prefix = relation.get_ddl_prefix_for_alter() -%}\n\n  {# Generate DDL/DML #}\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ materialization_prefix }} table {{ relation }}\n        {%- if relation.is_iceberg_format %}\n          {#\n            Valid DDL in CTAS statements. Plain create statements have a different order.\n            https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table\n          #}\n          {{ relation.get_iceberg_ddl_options(config.model.config) }}\n        {%- endif -%}\n\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter {{ alter_prefix }} table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary %}\n        alter {{ alter_prefix }} table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {%- if relation.is_iceberg_format %}\n      {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n    {%- endif %}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=relation.get_ddl_prefix_for_create(config.model.config, temporary)) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6746552, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6749969, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.67518, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6754427, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6756828, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6758215, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.675954, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.automate_dv.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6761184, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6763642, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6769364, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6778262, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6782157, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. string), leave blank if unnecessary (e.g. integer or bool)\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{% if value is not none %}{{ name }} = {{ quote_char }}{{ value }}{{ quote_char }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6788192, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6794217, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6831536, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to alter incremental model `\" ~ target_relation.identifier  ~ \"` to '\" ~ target_relation.table_format ~ \" table format due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in new table format.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6886337, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6890457, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.689568, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.690183, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.692176, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6940866, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.69457, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6952417, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6956537, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.69891, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.6996317, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7010486, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7037437, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7046976, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7062812, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.706766, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7072446, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7075367, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7094362, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.710032, "supported_languages": ["sql"]}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7133033, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.71427, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7158742, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7164042, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7167811, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7179844, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7182522, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.719476, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7201393, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7209964, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7221644, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7223465, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7252183, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7263455, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7269318, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7280579, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7304032, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7318745, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7326376, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7336876, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.734176, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7347019, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7351518, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.735751, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.736326, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7365987, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7371094, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7379863, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.738621, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7389247, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7393541, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7397118, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7406125, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7424622, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7428308, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.74311, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7434905, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7437594, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7442224, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7450986, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.745551, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7458313, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7463622, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7469192, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.747561, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7479904, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.748478, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7486758, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7490296, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.749189, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7501464, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7503998, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7527168, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7530851, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7533972, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7538805, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.754149, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7544115, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7551234, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7559605, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7562172, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7565806, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7568555, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7572079, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7573962, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.757713, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7578766, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.758213, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7583992, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7588048, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7589834, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.759333, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7595506, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7607825, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7609622, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7617843, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7620234, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7622116, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7645, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7653184, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.765946, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.766699, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7669902, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7673838, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.767589, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7680058, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7682645, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.769138, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7693944, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7699869, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7713401, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.772167, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7724552, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7726946, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7732437, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.773748, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7742534, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7746315, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7752166, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7755754, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7759507, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7765143, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7768447, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7771266, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7773647, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7777488, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7784693, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7792418, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7800202, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.781407, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7816916, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7827387, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7833955, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7839067, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7846675, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.785105, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7855926, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7862353, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7882624, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7890236, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7894351, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7903721, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7912235, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7916715, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7928615, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.793268, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7936, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7937782, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7944925, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7947984, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7949228, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7954967, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.796164, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.796978, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7973368, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7976527, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.7980196, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.798642, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.799159, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.801566, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8018832, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8025672, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8032696, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8036165, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8039923, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8636763, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8641415, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8643658, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8647718, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.86508, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.865916, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.866281, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8675845, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8688524, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8690033, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8692029, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8693392, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8697522, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8699787, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8701258, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8703885, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8706415, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8709037, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8711524, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8714304, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8723657, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8726206, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8729475, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8732405, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8748112, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8754864, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8756618, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.875849, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.876749, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8770955, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.87728, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8774755, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8776329, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8786178, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8789396, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.87921, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8795378, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.879769, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8799715, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.880197, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8806152, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8808756, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8812802, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.881528, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8817248, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8819468, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8821437, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8823586, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8825698, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8829458, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8832846, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.883704, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8840125, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8846705, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8854568, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8857613, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8862088, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8865676, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8868225, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.887249, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8874595, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.887778, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8881395, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8884957, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8886983, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8891237, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8893087, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8897705, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8901396, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.89033, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8906705, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8908758, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8914611, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8919916, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8922336, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8928888, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8932502, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.893419, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.89378, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8939614, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8944054, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8947153, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8950257, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.895892, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.896103, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8963118, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8964992, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.896832, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.897043, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8972468, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.897466, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8976636, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8978553, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8980594, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8982427, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.898444, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8986251, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8989635, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.899109, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.899494, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.8997028, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9002872, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9006207, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.901201, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9013596, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9017794, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9021661, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9025538, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9027698, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.90307, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.903177, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9035485, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9037619, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.904076, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.904244, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.90465, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9048991, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9053457, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9056547, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9059837, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9062757, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9065924, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.906757, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9072917, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9078033, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9081728, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9085557, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9089372, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9100027, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9102566, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9104435, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9106228, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9107974, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9161747, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9193115, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9196246, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9199276, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9213023, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9215593, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9217858, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9235978, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9255583, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.926135, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n       and (DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or\n            DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null)\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9272075, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.929594, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9300194, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9302442, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9303784, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9305701, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.930727, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9309928, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9313056, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n               {# Check for either dbt_valid_to_current OR null, in order to correctly update records with nulls #}\n               ( {{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ columns.dbt_valid_to }} is null)\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.unique_key_fields", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.935981, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.93632, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9370697, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9376452, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9384496, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.939019, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9393852, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9398384, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ identifier }}.dbt_unique_key_{{ loop.index }} = {{ from_identifier }}.dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9403894, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9406626, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.940935, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9429514, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9433944, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9438975, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9445674, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9449697, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9452472, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9460804, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9490535, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9517522, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9523942, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9527297, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9544804, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9548075, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9557178, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9584208, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9611988, "supported_languages": ["sql"]}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.966547, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9678664, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.968639, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9694839, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9697948, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9711025, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9720066, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9723449, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.972591, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9729767, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9732213, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.973594, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9738407, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9741714, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9744062, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9745982, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9748368, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9750402, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.975999, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9776847, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.97924, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9808133, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9819417, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9827163, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9845576, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9867234, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.987086, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.988341, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.988662, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9894338, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.98981, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9900162, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9932508, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9935768, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.993723, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9966252, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9977646, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9988475, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9991593, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520875.9999814, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.000291, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0004957, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0007753, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0010076, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0012476, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.001402, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0021574, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0024438, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0040526, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0046282, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.00494, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0053105, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.005687, "supported_languages": null}, "macro.dbt_project_evaluator.check_model_is_table": {"name": "check_model_is_table", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/check_model_is_table.sql", "original_file_path": "macros/check_model_is_table.sql", "unique_id": "macro.dbt_project_evaluator.check_model_is_table", "macro_sql": "{%- macro check_model_is_table(model) -%}\n    {%- if model.config.materialized != 'table' -%}\n        {%- do exceptions.raise_compiler_error(\n            \"Model must use the table materialization. Please check any model overrides.\"\n        ) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0060406, "supported_languages": null}, "macro.dbt_project_evaluator.insert_resources_from_graph": {"name": "insert_resources_from_graph", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/insert_resources_from_graph.sql", "original_file_path": "macros/insert_resources_from_graph.sql", "unique_id": "macro.dbt_project_evaluator.insert_resources_from_graph", "macro_sql": "{% macro insert_resources_from_graph(relation, resource_type='nodes', relationships=False, columns=False, batch_size=var('insert_batch_size') | int) %}\n  {%- set values = get_resource_values(resource_type, relationships, columns) -%}\n  {%- set values_length = values | length -%}\n  {%- set loop_count = (values_length / batch_size) | round(0, 'ceil') | int -%}\n  \n    {%- for loop_number in range(loop_count) -%}\n        {%- set lower_bound = loop.index0 * batch_size -%}\n        {%- set upper_bound = loop.index * batch_size -%}\n        {%- set values_subset = values[lower_bound : upper_bound] %}\n        {%- set values_list_of_strings = [] -%}\n        {%- for indiv_values in values_subset %}\n            {%- do values_list_of_strings.append( indiv_values | join(\", \\n\")) -%}\n        {%- endfor -%}\n        {%- set values_string = '(' ~ values_list_of_strings | join(\"), \\n\\n(\") ~ ')' %}\n        {%- set insert_statement = \"insert into \" ~ relation ~ \" values \\n\" ~  values_string ~ \";\"%}\n        {% call statement('insert') -%}\n            {{ insert_statement }}\n        {%- endcall %}\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_resource_values", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.007725, "supported_languages": null}, "macro.dbt_project_evaluator.loop_vars": {"name": "loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.loop_vars", "macro_sql": "{% macro loop_vars(vars) %}\n    {{ return(adapter.dispatch('loop_vars', 'dbt_project_evaluator')(vars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__loop_vars"]}, "description": "A macro that loops through variables and returns them as a SQL query to be used in a model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/staging/variables/variables.yml", "arguments": [{"name": "vars", "type": "list|string", "description": "A list of variables from dbt_project.yml"}], "created_at": 1734520878.5752294, "supported_languages": null}, "macro.dbt_project_evaluator.default__loop_vars": {"name": "default__loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.default__loop_vars", "macro_sql": "{% macro default__loop_vars(vars) %}\n{%- set sql_query = [] -%}\n{%- for var_name in vars -%}\n    {%- if var(var_name,[]) is not string -%}\n        {%- for var_value in var(var_name,[]) -%}\n            {% set sql_command %}\n            select '{{ var_name }}' as var_name, '{{ var_value }}' as var_value\n            {% endset %}\n            {%- do sql_query.append(sql_command) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {% set sql_command %}\n        select '{{ var_name }}' as var_name, '{{ var(var_name,[]) }}' as var_value\n        {% endset %}\n        {%- do sql_query.append(sql_command) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- if sql_query -%}\n{{ sql_query | join('union all') }}\n{%- else -%}\nselect '' as var_name, '' as var_value\nlimit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0092492, "supported_languages": null}, "macro.dbt_project_evaluator.set_is_excluded": {"name": "set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.set_is_excluded", "macro_sql": "{% macro set_is_excluded(resource, resource_type) %}\n    {{ return(adapter.dispatch('set_is_excluded', 'dbt_project_evaluator')(resource, resource_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__set_is_excluded"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0099154, "supported_languages": null}, "macro.dbt_project_evaluator.default__set_is_excluded": {"name": "default__set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.default__set_is_excluded", "macro_sql": "{% macro default__set_is_excluded(resource, resource_type) %}\n\n    {% set re = modules.re %}\n    {%- set ns = namespace(exclude=false) -%}\n\n    {% if resource_type == 'node' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") -%}\n    {% elif resource_type == 'source' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") ~ \":\" ~ resource.fqn[-2] ~ \".\" ~ resource.fqn[-1] -%}\n    {% else %}\n        {{ exceptions.raise_compiler_error(\n            \"`set_is_excluded()` macro does not support resource type: \" ~ resource_type\n        ) }}\n    {% endif %}\n    \n\n    {#- we duplicate the exclusion list to account for windows directory patterns -#}\n    {%- set exclude_all_os_paths_from_project = [] -%}\n\n    {%- for exclude_paths_pattern in var('exclude_paths_from_project',[]) -%}\n        {%- set windows_path_pattern = exclude_paths_pattern | replace(\"/\", \"\\\\\\\\\\\\\\\\\") -%}\n        {%- do exclude_all_os_paths_from_project.extend([exclude_paths_pattern, windows_path_pattern]) -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if it is from the current project and matches the pattern -#}\n    {%- for exclude_paths_pattern in exclude_all_os_paths_from_project -%}\n        {%- set matched_path = re.search(exclude_paths_pattern, resource_path, re.IGNORECASE) -%}\n        {%- if matched_path and resource.package_name == project_name %}\n            {% set ns.exclude = true %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if the package if it is listed in `exclude_packages` or if it is \"all\" -#}\n    {%- if (\n        resource.package_name != project_name) \n        and (resource.package_name in  var('exclude_packages',[]) or 'all' in var('exclude_packages',[])) \n    -%}\n        {% set ns.exclude = true %}\n    {%- endif -%}\n\n    {{ return(ns.exclude) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0117943, "supported_languages": null}, "macro.dbt_project_evaluator.filter_exceptions": {"name": "filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.filter_exceptions", "macro_sql": "{% macro filter_exceptions() -%}\n    {{ return(adapter.dispatch('filter_exceptions', 'dbt_project_evaluator')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__filter_exceptions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.012304, "supported_languages": null}, "macro.dbt_project_evaluator.default__filter_exceptions": {"name": "default__filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.default__filter_exceptions", "macro_sql": "{% macro default__filter_exceptions() %}\n\n    {% set query_filters %}\n    select\n        column_name,\n        id_to_exclude\n    from {{ ref('dbt_project_evaluator_exceptions') }}\n    where fct_name = '{{ model.name }}'\n    {% endset %}\n\n    {% if execute %}\n    {% set is_default_seed = 'dbt_project_evaluator' in graph.nodes.values() | \n        selectattr('resource_type', 'equalto', 'seed') | \n        selectattr('name', 'equalto', 'dbt_project_evaluator_exceptions') | \n        map(attribute = 'package_name') | list %}\n\n    {% if not is_default_seed %}\n    \n        {% if flags.WHICH not in ['compile'] %}\n            where 1 = 1\n            {% for row_filter in run_query(query_filters) %}\n                and {{ row_filter[0] }} not like '{{ row_filter[1] }}'\n            {% endfor %}\n        {% endif %}\n    \n    {% endif %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0132732, "supported_languages": null}, "macro.dbt_project_evaluator.is_not_empty_string": {"name": "is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.is_not_empty_string", "macro_sql": "{% macro is_not_empty_string(str) %}\n    {{ return(adapter.dispatch('is_not_empty_string', 'dbt_project_evaluator')(str)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__is_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0136223, "supported_languages": null}, "macro.dbt_project_evaluator.default__is_not_empty_string": {"name": "default__is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.default__is_not_empty_string", "macro_sql": "{% macro default__is_not_empty_string(str) %}\n\n    {% if str %}\n    {{ true }}\n    {% else %}\n    {{ false }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.013858, "supported_languages": null}, "macro.dbt_project_evaluator.calculate_number_lines": {"name": "calculate_number_lines", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_number_lines.sql", "original_file_path": "macros/calculate_number_lines.sql", "unique_id": "macro.dbt_project_evaluator.calculate_number_lines", "macro_sql": "{% macro calculate_number_lines(node) %}\n    {{ return(adapter.dispatch('calculate_number_lines', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__calculate_number_lines"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0142527, "supported_languages": null}, "macro.dbt_project_evaluator.default__calculate_number_lines": {"name": "default__calculate_number_lines", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_number_lines.sql", "original_file_path": "macros/calculate_number_lines.sql", "unique_id": "macro.dbt_project_evaluator.default__calculate_number_lines", "macro_sql": "{% macro default__calculate_number_lines(node) %}\n\n    {% if node.resource_type == 'model' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {{ return(model_raw_sql.count(\"\\n\")) + 1 }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0148036, "supported_languages": null}, "macro.dbt_project_evaluator.find_all_hard_coded_references": {"name": "find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.find_all_hard_coded_references", "macro_sql": "{% macro find_all_hard_coded_references(node) %}\n    {{ return(adapter.dispatch('find_all_hard_coded_references', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__find_all_hard_coded_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0158403, "supported_languages": null}, "macro.dbt_project_evaluator.default__find_all_hard_coded_references": {"name": "default__find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.default__find_all_hard_coded_references", "macro_sql": "{% macro default__find_all_hard_coded_references(node) %}\n\n    {%- set all_hard_coded_references_list = [] -%}\n\n    {% if node.resource_type == 'model' and node.language == \"sql\" %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set re = modules.re -%}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {#-\n            REGEX Explanations\n            \n            # from_var_1\n            - matches (from or join) followed by some spaces and then {{var(<something>)}}\n            \n            # from_var_2\n            - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n            \n            # from_table_1\n            - matches (from or join) followed by some spaces and then <something>.<something_else>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_2\n            - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_3\n            - matches (from or join) followed by some spaces and then <something>\n              where <something> is enclosed by (` or [ or \" or ')\n\n            # notes\n            - all regex matches exclude text that immediately follows \"distinct \"\n\n        -#}\n\n        {%- set re = modules.re -%}\n\n        {%- set from_hard_coded_references = {\n            'from_var_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark\n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}\n                (\\)\\s*}})\n\n                ',\n            'from_var_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a comma\n                (,)\n\n                # sixth matching group\n                # 0 or more whitespace character(s), 1 or 0 quotation mark            \n                (\\s*[\\'\\\"]?)\n\n                # seventh matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # eighth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n                ([\\'\\\"]?\\s*)\n\n                # ninth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n                (\\)\\s*}})\n\n                ',\n            'from_table_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character            \n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # ninth matching group\n                # a period\n                (\\.)\n\n                # tenth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # eleventh matching group\n                # at least 1 word character\n                (\\w+-?\\w*)\n\n                # twelfth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) followed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_3':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\'])\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n                \n                # fourth matching group\n                # 1 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\'])(?=\\s|$)\n\n                '\n        } -%}\n\n        {%- for regex_name, regex_pattern in from_hard_coded_references.items() -%}\n\n            {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql_no_comments) -%}\n                \n                {%- for match in all_regex_matches -%}\n\n                    {%- set raw_reference = match[1:]|join()|trim -%}\n\n                    {%- do all_hard_coded_references_list.append(raw_reference) -%}\n\n                {%- endfor -%}\n        \n        {%- endfor -%}\n\n    {% endif %}\n    \n    {% set all_hard_coded_references = set(all_hard_coded_references_list)|sort|join(', ')|trim %}\n\n    {{ return(all_hard_coded_references) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.018343, "supported_languages": null}, "macro.dbt_project_evaluator.calculate_sql_complexity": {"name": "calculate_sql_complexity", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_sql_complexity.sql", "original_file_path": "macros/calculate_sql_complexity.sql", "unique_id": "macro.dbt_project_evaluator.calculate_sql_complexity", "macro_sql": "{% macro calculate_sql_complexity(node) %}\n    {{ return(adapter.dispatch('calculate_sql_complexity', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__calculate_sql_complexity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0189822, "supported_languages": null}, "macro.dbt_project_evaluator.default__calculate_sql_complexity": {"name": "default__calculate_sql_complexity", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/calculate_sql_complexity.sql", "original_file_path": "macros/calculate_sql_complexity.sql", "unique_id": "macro.dbt_project_evaluator.default__calculate_sql_complexity", "macro_sql": "{% macro default__calculate_sql_complexity(node) %}\n\n    {% if node.resource_type == 'model' and node.language == 'sql' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {%- set re = modules.re -%}\n        {%- set ns = namespace(complexity = 0) -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {%- for token, token_cost in var('token_costs').items() -%}\n\n            {# this is not 100% perfect but it checks more or less if the token exists as a word by itself or followed by \"(\"\" like for least()/greatest() #}\n            {%- set token_with_boundaries = \"\\\\b\" ~ token ~ \"[\\\\t\\\\r\\\\n (]\" -%}\n            {%- set all_regex_matches = re.findall(token_with_boundaries, model_raw_sql_no_comments, re.IGNORECASE) -%}\n            {%- set ns.complexity = ns.complexity + token_cost * (all_regex_matches | length) -%}\n\n        {%- endfor -%}\n\n        {{ return(ns.complexity) }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0203595, "supported_languages": null}, "macro.dbt_project_evaluator.is_os_mac_or_linux": {"name": "is_os_mac_or_linux", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.is_os_mac_or_linux", "macro_sql": "{% macro is_os_mac_or_linux() %}\n  {% for val in graph.nodes.values() %}\n    {{ return(\"\\\\\" not in val.get(\"original_file_path\",\"\")) }}\n  {% endfor %}\n  {{ return(true) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0211165, "supported_languages": null}, "macro.dbt_project_evaluator.get_directory_pattern": {"name": "get_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_directory_pattern", "macro_sql": "{% macro get_directory_pattern() %}\n  {% if execute %}\n    {%- set on_mac_or_linux = dbt_project_evaluator.is_os_mac_or_linux() -%}\n    {%- if on_mac_or_linux -%}\n      {{ return(\"/\") }}\n    {% else %}\n      {{ return(\"\\\\\\\\\") }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.is_os_mac_or_linux"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0215654, "supported_languages": null}, "macro.dbt_project_evaluator.get_regexp_directory_pattern": {"name": "get_regexp_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro_sql": "{% macro get_regexp_directory_pattern() %}\n  {% set regexp_escaped = get_directory_pattern() | replace(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") %}\n  {% do return(regexp_escaped) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0218709, "supported_languages": null}, "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern": {"name": "get_dbtreplace_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro_sql": "{% macro get_dbtreplace_directory_pattern() %}\n  {% if execute %}\n    {%- set on_mac_or_linux = dbt_project_evaluator.is_os_mac_or_linux() -%}\n    {%- if on_mac_or_linux -%}\n      {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*/','')\", \"''\") }}\n    {% else %}\n      {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*\\\\\\\\\\\\\\\\','')\", \"''\") }}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.is_os_mac_or_linux", "macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0223784, "supported_languages": null}, "macro.dbt_project_evaluator.wrap_string_with_quotes": {"name": "wrap_string_with_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/wrap_string_with_quotes.sql", "original_file_path": "macros/wrap_string_with_quotes.sql", "unique_id": "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro_sql": "{% macro wrap_string_with_quotes(str) %}\n  {% if str is none %}\n    {{ return('cast(NULL as ' ~ dbt_project_evaluator.type_string_dpe() ~ ')') }}\n  {% else %}\n    {{ dbt.string_literal(str) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0228512, "supported_languages": null}, "macro.dbt_project_evaluator.recursive_dag": {"name": "recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.recursive_dag", "macro_sql": "{% macro recursive_dag() %}\n    {{ return(adapter.dispatch('recursive_dag', 'dbt_project_evaluator')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0239995, "supported_languages": null}, "macro.dbt_project_evaluator.default__recursive_dag": {"name": "default__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.default__recursive_dag", "macro_sql": "{% macro default__recursive_dag() %}\n\nwith recursive direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as {{ dbt.type_boolean() }}) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null {# optional lever to change filtering of anchor clause to only include root resources #}\n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        {{ dbt.array_append('all_relationships.path', 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    {% if var('max_depth_dag') | int > 0 %}\n        {% if var('max_depth_dag') | int < 2 or var('max_depth_dag') | int < var('chained_views_threshold') | int %}\n            {% do exceptions.raise_compiler_error(\n                'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n                ) %}\n        {% else %}\n        where distance <= {{ var('max_depth_dag')}}\n        {% endif %}\n    {% endif %}\n\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.type_boolean", "macro.dbt.array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0250487, "supported_languages": null}, "macro.dbt_project_evaluator.bigquery__recursive_dag": {"name": "bigquery__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.bigquery__recursive_dag", "macro_sql": "{% macro bigquery__recursive_dag() %}\n\n-- as of Feb 2022 BigQuery doesn't support with recursive in the same way as other DWs\n{% set max_depth = var('max_depth_dag') | int %}\n{% if max_depth < 2 or max_depth < var('chained_views_threshold') | int %}\n    {% do exceptions.raise_compiler_error(\n        'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n        ) %}\n{% endif %}\n\nwith direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n)\n\n-- must do distinct prior to creating array because BigQuery doesn't support distinct on array type\n, get_distinct as (\n    select distinct\n        resource_id as parent_id,\n        resource_id as child_id,\n        resource_name,\n        materialized as child_materialized,\n        is_public as child_is_public,\n        access as child_access,\n        is_excluded as child_is_excluded\n\n    from direct_relationships\n)\n\n, cte_0 as (\n    select\n        parent_id,\n        child_id,\n        child_materialized,\n        child_is_public,\n        child_access,\n        child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as {{ dbt.type_boolean() }}) as is_dependent_on_chain_of_views\n    from get_distinct\n)\n\n{% for i in range(1,max_depth) %}\n{% set prev_cte_path %}cte_{{ i - 1 }}.path{% endset %}\n, cte_{{i}} as (\n    select\n        cte_{{i - 1}}.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_{{i - 1}}.distance+1 as distance,\n        {{ dbt.array_append(prev_cte_path, 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                cte_{{i - 1}}.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_{{i - 1}}.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_{{i - 1}}\n            on cte_{{i - 1}}.child_id = direct_relationships.direct_parent_id\n)\n{% endfor %}\n\n, all_relationships_unioned as (\n    {% for i in range(max_depth) %}\n    select * from cte_{{i}}\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\n, resource_info as (\n    select * from {{ ref('int_all_graph_resources') }}\n)\n\n\n, all_relationships as (\n    select\n        parent.resource_id as parent_id,\n        parent.resource_name as parent,\n        parent.resource_type as parent_resource_type,\n        parent.model_type as parent_model_type,\n        parent.materialized as parent_materialized,\n        parent.is_public as parent_is_public,\n        parent.access as parent_access,\n        parent.source_name as parent_source_name,\n        parent.file_path as parent_file_path,\n        parent.directory_path as parent_directory_path,\n        parent.file_name as parent_file_name,\n        parent.is_excluded as parent_is_excluded,\n        child.resource_id as child_id,\n        child.resource_name as child,\n        child.resource_type as child_resource_type,\n        child.model_type as child_model_type,\n        child.materialized as child_materialized,\n        child.is_public as child_is_public,\n        child.access as child_access,\n        child.source_name as child_source_name,\n        child.file_path as child_file_path,\n        child.directory_path as child_directory_path,\n        child.file_name as child_file_name,\n        child.is_excluded as child_is_excluded,\n        cast(all_relationships_unioned.distance as {{ dbt.type_int() }}) as distance,\n        all_relationships_unioned.path,\n        all_relationships_unioned.is_dependent_on_chain_of_views\n\n    from all_relationships_unioned\n    left join resource_info as parent\n        on all_relationships_unioned.parent_id = parent.resource_id\n    left join resource_info as child\n        on all_relationships_unioned.child_id = child.resource_id\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.type_boolean", "macro.dbt.array_append", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0267394, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__recursive_dag": {"name": "clickhouse__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__recursive_dag", "macro_sql": "{% macro clickhouse__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0269225, "supported_languages": null}, "macro.dbt_project_evaluator.spark__recursive_dag": {"name": "spark__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.spark__recursive_dag", "macro_sql": "{% macro spark__recursive_dag() %}\n-- as of June 2022 databricks SQL doesn't support \"with recursive\" in the same way as other DWs\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.027088, "supported_languages": null}, "macro.dbt_project_evaluator.trino__recursive_dag": {"name": "trino__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.trino__recursive_dag", "macro_sql": "{% macro trino__recursive_dag() %}\n{#-- Although Trino supports a recursive WITH-queries,\n-- it is less performant than creating CTEs with loops and union them --#}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0272715, "supported_languages": null}, "macro.dbt_project_evaluator.athena__recursive_dag": {"name": "athena__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.athena__recursive_dag", "macro_sql": "{% macro athena__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0274217, "supported_languages": null}, "macro.dbt_project_evaluator.get_source_values": {"name": "get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.get_source_values", "macro_sql": "{%- macro get_source_values() -%}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_source_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.027884, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_source_values": {"name": "default__get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_source_values", "macro_sql": "{%- macro default__get_source_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.sources.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set exclude_source = dbt_project_evaluator.set_is_excluded(node, resource_type=\"source\") -%}\n\n         {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              wrap_string_with_quotes(node.alias),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.source_name),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.source_description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              \"cast(\" ~ node.config.enabled ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              wrap_string_with_quotes(node.loaded_at_field | replace(\"'\", \"_\")),\n              \"cast(\" ~ ((node.freshness != None) and (dbt_project_evaluator.is_not_empty_string(node.freshness.warn_after.count) \n                or dbt_project_evaluator.is_not_empty_string(node.freshness.error_after.count))) | trim ~ \" as boolean)\",\n              wrap_string_with_quotes(node.database),\n              wrap_string_with_quotes(node.schema),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.loader),\n              wrap_string_with_quotes(node.identifier),\n              wrap_string_with_quotes(node.meta | tojson),\n              \"cast(\" ~ exclude_source ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            ]\n        %}\n            \n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n\n    {{ return(values) }}\n \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.029975, "supported_languages": null}, "macro.dbt_project_evaluator.get_exposure_values": {"name": "get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.get_exposure_values", "macro_sql": "{%- macro get_exposure_values() -%}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_exposure_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0304542, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_exposure_values": {"name": "default__get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_exposure_values", "macro_sql": "{%- macro default__get_exposure_values() -%}\n\n    {%- if execute -%}\n\n        {%- set nodes_list = graph.exposures.values() -%}\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n          {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n              wrap_string_with_quotes(node.type),\n              wrap_string_with_quotes(node.maturity),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.url),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.name)),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.email)),\n              wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n          {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0318027, "supported_languages": null}, "macro.dbt_project_evaluator.get_node_values": {"name": "get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.get_node_values", "macro_sql": "{%- macro get_node_values() -%}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.032378, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_node_values": {"name": "default__get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_node_values", "macro_sql": "{%- macro default__get_node_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.nodes.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set hard_coded_references = dbt_project_evaluator.find_all_hard_coded_references(node) -%}\n        {%- set number_lines = dbt_project_evaluator.calculate_number_lines(node) -%}\n        {%- set sql_complexity = dbt_project_evaluator.calculate_sql_complexity(node) -%}\n        {%- set contract = node.contract.enforced if node.contract else false -%}\n        {%- set exclude_node = dbt_project_evaluator.set_is_excluded(node, resource_type=\"node\") -%}\n\n\n        {%- set values_line  = \n            [\n                wrap_string_with_quotes(node.unique_id),\n                wrap_string_with_quotes(node.name),\n                wrap_string_with_quotes(node.resource_type),\n                wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n                \"cast(\" ~ node.config.enabled | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                wrap_string_with_quotes(node.config.materialized),\n                wrap_string_with_quotes(node.config.on_schema_change),\n                wrap_string_with_quotes(node.group),\n                wrap_string_with_quotes(node.access),\n                wrap_string_with_quotes(node.latest_version),\n                wrap_string_with_quotes(node.version),\n                wrap_string_with_quotes(node.deprecation_date),\n                \"cast(\" ~ contract | trim  ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                node.columns.values() | list | length,\n                node.columns.values() | list | selectattr('description') | list | length,\n                wrap_string_with_quotes(node.database),\n                wrap_string_with_quotes(node.schema),\n                wrap_string_with_quotes(node.package_name),\n                wrap_string_with_quotes(node.alias),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                \"''\" if not node.column_name else wrap_string_with_quotes(dbt.escape_single_quotes(node.column_name)),\n                wrap_string_with_quotes(node.meta | tojson),\n                wrap_string_with_quotes(dbt.escape_single_quotes(hard_coded_references)),\n                number_lines,\n                sql_complexity,\n                wrap_string_with_quotes(node.get('depends_on',{}).get('macros',[]) | tojson),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.test_metadata) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n                \"cast(\" ~ exclude_node ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            ]\n        %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.find_all_hard_coded_references", "macro.dbt_project_evaluator.calculate_number_lines", "macro.dbt_project_evaluator.calculate_sql_complexity", "macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.type_boolean", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0359054, "supported_languages": null}, "macro.dbt_project_evaluator.get_resource_values": {"name": "get_resource_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_resource_values.sql", "original_file_path": "macros/unpack/get_resource_values.sql", "unique_id": "macro.dbt_project_evaluator.get_resource_values", "macro_sql": "{% macro get_resource_values(resource=None, relationships=None, columns=None) %}\n  {% if relationships %}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif columns %}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif resource == 'exposures' %}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'sources' %}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'metrics' %}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'nodes' %}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_relationship_values", "macro.dbt_project_evaluator.default__get_relationship_values", "macro.dbt_project_evaluator.get_column_values", "macro.dbt_project_evaluator.default__get_column_values", "macro.dbt_project_evaluator.get_exposure_values", "macro.dbt_project_evaluator.default__get_exposure_values", "macro.dbt_project_evaluator.get_source_values", "macro.dbt_project_evaluator.default__get_source_values", "macro.dbt_project_evaluator.get_metric_values", "macro.dbt_project_evaluator.default__get_metric_values", "macro.dbt_project_evaluator.get_node_values", "macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0373964, "supported_languages": null}, "macro.dbt_project_evaluator.get_relationship_values": {"name": "get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.get_relationship_values", "macro_sql": "{%- macro get_relationship_values(node_type) -%}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_relationship_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0381951, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_relationship_values": {"name": "default__get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_relationship_values", "macro_sql": "{%- macro default__get_relationship_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'exposures' -%}\n            {% set nodes_list = graph.exposures.values() %}\n        {%- elif node_type == 'metrics' -%}\n            {% set nodes_list = graph.metrics.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes, exposures or metrics, got \" ~ node_type) }}\n        {% endif -%}\n        \n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n            {%- if node.get('depends_on',{}).get('nodes',[]) |length == 0 -%}\n\n                {%- set values_line = \n                  [\n                    \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                    \"cast(NULL as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                    \"FALSE\",\n                  ] \n                %}\n                  \n                {%- do values.append(values_line) -%}\n\n            {%- else -%}       \n\n                {%- for parent in node.get('depends_on',{}).get('nodes',[]) -%}\n\n                    {%- set values_line = \n                        [\n                            \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                            \"cast('\" ~ parent ~ \"' as \" ~ dbt_project_evaluator.type_string_dpe() ~ \")\",\n                            \"\" ~ loop.last ~ \"\" if node.unique_id.split('.')[0] == 'test' else \"FALSE\"\n                        ]\n                    %}\n                      \n                    {%- do values.append(values_line) -%}\n\n                {%- endfor -%}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n    \n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.type_string_dpe"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0403504, "supported_languages": null}, "macro.dbt_project_evaluator.get_metric_values": {"name": "get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.get_metric_values", "macro_sql": "{%- macro get_metric_values() -%}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_metric_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0407925, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_metric_values": {"name": "default__get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_metric_values", "macro_sql": "{%- macro default__get_metric_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.metrics.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n   \n          {%- set values_line = \n            [\n            wrap_string_with_quotes(node.unique_id),\n            wrap_string_with_quotes(node.name),\n            wrap_string_with_quotes(node.resource_type),\n            wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n            \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as \" ~ dbt.type_boolean() ~ \")\",\n            wrap_string_with_quotes(node.type),\n            wrap_string_with_quotes(dbt.escape_single_quotes(node.label)),\n            wrap_string_with_quotes(node.package_name),\n            wrap_string_with_quotes(dbt.escape_single_quotes(tojson(node.filter))),\n            wrap_string_with_quotes(node.type_params.measure.name),\n            wrap_string_with_quotes(node.type_params.measure.alias),\n            wrap_string_with_quotes(node.type_params.numerator | tojson),\n            wrap_string_with_quotes(node.type_params.denominator | tojson),\n            wrap_string_with_quotes(node.type_params.expr),\n            wrap_string_with_quotes(node.type_params.window | tojson),\n            wrap_string_with_quotes(node.type_params.grain_to_date),\n            wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.type_boolean", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0423849, "supported_languages": null}, "macro.dbt_project_evaluator.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.get_column_values", "macro_sql": "{%- macro get_column_values(node_type) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0428905, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_column_values", "macro_sql": "{%- macro default__get_column_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'sources' -%}\n            {% set nodes_list = graph.sources.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes or sources, got \" ~ node_type) }}\n        {% endif -%}\n\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n            {%- for column in node.columns.values() -%}\n\n                {%- set values_line  = \n                    [\n                        wrap_string_with_quotes(node.unique_id),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.name)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.description)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.data_type)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(tojson(column.constraints))),\n                        column.constraints | selectattr('type', 'equalto', 'not_null') | list | length > 0,\n                        column.constraints | length,\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.quote))\n                    ]\n                %}\n\n                {%- do values.append(values_line) -%}\n\n            {%- endfor -%}\n        {%- endfor -%}\n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0443292, "supported_languages": null}, "macro.dbt_project_evaluator.spark__escape_single_quotes": {"name": "spark__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/spark_shims.sql", "original_file_path": "macros/cross_db_shim/spark_shims.sql", "unique_id": "macro.dbt_project_evaluator.spark__escape_single_quotes", "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n    {{ expression | replace(\"'\",\"\\\\'\") }}  \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0445848, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_string": {"name": "clickhouse__type_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_string", "macro_sql": "{%- macro clickhouse__type_string() -%}\n  {{ 'Nullable(String)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0451477, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_int": {"name": "clickhouse__type_int", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_int", "macro_sql": "\n\n{%- macro clickhouse__type_int() -%}\n  {{ 'Nullable(Int32)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0452855, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_float": {"name": "clickhouse__type_float", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_float", "macro_sql": "\n\n{%- macro clickhouse__type_float() -%}\n  {{ 'Nullable(Float32)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0454338, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__type_boolean": {"name": "clickhouse__type_boolean", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__type_boolean", "macro_sql": "\n\n{%- macro clickhouse__type_boolean() -%}\n  {{ 'Nullable(Bool)' }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0455668, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__replace": {"name": "clickhouse__replace", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__replace", "macro_sql": "{% macro clickhouse__replace(string_text, pattern, replacement) -%}\n    replaceAll(assumeNotNull({{string_text}}), {{pattern}}, {{replacement}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.045796, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__split_part": {"name": "clickhouse__split_part", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__split_part", "macro_sql": "{% macro clickhouse__split_part(string_text, delimiter_text, part_number) -%}\n    splitByChar({{delimiter_text}}, assumeNotNull({{string_text}}))[{{part_number}}]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0460343, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__listagg": {"name": "clickhouse__listagg", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__listagg", "macro_sql": "{% macro clickhouse__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if order_by_clause and ' by ' in order_by_clause -%}\n      {% set order_by_field = order_by_clause.split(' by ')[1] %}\n      {% set arr = \"arrayMap(x -> x.1, arrayReverseSort(x -> x.2, arrayZip(array_agg({}), array_agg({}))))\".format(arr, order_by_field) %}\n    {% else -%}\n      {% set arr = \"array_agg({})\".format(measure) %}\n    {%- endif %}\n\n    {% if limit_num -%}\n      arrayStringConcat(arraySlice({{ arr }}, 1, {{ limit_num }}), {{delimiter_text}})\n    {% else -%}\n      arrayStringConcat({{ arr }}, {{delimiter_text}})\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0469887, "supported_languages": null}, "macro.dbt_project_evaluator.clickhouse__load_csv_rows": {"name": "clickhouse__load_csv_rows", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/clickhouse_shims.sql", "original_file_path": "macros/cross_db_shim/clickhouse_shims.sql", "unique_id": "macro.dbt_project_evaluator.clickhouse__load_csv_rows", "macro_sql": "{% macro clickhouse__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set data_sql = adapter.get_csv_data(agate_table) %}\n\n  {% if data_sql %}\n    {% set sql -%}\n      insert into {{ this.render() }} ({{ cols_sql }})\n      {{ adapter.get_model_query_settings(model) }}\n      format CSV\n      {{ data_sql }}\n    {%- endset %}\n\n    {% do adapter.add_query(sql, bindings=agate_table, abridge_sql_log=True) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0479054, "supported_languages": null}, "macro.dbt_project_evaluator.type_string_dpe": {"name": "type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.type_string_dpe", "macro_sql": "{%- macro type_string_dpe() -%}\n    {{ return(adapter.dispatch('type_string_dpe', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__type_string_dpe"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0483088, "supported_languages": null}, "macro.dbt_project_evaluator.default__type_string_dpe": {"name": "default__type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.default__type_string_dpe", "macro_sql": "{%- macro default__type_string_dpe() -%}\n    {{ return(dbt.type_string()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.048497, "supported_languages": null}, "macro.dbt_project_evaluator.redshift__type_string_dpe": {"name": "redshift__type_string_dpe", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_string.sql", "original_file_path": "macros/cross_db_shim/type_string.sql", "unique_id": "macro.dbt_project_evaluator.redshift__type_string_dpe", "macro_sql": "{%- macro redshift__type_string_dpe() -%}\n    {{ return(api.Column.string_type(600)) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0487037, "supported_languages": null}, "macro.dbt_project_evaluator.type_large_string": {"name": "type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.type_large_string", "macro_sql": "{%- macro type_large_string() -%}\n    {{ return(adapter.dispatch('type_large_string', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__type_large_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0490086, "supported_languages": null}, "macro.dbt_project_evaluator.default__type_large_string": {"name": "default__type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.default__type_large_string", "macro_sql": "{%- macro default__type_large_string() -%}\n    {{ return(dbt.type_string()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0491693, "supported_languages": null}, "macro.dbt_project_evaluator.redshift__type_large_string": {"name": "redshift__type_large_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/type_large_string.sql", "original_file_path": "macros/cross_db_shim/type_large_string.sql", "unique_id": "macro.dbt_project_evaluator.redshift__type_large_string", "macro_sql": "{%- macro redshift__type_large_string() -%}\n    varchar(5000)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0492682, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) -%}\n    str_split({{string_text}}, {{delimiter_text}})[{{part_number}}]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0496192, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {# \n        This is not the full support for listagg on DuckDB but it allows tests to pass/fail for this package\n        - order_by_clause does not work, so we need to sort the CTE before calling listagg\n        - support for limit_num was not added\n    #}\n\n    {% if limit_num -%}\n        {%- do exceptions.raise_compiler_error(\"listagg on DuckDB doesn't support limit_num\") -%}\n    {%- endif %}\n\n    string_agg(\n        {{ measure }}\n        , {{ delimiter_text }}\n        {{ order_by_clause }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.050067, "supported_languages": null}, "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues": {"name": "print_dbt_project_evaluator_issues", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "original_file_path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "unique_id": "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues", "macro_sql": "{% macro print_dbt_project_evaluator_issues(format='table', quote=\"\") %}\n\n  {%- if flags.WHICH in [\"build\",\"test\"] -%}\n    {{ print(\"\\n### List of issues raised by dbt_project_evaluator ###\") }}\n\n    {#-\n      if you create custom dbt_project_evaluator rules on your package using the test `dbt_project_evaluator.is_empty`,\n      the test name should start with the same name as the default.\n    -#}\n    {% set test_name_prefix_of_custom_rules = var(\n      \"test_name_prefix_of_custom_rules\",\n      default=\"dbt_project_evaluator_is_empty_\",\n    ) %}\n\n    {% for result in results | selectattr('failures') | selectattr('failures', '>', 0) %}\n      \n      {% set is_test = result.node.config.materialized == \"test\" %}\n      {% set package_name = result.node.package_name %}\n      {% set resource_name = result.node.name %}\n      {% if is_test and (\n        package_name == \"dbt_project_evaluator\"\n        or resource_name.startswith(test_name_prefix_of_custom_rules)\n      ) %}\n        \n        {{ print(\"\\n-- \" ~ result.node.fqn | join(\".\") ~ \" --\") }}\n\n        {% set unique_id_model_checked = result.node.depends_on.nodes[0] %}\n        {% set model_details = graph[\"nodes\"][unique_id_model_checked] %}\n\n        {% set sql_statement %}\n        select * from {{ model_details.relation_name }}\n        {% endset %}\n\n        {% set query_results = run_query(sql_statement) %}\n        {% if format == 'table' %}\n          {{ print(query_results.print_table(max_column_width=80, max_rows=1000) or \"\") }}\n        {% elif format == 'csv' %}  \n          {{ print(query_results.print_csv() or \"\") }}\n        {% else %}\n            {%- do exceptions.raise_compiler_error(\"format can only be 'table' or 'csv'\") -%}\n        {% endif %}\n\n\n      {% endif %}\n\n    {% endfor %}\n\n    {{ print(\"\\n\") }}\n  {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0526445, "supported_languages": null}, "macro.dbt_project_evaluator.test_is_empty": {"name": "test_is_empty", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "tests/generic/test_is_empty.sql", "original_file_path": "tests/generic/test_is_empty.sql", "unique_id": "macro.dbt_project_evaluator.test_is_empty", "macro_sql": "{% test is_empty(model) %}\n\n    {{ config (\n        severity = 'warn',\n        fail_calc = \"n_records\"\n    ) }}\n\n    select count(*) as n_records\n    from {{ model }}\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0530276, "supported_languages": null}, "macro.automate_dv.alias_all": {"name": "alias_all", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.automate_dv.alias_all", "macro_sql": "\n\n{%- macro alias_all(columns=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias_all', 'automate_dv')(columns=columns, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0536828, "supported_languages": null}, "macro.automate_dv.default__alias_all": {"name": "default__alias_all", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.automate_dv.default__alias_all", "macro_sql": "\n\n{%- macro default__alias_all(columns, prefix) -%}\n\n{%- if automate_dv.is_list(columns) -%}\n\n    {%- set processed_columns = [] -%}\n\n    {%- for col in columns -%}\n        {%- if col | lower not in processed_columns | map('lower') | list -%}\n\n            {{ automate_dv.alias(alias_config=col, prefix=prefix) }}\n            {%- if not loop.last -%} , {% endif -%}\n\n            {%- if col is mapping -%}\n                {%- if col['source_column'] | lower and col['alias'] | lower -%}\n                    {%- do processed_columns.append(col['source_column']) -%}\n                {% endif -%}\n            {%- else -%}\n                {%- do processed_columns.append(col) -%}\n            {% endif -%}\n        {% endif -%}\n    {%- endfor -%}\n\n{%- elif columns is string -%}\n\n{{ automate_dv.alias(alias_config=columns, prefix=prefix) }}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\n    {%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0555, "supported_languages": null}, "macro.automate_dv.process_payload_column_excludes": {"name": "process_payload_column_excludes", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/process_payload_column_excludes.sql", "original_file_path": "macros/internal/metadata_processing/process_payload_column_excludes.sql", "unique_id": "macro.automate_dv.process_payload_column_excludes", "macro_sql": "\n\n{%- macro process_payload_column_excludes(src_pk, src_hashdiff, src_payload, src_extra_columns,\n                                          src_eff, src_ldts, src_source, source_model) -%}\n\n    {%- if src_payload is not mapping -%}\n        {%- do return(src_payload) -%}\n    {%- endif -%}\n\n    {%- set source_model_cols = adapter.get_columns_in_relation(ref(source_model)) -%}\n    {%- set columns_in_metadata = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff,\n                                                                       src_payload, src_extra_columns,\n                                                                       src_eff, src_ldts, src_source]) | map('lower') | list -%}\n\n    {%- set payload_cols = [] -%}\n    {%- for col in source_model_cols -%}\n        {%- if col.column | lower not in columns_in_metadata -%}\n            {%- do payload_cols.append(col.column) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- if 'exclude_columns' in src_payload.keys() -%}\n        {%- set table_excludes_columns = src_payload.exclude_columns -%}\n\n        {%- if table_excludes_columns -%}\n\n            {%- set excluded_payload = [] -%}\n            {%- set exclude_columns_list = src_payload.columns | map('lower') | list -%}\n\n            {%- for col in payload_cols -%}\n               {%- if col | lower not in exclude_columns_list -%}\n                   {%- do excluded_payload.append(col) -%}\n               {%- endif -%}\n            {%- endfor -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- do return(excluded_payload) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.057454, "supported_languages": null}, "macro.automate_dv.concat_ws": {"name": "concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.concat_ws", "macro_sql": "\n\n{%- macro concat_ws(string_list, separator=\"||\") -%}\n\n    {{- adapter.dispatch('concat_ws', 'automate_dv')(string_list=string_list, separator=separator) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0579767, "supported_languages": null}, "macro.automate_dv.default__concat_ws": {"name": "default__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.default__concat_ws", "macro_sql": "\n\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\n\nCONCAT(\n{%- for str in string_list %}\n    {{ str }}\n{%- if not loop.last %}, '{{ separator }}', {%- endif -%}\n{%- endfor %}\n)\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0583534, "supported_languages": null}, "macro.automate_dv.bigquery__concat_ws": {"name": "bigquery__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.bigquery__concat_ws", "macro_sql": "{%- macro bigquery__concat_ws(string_list, separator=\"||\") -%}\n\n    {{ automate_dv.default__concat_ws(string_list=string_list, separator=separator) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0585923, "supported_languages": null}, "macro.automate_dv.sqlserver__concat_ws": {"name": "sqlserver__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.sqlserver__concat_ws", "macro_sql": "{%- macro sqlserver__concat_ws(string_list, separator=\"||\") -%}\n\n    {{ automate_dv.default__concat_ws(string_list=string_list, separator=separator) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.058817, "supported_languages": null}, "macro.automate_dv.multikey": {"name": "multikey", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.automate_dv.multikey", "macro_sql": "\n\n{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {{- adapter.dispatch('multikey', 'automate_dv')(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0595827, "supported_languages": null}, "macro.automate_dv.default__multikey": {"name": "default__multikey", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.automate_dv.default__multikey", "macro_sql": "\n\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {%- if prefix is string -%}\n        {%- set prefix = [prefix] -%}\n    {%- endif -%}\n\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- if condition in ['<>', '!=', '='] -%}\n        {%- for col in columns -%}\n            {%- if prefix -%}\n                {{- automate_dv.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ automate_dv.prefix([col], prefix[1]) -}}\n            {%- endif %}\n            {%- if not loop.last %} {{ operator }} {% endif -%}\n        {% endfor -%}\n    {%- else -%}\n        {%- if automate_dv.is_list(columns) -%}\n            {%- for col in columns -%}\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\n            {%- endfor -%}\n        {%- else -%}\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.061404, "supported_languages": null}, "macro.automate_dv.expand_column_list": {"name": "expand_column_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/expand_column_list.sql", "original_file_path": "macros/internal/metadata_processing/expand_column_list.sql", "unique_id": "macro.automate_dv.expand_column_list", "macro_sql": "\n\n{%- macro expand_column_list(columns=none) -%}\n\n{%- if not columns -%}\n    {%- do return([]) -%}\n{%- endif -%}\n\n{%- set col_list = [] -%}\n\n{%- if automate_dv.is_list(columns) -%}\n\n    {%- set columns = columns | reject(\"none\") %}\n\n    {%- for col in columns -%}\n\n        {%- if col is string -%}\n\n            {%- do col_list.append(col) -%}\n\n        {#- If list of lists -#}\n        {%- elif automate_dv.is_list(col) -%}\n\n            {%- for cols in col -%}\n\n                {%- do col_list.append(cols) -%}\n\n            {%- endfor -%}\n        {%- elif col is mapping -%}\n\n            {%- do col_list.append(col) -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n{%- else -%}\n\n    {%- if execute -%}\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- do return(col_list) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.06334, "supported_languages": null}, "macro.automate_dv.alias": {"name": "alias", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.automate_dv.alias", "macro_sql": "\n\n{%- macro alias(alias_config=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias', 'automate_dv')(alias_config=alias_config, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0640788, "supported_languages": null}, "macro.automate_dv.default__alias": {"name": "default__alias", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.automate_dv.default__alias", "macro_sql": "\n\n{%- macro default__alias(alias_config=none, prefix=none) -%}\n\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\n\n    {%- if alias_config is mapping -%}\n\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\n\n            {%- if prefix -%}\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- else -%}\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- if prefix -%}\n\n        {{- automate_dv.prefix([alias_config], prefix) -}}\n\n        {%- else -%}\n\n        {{ alias_config }}\n\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if execute -%}\n\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\n\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.065158, "supported_languages": null}, "macro.automate_dv.escape_column_names": {"name": "escape_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.automate_dv.escape_column_names", "macro_sql": "\n\n{%- macro escape_column_names(columns=none) -%}\n\n    {%- if automate_dv.is_list(columns) -%}\n        {%- set columns = automate_dv.expand_column_list(columns) -%}\n    {%- endif -%}\n\n    {%- if automate_dv.is_something(columns) -%}\n\n        {%- set col_string = '' -%}\n        {%- set col_list = [] -%}\n        {%- set col_mapping = {} -%}\n\n        {%- if columns is string -%}\n\n            {%- set col_string = automate_dv.escape_column_name(columns) -%}\n\n        {%- elif automate_dv.is_list(columns) -%}\n\n            {%- for col in columns -%}\n\n                {%- if col is string -%}\n\n                    {%- set escaped_col = automate_dv.escape_column_name(col) -%}\n\n                    {%- do col_list.append(escaped_col) -%}\n\n                {%- else -%}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n            {%- endfor -%}\n\n        {%- elif columns is mapping -%}\n\n            {%- if columns['source_column'] and columns['alias'] -%}\n\n                {%- set escaped_source_col = automate_dv.escape_column_name(columns['source_column']) -%}\n                {%- set escaped_alias_col = automate_dv.escape_column_name(columns['alias']) -%}\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\n\n            {%- else -%}\n\n                {%- if execute -%}\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n                {%- endif %}\n\n            {%- endif -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- elif columns == '' -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\n        {%- endif -%}\n\n    {%- endif -%}\n\n    {%- if columns is none -%}\n\n        {%- do return(none) -%}\n\n    {%- elif columns == [] -%}\n\n        {%- do return([]) -%}\n\n    {%- elif columns == {} -%}\n\n        {%- do return({}) -%}\n\n    {%- elif columns is string -%}\n\n        {%- do return(col_string) -%}\n\n    {%- elif automate_dv.is_list(columns) -%}\n\n        {%- do return(col_list) -%}\n\n    {%- elif columns is mapping -%}\n\n        {%- do return(col_mapping) -%}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.expand_column_list", "macro.automate_dv.is_something", "macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0686367, "supported_languages": null}, "macro.automate_dv.escape_column_name": {"name": "escape_column_name", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/escape_column_name.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_name.sql", "unique_id": "macro.automate_dv.escape_column_name", "macro_sql": "\n\n{%- macro escape_column_name(column) -%}\n\n    {{- adapter.dispatch('escape_column_name', 'automate_dv')(column=column) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0690892, "supported_languages": null}, "macro.automate_dv.default__escape_column_name": {"name": "default__escape_column_name", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/escape_column_name.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_name.sql", "unique_id": "macro.automate_dv.default__escape_column_name", "macro_sql": "\n\n{%- macro default__escape_column_name(column) -%}\n\n    {# Do not escape a constant (single quoted) value #}\n    {%- if column | first == \"'\" and column | last == \"'\" -%}\n        {%- set escaped_column_name = column -%}\n    {%- else -%}\n        {%- set escape_char_left, escape_char_right = automate_dv.get_escape_characters() -%}\n\n        {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\n    {%- endif -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.069828, "supported_languages": null}, "macro.automate_dv.get_escape_characters": {"name": "get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.get_escape_characters", "macro_sql": "{% macro get_escape_characters() -%}\n\n    {%- set default_escape_char_left, default_escape_char_right = adapter.dispatch('get_escape_characters', 'automate_dv')() -%}\n\n    {%- if ((var('escape_char_left', default_escape_char_left) == '') and (var('escape_char_right', default_escape_char_right) == '')) -%}\n        {%- set warning_message = 'Invalid escape_char_left and escape_char_right value provided. ' +\n                                  'Using platform defaults ({}{})'.format(default_escape_char_left, default_escape_char_right) -%}\n        {%- set escape_chars = (default_escape_char_left, default_escape_char_right) -%}\n\n    {%- elif var('escape_char_left', default_escape_char_left) == '' -%}\n        {%- set warning_message = 'Invalid escape_char_left value provided. Using platform default ({})'.format(default_escape_char_left) -%}\n        {%- set escape_chars = (default_escape_char_left, var('escape_char_right', default_escape_char_right)) -%}\n\n    {%- elif var('escape_char_right', default_escape_char_right) == '' -%}\n        {%- set warning_message = 'Invalid escape_char_right value provided. Using platform default ({})'.format(default_escape_char_right) -%}\n        {%- set escape_chars = (var('escape_char_left', default_escape_char_left), default_escape_char_right) -%}\n\n    {%- else -%}\n       {%- set escape_chars = (var('escape_char_left', default_escape_char_left), var('escape_char_right', default_escape_char_right)) -%}\n    {%- endif -%}\n\n    {%- if execute and warning_message -%}\n        {%- do exceptions.warn(warning_message) -%}\n    {%- endif -%}\n\n    {%- do return(escape_chars) -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.snowflake__get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0721087, "supported_languages": null}, "macro.automate_dv.snowflake__get_escape_characters": {"name": "snowflake__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.snowflake__get_escape_characters", "macro_sql": "\n\n{%- macro snowflake__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0723336, "supported_languages": null}, "macro.automate_dv.bigquery__get_escape_characters": {"name": "bigquery__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.bigquery__get_escape_characters", "macro_sql": "\n\n{%- macro bigquery__get_escape_characters() %}\n    {%- do return (('`', '`')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.072545, "supported_languages": null}, "macro.automate_dv.sqlserver__get_escape_characters": {"name": "sqlserver__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.sqlserver__get_escape_characters", "macro_sql": "\n\n{%- macro sqlserver__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0727468, "supported_languages": null}, "macro.automate_dv.databricks__get_escape_characters": {"name": "databricks__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.databricks__get_escape_characters", "macro_sql": "\n\n{%- macro databricks__get_escape_characters() %}\n    {%- do return (('`', '`')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0729446, "supported_languages": null}, "macro.automate_dv.postgres__get_escape_characters": {"name": "postgres__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.postgres__get_escape_characters", "macro_sql": "\n\n{%- macro postgres__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0731397, "supported_languages": null}, "macro.automate_dv.as_constant": {"name": "as_constant", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.automate_dv.as_constant", "macro_sql": "\n\n{%- macro as_constant(column_str=none) -%}\n\n    {{- adapter.dispatch('as_constant', 'automate_dv')(column_str=column_str) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0736027, "supported_languages": null}, "macro.automate_dv.default__as_constant": {"name": "default__as_constant", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.automate_dv.default__as_constant", "macro_sql": "\n\n{%- macro default__as_constant(column_str) -%}\n\n    {%- if column_str is not none and column_str is string and column_str -%}\n\n        {%- if column_str | first == \"!\" -%}\n\n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\n\n        {%- else -%}\n\n            {{- return(column_str) -}}\n\n        {%- endif -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\n        {%- endif %}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0742524, "supported_languages": null}, "macro.automate_dv.check_required_parameters": {"name": "check_required_parameters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/check_required_parameters.sql", "original_file_path": "macros/internal/metadata_processing/check_required_parameters.sql", "unique_id": "macro.automate_dv.check_required_parameters", "macro_sql": "\n\n{%- macro check_required_parameters() -%}\n\n    {%- set ns = namespace(missing_parameters=[]) -%}\n\n    {%- if kwargs is not none -%}\n\n        {%- for k, v in kwargs.items() %}\n            {%- do ns.missing_parameters.append(k) if v is none -%}\n        {%- endfor -%}\n\n        {%- if ns.missing_parameters -%}\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.075127, "supported_languages": null}, "macro.automate_dv.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/timestamp_add.sql", "original_file_path": "macros/internal/helpers/timestamp_add.sql", "unique_id": "macro.automate_dv.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_date_or_timestamp) %}\n    {{ return(adapter.dispatch('timestamp_add', 'automate_dv')(datepart=datepart, interval=interval,\n                                                               from_date_or_timestamp=from_date_or_timestamp)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0759819, "supported_languages": null}, "macro.automate_dv.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/timestamp_add.sql", "original_file_path": "macros/internal/helpers/timestamp_add.sql", "unique_id": "macro.automate_dv.default__timestamp_add", "macro_sql": "{%- macro default__timestamp_add(datepart, interval, from_date_or_timestamp) -%}\n\n    {%- if datepart is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n        {{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }}\n    {%- elif datepart == 'microsecond' -%}\n        {{ automate_dv.dateadd('microsecond', 1, from_date_or_timestamp) }}\n    {%- elif datepart == 'millisecond' -%}\n        {{ automate_dv.dateadd('microsecond', 999, from_date_or_timestamp) }}\n    {%- elif datepart == 'second' -%}\n        {{ automate_dv.dateadd('millisecond', 999, from_date_or_timestamp) }}\n    {%- elif datepart == 'minute' -%}\n        {{ automate_dv.dateadd('millisecond', 5999, from_date_or_timestamp) }}\n    {%- elif datepart == 'hour' -%}\n        {{ automate_dv.dateadd('millisecond', 3599999, from_date_or_timestamp) }}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.077438, "supported_languages": null}, "macro.automate_dv.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/timestamp_add.sql", "original_file_path": "macros/internal/helpers/timestamp_add.sql", "unique_id": "macro.automate_dv.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_date_or_timestamp) %}\n\n{%- if datepart is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    {{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }}\n{%- elif datepart == 'microsecond' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 1 microsecond)\n{%- elif datepart == 'millisecond' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 999 microsecond)\n{%- elif datepart == 'second' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 999 millisecond)\n{%- elif datepart == 'minute' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 5999 millisecond)\n{%- elif datepart == 'hour' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 3599999 millisecond)\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0783827, "supported_languages": null}, "macro.automate_dv.prepend_generated_by": {"name": "prepend_generated_by", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/prepend_generated_by.sql", "original_file_path": "macros/internal/helpers/prepend_generated_by.sql", "unique_id": "macro.automate_dv.prepend_generated_by", "macro_sql": "\n\n{%- macro prepend_generated_by() -%}\n-- Generated by AutomateDV (formerly known as dbtvault)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0785882, "supported_languages": null}, "macro.automate_dv.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.automate_dv.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n    {{ return(adapter.dispatch('dateadd', 'automate_dv')(datepart=datepart,\n                                                     interval=interval,\n                                                     from_date_or_timestamp=from_date_or_timestamp)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0791523, "supported_languages": null}, "macro.automate_dv.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.automate_dv.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ dateadd(datepart, interval, from_date_or_timestamp) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0794027, "supported_languages": null}, "macro.automate_dv.sqlserver__dateadd": {"name": "sqlserver__dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.automate_dv.sqlserver__dateadd", "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        CAST({{ from_date_or_timestamp }} AS DATETIME2)\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.07963, "supported_languages": null}, "macro.automate_dv.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_list", "macro_sql": "\n\n{%- macro is_list(obj, empty_is_false=false) -%}\n\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.080629, "supported_languages": null}, "macro.automate_dv.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\n\n    {%- if obj is none or obj is undefined or not obj or automate_dv.is_list(obj, empty_is_false=true) -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0810745, "supported_languages": null}, "macro.automate_dv.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_something", "macro_sql": "{%- macro is_something(obj) -%}\n\n    {%- if obj is not none and obj is defined and obj -%}\n        {#- if an empty list, do not consider the object something -#}\n        {% if automate_dv.is_list(empty_is_false=true) %}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0816174, "supported_languages": null}, "macro.automate_dv.is_expression": {"name": "is_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\n\n    {%- if obj is string -%}\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0822997, "supported_languages": null}, "macro.automate_dv.log_relation_sources": {"name": "log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.automate_dv.log_relation_sources", "macro_sql": "{% macro log_relation_sources(relation, source_count) %}\n    {{ return(adapter.dispatch('log_relation_sources', 'automate_dv')(relation=relation, source_count=source_count)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__log_relation_sources"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0828469, "supported_languages": null}, "macro.automate_dv.default__log_relation_sources": {"name": "default__log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.automate_dv.default__log_relation_sources", "macro_sql": "{% macro default__log_relation_sources(relation, source_count) %}\n\n    {%- if 'docs' not in invocation_args_dict['rpc_method'] and execute -%}\n\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}.{}\".format(relation.database, relation.schema, relation.identifier),\n                                                                        source_count)) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.083318, "supported_languages": null}, "macro.automate_dv.databricks__log_relation_sources": {"name": "databricks__log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.automate_dv.databricks__log_relation_sources", "macro_sql": "{% macro databricks__log_relation_sources(relation, source_count) %}\n\n    {%- if 'docs' not in invocation_args_dict['rpc_method'] and execute -%}\n\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}\".format(relation.schema, relation.identifier),\n                                                                        source_count)) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.083881, "supported_languages": null}, "macro.automate_dv.process_hash_column_excludes": {"name": "process_hash_column_excludes", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/process_hash_column_excludes.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_hash_column_excludes.sql", "unique_id": "macro.automate_dv.process_hash_column_excludes", "macro_sql": "\n\n{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\n\n    {%- set processed_hash_columns = {} -%}\n\n    {%- for col, col_mapping in hash_columns.items() -%}\n\n        {%- if col_mapping is mapping -%}\n            {%- if col_mapping.exclude_columns -%}\n\n                {%- if col_mapping.columns -%}\n\n                    {%- set columns_to_hash = automate_dv.process_columns_to_select(source_columns, col_mapping.columns) -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- else -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\n            {%- endif -%}\n        {%- else -%}\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do return(processed_hash_columns) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.086065, "supported_languages": null}, "macro.automate_dv.extract_column_names": {"name": "extract_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/extract_column_names.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/extract_column_names.sql", "unique_id": "macro.automate_dv.extract_column_names", "macro_sql": "\n\n{%- macro extract_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- do extracted_column_names.append(key) -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0867996, "supported_languages": null}, "macro.automate_dv.process_columns_to_select": {"name": "process_columns_to_select", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/process_columns_to_select.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_columns_to_select.sql", "unique_id": "macro.automate_dv.process_columns_to_select", "macro_sql": "\n\n{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\n\n    {% set columns_list = columns_list | list %}\n    {% set exclude_columns_list = exclude_columns_list | list %}\n\n    {% set columns_to_select = [] %}\n\n    {% if not automate_dv.is_list(columns_list) or not automate_dv.is_list(exclude_columns_list)  %}\n\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\n\n    {%- endif -%}\n\n    {%- if automate_dv.is_something(columns_list) and automate_dv.is_something(exclude_columns_list) -%}\n\n        {%- for col in columns_list -%}\n\n            {%- if (col | upper) not in (exclude_columns_list | map('upper') | list) -%}\n                {%- do columns_to_select.append(col) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- do return(columns_to_select) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0880635, "supported_languages": null}, "macro.automate_dv.extract_null_column_names": {"name": "extract_null_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/extract_null_column_names.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/extract_null_column_names.sql", "unique_id": "macro.automate_dv.extract_null_column_names", "macro_sql": "\n\n{%- macro extract_null_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- if automate_dv.is_something(value) -%}\n                {% if automate_dv.is_list(value) %}\n                    {% for col_name in value %}\n                        {%- do extracted_column_names.append(col_name) -%}\n                        {%- do extracted_column_names.append(col_name ~ \"_ORIGINAL\") -%}\n                    {% endfor %}\n                {%  else %}\n                    {%- do extracted_column_names.append(value) -%}\n                    {%- do extracted_column_names.append(value ~ \"_ORIGINAL\") -%}\n                {% endif %}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0893483, "supported_languages": null}, "macro.automate_dv.process_columns_to_escape": {"name": "process_columns_to_escape", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/process_columns_to_escape.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_columns_to_escape.sql", "unique_id": "macro.automate_dv.process_columns_to_escape", "macro_sql": "\n\n{%- macro process_columns_to_escape(derived_columns_list=none) -%}\n\n    {%- if derived_columns_list -%}\n\n        {%- set ns = namespace(columns_to_escape=[]) -%}\n        {%- set escape_char_left, escape_char_right = automate_dv.get_escape_characters() -%}\n        {%- set quote_pattern = '\\{}([a-zA-Z\\s]+)\\{}'.format(escape_char_left, escape_char_right) -%}\n        {%- set re = modules.re -%}\n\n        {%- for col_name, col_def in derived_columns_list.items() -%}\n\n            {%- if col_def is mapping -%}\n                {%- if col_def['escape'] == true -%}\n                    {%- if automate_dv.is_list(col_def['source_column']) -%}\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + col_def['source_column'] -%}\n                    {%- else -%}\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + [col_def['source_column']] -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- elif col_def is string -%}\n\n                {#- Find a quoted string in the column definition so that we can escape it everywhere else -#}\n                {% set is_match = re.findall(quote_pattern, col_def, re.IGNORECASE) %}\n\n                {%- if is_match -%}\n                    {%- set ns.columns_to_escape = ns.columns_to_escape + is_match -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(ns.columns_to_escape | unique | list) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_escape_characters", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.091425, "supported_languages": null}, "macro.automate_dv.print_list": {"name": "print_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/print_list.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/print_list.sql", "unique_id": "macro.automate_dv.print_list", "macro_sql": "\n\n{%- macro print_list(list_to_print=none, indent=4, columns_to_escape=none) -%}\n\n    {%- for col_name in list_to_print -%}\n        {%- if col_name | lower in columns_to_escape | map('lower') | list -%}\n            {{- automate_dv.escape_column_name(col_name) | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\n        {%- else -%}\n            {{- col_name | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\n        {%- endif -%}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0922658, "supported_languages": null}, "macro.automate_dv.hash_columns": {"name": "hash_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.automate_dv.hash_columns", "macro_sql": "\n\n{%- macro hash_columns(columns=none, columns_to_escape=none) -%}\n\n    {{- adapter.dispatch('hash_columns', 'automate_dv')(columns=columns, columns_to_escape=columns_to_escape) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0928886, "supported_languages": null}, "macro.automate_dv.default__hash_columns": {"name": "default__hash_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.automate_dv.default__hash_columns", "macro_sql": "\n\n{%- macro default__hash_columns(columns=none, columns_to_escape=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if columns[col] is mapping and columns[col].is_hashdiff -%}\n\n            {{- automate_dv.hash(columns=columns[col]['columns'],\n                              alias=col,\n                              is_hashdiff=columns[col]['is_hashdiff'],\n                              columns_to_escape=columns_to_escape) -}}\n\n        {%- elif columns[col] is not mapping -%}\n\n            {{- automate_dv.hash(columns=columns[col],\n                              alias=col,\n                              is_hashdiff=false,\n                              columns_to_escape=columns_to_escape) -}}\n\n        {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\n\n            {%- if execute -%}\n                {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\n            {% endif %}\n\n            {{- automate_dv.hash(columns=columns[col]['columns'], alias=col, columns_to_escape=columns_to_escape) -}}\n\n        {%- endif -%}\n\n        {{- \",\\n\\n\" if not loop.last -}}\n    {%- endfor -%}\n\n{%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0944538, "supported_languages": null}, "macro.automate_dv.null_columns": {"name": "null_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.null_columns", "macro_sql": "\n\n{%- macro null_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('null_columns', 'automate_dv')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__null_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0956724, "supported_languages": null}, "macro.automate_dv.default__null_columns": {"name": "default__null_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.default__null_columns", "macro_sql": "\n\n{%- macro default__null_columns(source_relation=none, columns=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- set ns = namespace() -%}\n\n    {%- for col in columns -%}\n        {%- if col.lower() == 'required' -%}\n            {% if automate_dv.is_something(columns[col]) %}\n                {%- if columns[col] is string -%}\n                    {%- set ns.required = [columns[col]] -%}\n                {%- elif automate_dv.is_list(columns[col]) -%}\n                    {%- set ns.required = columns[col] -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if col.lower() == 'optional' -%}\n            {% if automate_dv.is_something(columns[col]) %}\n                {%- if columns[col] is string -%}\n                    {%- set ns.optional = [columns[col]] -%}\n                {%- elif automate_dv.is_list(columns[col]) -%}\n                    {%- set ns.optional = columns[col] -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- set required_value = var('null_key_required', '-1') -%}\n    {%- set optional_value = var('null_key_optional', '-2') -%}\n\n    {%- if automate_dv.is_something(ns.required) -%}\n        {%- filter indent(width=0) -%}\n        {%- for col_name in ns.required -%}\n            {{ automate_dv.null_column_sql(col_name, required_value) }}{{ \",\\n\" if not loop.last }}{{ \",\\n\" if loop.last and automate_dv.is_something(ns.optional) else \"\" }}\n        {%- endfor -%}\n        {%- endfilter -%}\n    {%- endif -%}\n\n    {%- if automate_dv.is_something(ns.optional) -%}\n        {%- filter indent(width=0) -%}\n        {%- for col_name in ns.optional -%}\n            {{ automate_dv.null_column_sql(col_name, optional_value) }}{{ \",\\n\" if not loop.last }}\n        {%- endfor -%}\n        {%- endfilter -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.is_list", "macro.automate_dv.null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.098256, "supported_languages": null}, "macro.automate_dv.null_column_sql": {"name": "null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.null_column_sql", "macro_sql": "{%- macro null_column_sql(col_name, default_value) -%}\n\n    {{- adapter.dispatch('null_column_sql', 'automate_dv')(col_name=col_name, default_value=default_value) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.098552, "supported_languages": null}, "macro.automate_dv.default__null_column_sql": {"name": "default__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.default__null_column_sql", "macro_sql": "{%- macro default__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    IFNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0988293, "supported_languages": null}, "macro.automate_dv.sqlserver__null_column_sql": {"name": "sqlserver__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.sqlserver__null_column_sql", "macro_sql": "{%- macro sqlserver__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    ISNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0991, "supported_languages": null}, "macro.automate_dv.postgres__null_column_sql": {"name": "postgres__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.postgres__null_column_sql", "macro_sql": "{%- macro postgres__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    COALESCE({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.0993707, "supported_languages": null}, "macro.automate_dv.stage": {"name": "stage", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "unique_id": "macro.automate_dv.stage", "macro_sql": "\n\n{%- macro stage(include_source_columns=none, source_model=none, hashed_columns=none, derived_columns=none, null_columns=none, ranked_columns=none) -%}\n\n    {%- if include_source_columns is none -%}\n        {%- set include_source_columns = true -%}\n    {%- endif -%}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('stage', 'automate_dv')(include_source_columns=include_source_columns,\n                                              source_model=source_model,\n                                              hashed_columns=hashed_columns,\n                                              derived_columns=derived_columns,\n                                              null_columns=null_columns,\n                                              ranked_columns=ranked_columns\n                                              ) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__stage"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.101274, "supported_languages": null}, "macro.automate_dv.default__stage": {"name": "default__stage", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "unique_id": "macro.automate_dv.default__stage", "macro_sql": "{%- macro default__stage(include_source_columns, source_model, hashed_columns, derived_columns, null_columns, ranked_columns) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create\n    relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = automate_dv.source_columns(source_relation=source_relation) -%}\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = automate_dv.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n{%- set columns_to_escape = automate_dv.process_columns_to_escape(derived_columns) | list -%}\n{%- set derived_column_names = automate_dv.extract_column_names(derived_columns) | list -%}\n{%- set null_column_names = automate_dv.extract_null_column_names(null_columns) | list -%}\n{%- set hashed_column_names = automate_dv.extract_column_names(hashed_columns) | list -%}\n{%- set ranked_column_names = automate_dv.extract_column_names(ranked_columns) | list -%}\n{%- set exclude_column_names = derived_column_names + null_column_names + hashed_column_names | list -%}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n\n{%- set source_columns_to_select = automate_dv.process_columns_to_select(all_source_columns, exclude_column_names) -%}\n{%- set derived_columns_to_select = automate_dv.process_columns_to_select(source_and_derived_column_names, null_column_names + hashed_column_names) | unique | list -%}\n{%- set derived_and_null_columns_to_select = automate_dv.process_columns_to_select(source_and_derived_column_names + null_column_names, hashed_column_names) | unique | list -%}\n{%- set final_columns_to_select = [] -%}\n\n{#- Include source columns in final column selection if true -#}\n{%- if include_source_columns -%}\n    {%- if automate_dv.is_nothing(derived_columns)\n           and automate_dv.is_nothing(null_columns)\n           and automate_dv.is_nothing(hashed_columns)\n           and automate_dv.is_nothing(ranked_columns) -%}\n        {%- set final_columns_to_select = final_columns_to_select + all_source_columns -%}\n    {%- else -%}\n        {#- Only include non-overriden columns if not just source columns -#}\n        {%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n    {%- endif -%}\n{%- endif %}\n\nWITH source_data AS (\n\n    SELECT\n\n    {{- \"\\n\\n    \" ~ automate_dv.print_list(list_to_print=all_source_columns, columns_to_escape=columns_to_escape) if all_source_columns else \" *\" }}\n\n    FROM {{ source_relation }}\n    {%- set last_cte = \"source_data\" %}\n)\n\n{%- if automate_dv.is_something(derived_columns) -%},\n\nderived_columns AS (\n\n    SELECT\n\n    {{ automate_dv.derive_columns(source_relation=source_relation, columns=derived_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"derived_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n)\n{%- endif -%}\n\n{% if automate_dv.is_something(null_columns) -%},\n\nnull_columns AS (\n\n    SELECT\n\n    {{ automate_dv.print_list(list_to_print=derived_columns_to_select, columns_to_escape=columns_to_escape) }}{{\",\" if automate_dv.is_something(derived_columns_to_select) else \"\"}}\n\n    {{ automate_dv.null_columns(source_relation=none, columns=null_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"null_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + null_column_names %}\n)\n{%- endif -%}\n\n\n{% if automate_dv.is_something(hashed_columns) -%},\n\nhashed_columns AS (\n\n    SELECT\n\n    {{ automate_dv.print_list(list_to_print=derived_and_null_columns_to_select, columns_to_escape=columns_to_escape) }},\n\n    {% set processed_hash_columns = automate_dv.process_hash_column_excludes(hashed_columns, all_source_columns) -%}\n    {{- automate_dv.hash_columns(columns=processed_hash_columns, columns_to_escape=columns_to_escape) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n)\n{%- endif -%}\n\n{% if automate_dv.is_something(ranked_columns) -%},\n\nranked_columns AS (\n\n    SELECT *,\n\n    {{ automate_dv.rank_columns(columns=ranked_columns) | indent(4) if automate_dv.is_something(ranked_columns) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"ranked_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + ranked_column_names %}\n)\n{%- endif -%}\n\n,\n\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ automate_dv.print_list(list_to_print=final_columns_to_select | unique | list, columns_to_escape=columns_to_escape) }}\n\n    FROM {{ last_cte }}\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.source_columns", "macro.automate_dv.process_columns_to_escape", "macro.automate_dv.extract_column_names", "macro.automate_dv.extract_null_column_names", "macro.automate_dv.process_columns_to_select", "macro.automate_dv.is_nothing", "macro.automate_dv.print_list", "macro.automate_dv.is_something", "macro.automate_dv.derive_columns", "macro.automate_dv.null_columns", "macro.automate_dv.process_hash_column_excludes", "macro.automate_dv.hash_columns", "macro.automate_dv.rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1065567, "supported_languages": null}, "macro.automate_dv.derive_columns": {"name": "derive_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.automate_dv.derive_columns", "macro_sql": "\n\n{%- macro derive_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('derive_columns', 'automate_dv')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1078138, "supported_languages": null}, "macro.automate_dv.default__derive_columns": {"name": "default__derive_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.automate_dv.default__derive_columns", "macro_sql": "\n\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\n\n{%- set exclude_columns = [] -%}\n{%- set include_columns = [] -%}\n{%- set src_columns = [] -%}\n{%- set der_columns = [] -%}\n\n{%- set source_cols = automate_dv.source_columns(source_relation=source_relation) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {#- Add aliases of derived columns to excludes and full SQL to includes -#}\n    {%- for derived_column in columns -%}\n        {%- set column_config = columns[derived_column] -%}\n\n        {%- if automate_dv.is_list(column_config) -%}\n            {%- set column_list = [] -%}\n\n            {%- for concat_component in column_config -%}\n                {%- set column_str = automate_dv.as_constant(concat_component) -%}\n                {%- do column_list.append(column_str) -%}\n            {%- endfor -%}\n\n            {%- set concat = automate_dv.concat_ws(column_list, \"||\") -%}\n            {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\n\n            {%- do der_columns.append(concat_string) -%}\n        {%- else -%}\n            {%- if column_config is mapping and column_config -%}\n                {%- set column_escape = column_config['escape'] -%}\n\n                {%- if automate_dv.is_list(column_config['source_column']) -%}\n                    {%- set column_list = [] -%}\n\n                    {%- for concat_component in column_config['source_column'] -%}\n                        {%- set column_str = automate_dv.as_constant(concat_component) -%}\n                        {%- if column_escape is true %}\n                            {%- set column_str = automate_dv.escape_column_names(column_str) -%}\n                        {% endif %}\n                        {%- do column_list.append(column_str) -%}\n                    {%- endfor -%}\n\n                    {%- set concat = automate_dv.concat_ws(column_list, \"||\") -%}\n                    {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\n\n                    {%- do der_columns.append(concat_string) -%}\n                {%- else -%}\n                    {%- set column_str = automate_dv.as_constant(column_config['source_column']) -%}\n                    {%- if column_escape is true -%}\n                        {%- do der_columns.append(automate_dv.escape_column_names(column_str) ~ \" AS \" ~ derived_column) -%}\n                    {%- else -%}\n                        {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set column_str = automate_dv.as_constant(column_config) -%}\n                {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\n            {%- endif -%}\n        {%- endif -%}\n\n        {%- do exclude_columns.append(derived_column) -%}\n\n    {%- endfor -%}\n\n    {#- Add all columns from source_model relation -#}\n    {%- if source_relation is defined and source_relation is not none -%}\n\n        {%- for col in source_cols -%}\n            {%- if col | lower not in exclude_columns | map('lower') | list -%}\n                {%- do src_columns.append(col) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\n    {%- set include_columns = src_columns + der_columns -%}\n    {%- set columns_to_escape = automate_dv.process_columns_to_escape(columns) | list -%}\n\n    {#- Print out all columns in includes -#}\n    {%- for col in include_columns -%}\n        {%- if col | lower in columns_to_escape | map('lower') | list -%}\n            {{- automate_dv.escape_column_name(col) -}}{{ \",\\n\" if not loop.last }}\n\n        {%- else -%}\n            {{- col -}}{{ \",\\n\" if not loop.last }}\n        {%- endif -%}\n    {%- endfor -%}\n\n{%- else -%}\n\n{%- if execute -%}\n\n{{ exceptions.raise_compiler_error(\"Invalid column configuration:\nexpected format, either: {'source_relation': Relation, 'columns': {column_name: column_value}}\nor: {'source_relation': Relation, 'columns': {column_name: {'source_column': column_value, 'escape': true / false}}}\ngot: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\n{%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.source_columns", "macro.automate_dv.is_list", "macro.automate_dv.as_constant", "macro.automate_dv.concat_ws", "macro.automate_dv.escape_column_names", "macro.automate_dv.process_columns_to_escape", "macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.112062, "supported_languages": null}, "macro.automate_dv.rank_columns": {"name": "rank_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/rank_columns.sql", "original_file_path": "macros/staging/rank_columns.sql", "unique_id": "macro.automate_dv.rank_columns", "macro_sql": "\n\n{%- macro rank_columns(columns=none) -%}\n\n    {{- adapter.dispatch('rank_columns', 'automate_dv')(columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1129165, "supported_languages": null}, "macro.automate_dv.default__rank_columns": {"name": "default__rank_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/rank_columns.sql", "original_file_path": "macros/staging/rank_columns.sql", "unique_id": "macro.automate_dv.default__rank_columns", "macro_sql": "\n\n{%- macro default__rank_columns(columns=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if columns[col] is mapping and columns[col].partition_by and columns[col].order_by -%}\n\n            {%- set order_by = columns[col].order_by -%}\n            {%- set partition_by = columns[col].partition_by -%}\n            {%- set dense_rank = columns[col].dense_rank -%}\n\n            {%- if automate_dv.is_nothing(dense_rank) %}\n                {%- set rank_type = \"RANK()\" -%}\n            {%- elif dense_rank is true -%}\n                {%- set rank_type = \"DENSE_RANK()\" -%}\n            {%- else -%}\n                {%- if execute -%}\n                    {%- do exceptions.raise_compiler_error('If dense_rank is provided, it must be true or false, not {}'.format(dense_rank)) -%}\n                {% endif %}\n            {%- endif -%}\n\n            {%- if automate_dv.is_list(order_by) -%}\n\n                {%- set order_by_str_lst = [] -%}\n\n                {% for order_by_col in order_by %}\n\n                    {%- if order_by_col is mapping %}\n                        {%- set column_name, direction = order_by_col.items()|first -%}\n                        {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\n                    {%- else -%}\n                        {%- set order_by_str = order_by_col -%}\n                    {%- endif -%}\n\n                    {%- do order_by_str_lst.append(order_by_str) -%}\n                {%- endfor -%}\n\n                {%- set order_by_str = order_by_str_lst | join(\", \") -%}\n\n            {%- else -%}\n\n                {%- if order_by is mapping %}\n                    {%- set column_name, direction = order_by.items()|first -%}\n                {%- else -%}\n                    {%- set column_name = order_by -%}\n                    {%- set direction = '' -%}\n                {%- endif -%}\n\n                {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\n            {%- endif -%}\n\n            {%- if automate_dv.is_list(partition_by) -%}\n                {%- set partition_by_str = partition_by | join(\", \") -%}\n            {%- else -%}\n                {%- set partition_by_str = partition_by -%}\n            {%- endif -%}\n\n            {{- \"{} OVER (PARTITION BY {} ORDER BY {}) AS {}\".format(rank_type, partition_by_str, order_by_str, col) | indent(4) -}}\n\n        {%- endif -%}\n\n        {{- \",\\n\" if not loop.last -}}\n    {%- endfor -%}\n\n{%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_nothing", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1156063, "supported_languages": null}, "macro.automate_dv.source_columns": {"name": "source_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/source_columns.sql", "original_file_path": "macros/staging/source_columns.sql", "unique_id": "macro.automate_dv.source_columns", "macro_sql": "\n\n{%- macro source_columns(source_relation=none) -%}\n\n    {%- if source_relation -%}\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\n\n        {%- set column_list = [] -%}\n\n        {%- for source_col in source_model_cols -%}\n            {%- do column_list.append(source_col.column) -%}\n        {%- endfor -%}\n\n        {%- do return(column_list) -%}\n    {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1162622, "supported_languages": null}, "macro.automate_dv.bridge_overlap_and_new_rows": {"name": "bridge_overlap_and_new_rows", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/bridge_shared.sql", "original_file_path": "macros/supporting/bridge_shared.sql", "unique_id": "macro.automate_dv.bridge_overlap_and_new_rows", "macro_sql": "\n\n{%- macro bridge_overlap_and_new_rows(src_pk, bridge_walk, source_model, new_as_of_dates_cte) -%}\n\nSELECT\n    {{ automate_dv.prefix([src_pk], 'a') }},\n    b.AS_OF_DATE,\n    {%- for bridge_step in bridge_walk.keys() -%}\n        {%- set link_table = bridge_walk[bridge_step]['link_table'] -%}\n        {%- set eff_sat_table = bridge_walk[bridge_step]['eff_sat_table'] -%}\n\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\n\n        {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\n        {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] -%}\n        {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\n\n        {%- set eff_sat_end_date = bridge_walk[bridge_step]['eff_sat_end_date'] -%}\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] %}\n\n        {{- '\\n   ' }} {{ link_table | lower }}.{{ link_pk }} AS {{ bridge_link_pk }},\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_end_date }} AS {{ bridge_end_date }},\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_load_date }} AS {{ bridge_load_date }}\n\n        {%- if not loop.last %}, {%- endif -%}\n\n    {% endfor %}\n\n    FROM {{ source_model }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n        ON (1=1)\n\n    {%- set loop_vars = namespace(last_link = '', last_link_fk = '') %}\n    {%- for bridge_step in bridge_walk.keys() -%}\n\n        {%- set current_link = bridge_walk[bridge_step]['link_table'] -%}\n        {%- set current_eff_sat = bridge_walk[bridge_step]['eff_sat_table'] -%}\n\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\n        {%- set link_fk1 = bridge_walk[bridge_step]['link_fk1'] -%}\n        {%- set link_fk2 = bridge_walk[bridge_step]['link_fk2'] -%}\n\n        {%- set eff_sat_pk = bridge_walk[bridge_step]['eff_sat_pk'] -%}\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] -%}\n\n    {%- if loop.first %}\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\n        ON {{ automate_dv.multikey(src_pk, prefix=['a', current_link | lower], condition='=') }}\n    {%- else %}\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\n        ON {{ loop_vars.last_link }}.{{ loop_vars.last_link_fk2 }} = {{ current_link | lower }}.{{ link_fk1 }}\n    {%- endif %}\n    INNER JOIN {{ ref(current_eff_sat) }} AS {{ current_eff_sat | lower }}\n        ON {{ current_eff_sat | lower }}.{{ eff_sat_pk }} = {{ current_link | lower }}.{{ link_pk }}\n        AND {{ current_eff_sat | lower }}.{{ eff_sat_load_date }} <= b.AS_OF_DATE\n        {%- set loop_vars.last_link = current_link | lower -%}\n        {%- set loop_vars.last_link_fk2 = link_fk2 -%}\n    {% endfor %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1210163, "supported_languages": null}, "macro.automate_dv.prefix": {"name": "prefix", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.automate_dv.prefix", "macro_sql": "\n\n{%- macro prefix(columns, prefix_str, alias_target) -%}\n\n    {{- adapter.dispatch('prefix', 'automate_dv')(columns=columns,\n                                               prefix_str=prefix_str,\n                                               alias_target=alias_target) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1221652, "supported_languages": null}, "macro.automate_dv.default__prefix": {"name": "default__prefix", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.automate_dv.default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\n\n    {%- set processed_columns = [] -%}\n\n    {%- if columns and prefix_str -%}\n\n        {%- for col in columns -%}\n\n            {%- if col | lower not in processed_columns | map('lower') | list -%}\n\n                {%- if col is mapping -%}\n\n                    {%- if alias_target == 'source' -%}\n\n                        {{- automate_dv.prefix([col['source_column']], prefix_str) -}}\n\n                        {%- do processed_columns.append(col['source_column']) -%}\n\n                    {%- elif alias_target == 'target' -%}\n\n                        {{- automate_dv.prefix([col['alias']], prefix_str) -}}\n\n                         {%- do processed_columns.append(col['alias']) -%}\n\n                    {%- else -%}\n\n                        {{- automate_dv.prefix([col['source_column']], prefix_str) -}}\n\n                        {%- do processed_columns.append(col['source_column']) -%}\n\n                    {%- endif -%}\n\n                    {%- if not loop.last -%} , {% endif %}\n\n                {%- else -%}\n\n                    {%- if col is iterable and col is not string -%}\n\n                        {{- automate_dv.prefix(col, prefix_str) -}}\n\n                        {%- do processed_columns.append(col) -%}\n\n                    {%- elif col is not none -%}\n\n                        {{- prefix_str}}.{{col.strip() -}}\n\n                        {%- do processed_columns.append(col) -%}\n                    {% else %}\n\n                        {%- if execute -%}\n                            {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                    {{- ', ' if not loop.last -}}\n\n                {%- endif -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- else -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1243675, "supported_languages": null}, "macro.automate_dv.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.automate_dv.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'automate_dv')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1247778, "supported_languages": null}, "macro.automate_dv.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.automate_dv.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n    {%- set query_results = dbt_utils.get_query_results_as_dict(query) -%}\n    {%- set query_results_processed = {} -%}\n\n    {% for k, v in query_results.items() %}\n        {% do query_results_processed.update({k.upper(): v}) %}\n    {% endfor %}\n\n    {{ return(query_results_processed) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.125557, "supported_languages": null}, "macro.automate_dv.as_of_date_window": {"name": "as_of_date_window", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/as_of_date_window.sql", "original_file_path": "macros/supporting/as_of_date_window.sql", "unique_id": "macro.automate_dv.as_of_date_window", "macro_sql": "\n\n{%- macro as_of_date_window(src_pk, src_ldts, stage_tables_ldts, source_model) -%}\n\nlast_safe_load_datetime AS (\n    SELECT MIN(LOAD_DATETIME) AS LAST_SAFE_LOAD_DATETIME\n    FROM (\n\n        {% for stg in stage_tables_ldts -%}\n            {%- set stage_ldts = stage_tables_ldts[stg] -%}\n            SELECT MIN({{ stage_ldts }}) AS LOAD_DATETIME FROM {{ ref(stg) }}\n            {% if not loop.last %} UNION ALL {% endif %}\n        {% endfor -%}\n\n    ) AS l\n),\n\nas_of_grain_old_entries AS (\n    SELECT DISTINCT AS_OF_DATE\n    FROM {{ this }}\n),\n\nas_of_grain_lost_entries AS (\n    SELECT a.AS_OF_DATE\n    FROM as_of_grain_old_entries AS a\n    LEFT OUTER JOIN as_of_dates AS b\n        ON a.AS_OF_DATE = b.AS_OF_DATE\n    WHERE b.AS_OF_DATE IS NULL\n),\n\nas_of_grain_new_entries AS (\n    SELECT a.AS_OF_DATE\n    FROM as_of_dates AS a\n    LEFT OUTER JOIN as_of_grain_old_entries AS b\n        ON a.AS_OF_DATE = b.AS_OF_DATE\n    WHERE b.AS_OF_DATE IS NULL\n),\n\nmin_date AS (\n    SELECT MIN(AS_OF_DATE) AS MIN_DATE\n    FROM as_of_dates\n),\n\nbackfill_as_of AS (\n    SELECT AS_OF_DATE\n    FROM as_of_dates AS a\n\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON a.AS_OF_DATE < l.LAST_SAFE_LOAD_DATETIME\n    {% else %}\n    WHERE a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    {%- endif %}\n),\n\nnew_rows_pks AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'h') }}\n    FROM {{ source_model }} AS h\n\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON h.{{ src_ldts }} >= l.LAST_SAFE_LOAD_DATETIME\n    {% else %}\n    WHERE h.{{ src_ldts }} >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    {%- endif %}\n),\n\nnew_rows_as_of AS (\n    SELECT AS_OF_DATE\n    FROM as_of_dates AS a\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON a.AS_OF_DATE >= l.LAST_SAFE_LOAD_DATETIME\n    UNION DISTINCT\n    {% else %}\n    WHERE a.AS_OF_DATE >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    UNION\n    {%- endif %}\n    SELECT as_of_date\n    FROM as_of_grain_new_entries\n),\n\noverlap_pks AS (\n    SELECT a.*\n    FROM {{ this }} AS a\n    INNER JOIN {{ source_model }} as b\n        ON {{ automate_dv.multikey(src_pk, prefix=['a','b'], condition='=') }}\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN min_date\n    ON 1 = 1\n    INNER JOIN last_safe_load_datetime\n    ON 1 = 1\n\tLEFT OUTER JOIN as_of_grain_lost_entries\n\tON a.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\n    WHERE a.AS_OF_DATE >= min_date.MIN_DATE\n        AND a.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\n    {% else %}\n    WHERE a.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\n        AND a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n        AND a.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\n    {%- endif %}\n),\n\noverlap_as_of AS (\n    SELECT p.AS_OF_DATE\n    FROM as_of_dates AS p\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN min_date\n    ON 1 = 1\n    INNER JOIN last_safe_load_datetime\n    ON 1 = 1\n\tLEFT OUTER JOIN as_of_grain_lost_entries\n\tON p.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\n    WHERE p.AS_OF_DATE >= min_date.MIN_DATE\n        AND p.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\n    {% else %}\n    WHERE p.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\n        AND p.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n        AND p.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\n    {% endif %}\n)\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.127626, "supported_languages": null}, "macro.automate_dv.hash": {"name": "hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.hash", "macro_sql": "\n\n{%- macro hash(columns=none, alias=none, is_hashdiff=false, columns_to_escape=none) -%}\n\n    {%- if is_hashdiff is none -%}\n        {%- set is_hashdiff = false -%}\n    {%- endif -%}\n\n    {{- adapter.dispatch('hash', 'automate_dv')(columns=columns, alias=alias,\n                                             is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1290917, "supported_languages": null}, "macro.automate_dv.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.default__hash", "macro_sql": "\n\n{%- macro default__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n{%- set hash = var('hash', 'md5') -%}\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hash_alg = automate_dv.select_hash_alg(hash) -%}\n\n{%- set standardise = automate_dv.standard_column_wrapper() %}\n\n{#- Alpha sort columns before hashing if a hashdiff -#}\n{%- if is_hashdiff and automate_dv.is_list(columns) -%}\n    {%- set columns = columns|sort -%}\n{%- endif -%}\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set column_str = automate_dv.as_constant(columns) -%}\n\n    {%- if automate_dv.is_something(columns_to_escape) -%}\n        {%- if column_str in columns_to_escape -%}\n            {%- set column_str = automate_dv.escape_column_name(column_str) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', standardise | replace('[EXPRESSION]', column_str)) }} AS {{ alias | indent(4) }}\n\n{#- Else a list of columns to hash -#}\n{%- else -%}\n\n    {%- set all_null = [] -%}\n    {%- set processed_columns = [] -%}\n\n    {%- for column in columns -%}\n        {%- if automate_dv.is_something(columns_to_escape) -%}\n            {%- if column in columns_to_escape -%}\n                {%- set column = automate_dv.escape_column_name(column) -%}\n            {%- endif -%}\n        {%- endif -%}\n\n        {%- set column_str = automate_dv.as_constant(column) -%}\n\n        {%- set column_expression = automate_dv.null_expression(column_str) -%}\n\n        {%- do all_null.append(null_placeholder_string) -%}\n        {%- do processed_columns.append(column_expression) -%}\n\n    {% endfor -%}\n\n    {% if not is_hashdiff -%}\n\n        {%- set concat_sql -%}\n        NULLIF({{ automate_dv.concat_ws(processed_columns, separator=concat_string) -}} {{ ', ' -}}\n               '{{ all_null | join(concat_string) }}')\n        {%- endset -%}\n\n        {%- set hashed_column -%}\n        {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', concat_sql) }} AS {{ alias }}\n        {%- endset -%}\n\n    {%- else -%}\n        {% if automate_dv.is_list(processed_columns) and processed_columns | length > 1 %}\n            {%- set hashed_column -%}\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', automate_dv.concat_ws(processed_columns, separator=concat_string)) }} AS {{ alias }}\n            {%- endset -%}\n        {%- else -%}\n            {%- set hashed_column -%}\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', processed_columns[0]) }} AS {{ alias }}\n            {%- endset -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {{ hashed_column }}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.select_hash_alg", "macro.automate_dv.standard_column_wrapper", "macro.automate_dv.is_list", "macro.automate_dv.as_constant", "macro.automate_dv.is_something", "macro.automate_dv.escape_column_name", "macro.automate_dv.null_expression", "macro.automate_dv.concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.132306, "supported_languages": null}, "macro.automate_dv.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.bigquery__hash", "macro_sql": "{%- macro bigquery__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1326184, "supported_languages": null}, "macro.automate_dv.sqlserver__hash": {"name": "sqlserver__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.sqlserver__hash", "macro_sql": "{%- macro sqlserver__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1328976, "supported_languages": null}, "macro.automate_dv.postgres__hash": {"name": "postgres__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.postgres__hash", "macro_sql": "{%- macro postgres__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1332738, "supported_languages": null}, "macro.automate_dv.databricks__hash": {"name": "databricks__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.databricks__hash", "macro_sql": "{%- macro databricks__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1336076, "supported_languages": null}, "macro.automate_dv.max_datetime": {"name": "max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.max_datetime", "macro_sql": "\n\n{%- macro max_datetime() -%}\n\n    {%- do return(adapter.dispatch('max_datetime', 'automate_dv')()) -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1340594, "supported_languages": null}, "macro.automate_dv.default__max_datetime": {"name": "default__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.default__max_datetime", "macro_sql": "\n\n{%- macro default__max_datetime() %}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1342626, "supported_languages": null}, "macro.automate_dv.sqlserver__max_datetime": {"name": "sqlserver__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.sqlserver__max_datetime", "macro_sql": "{%- macro sqlserver__max_datetime() -%}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.9999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1344543, "supported_languages": null}, "macro.automate_dv.bigquery__max_datetime": {"name": "bigquery__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() -%}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.134647, "supported_languages": null}, "macro.automate_dv.postgres__max_datetime": {"name": "postgres__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.postgres__max_datetime", "macro_sql": "{%- macro postgres__max_datetime() %}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999')) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1348367, "supported_languages": null}, "macro.automate_dv.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.automate_dv.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{- return(adapter.dispatch('type_timestamp', 'automate_dv')()) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1351445, "supported_languages": null}, "macro.automate_dv.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.automate_dv.default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\n    TIMESTAMP_NTZ\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.135247, "supported_languages": null}, "macro.automate_dv.sqlserver__type_timestamp": {"name": "sqlserver__type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.automate_dv.sqlserver__type_timestamp", "macro_sql": "{%- macro sqlserver__type_timestamp() -%}\n    DATETIME2\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1353447, "supported_languages": null}, "macro.automate_dv.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.type_string", "macro_sql": "\n\n{%- macro type_string(is_hash=false, char_length=255) -%}\n  {{- return(adapter.dispatch('type_string', 'automate_dv')(is_hash=is_hash, char_length=char_length)) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1359649, "supported_languages": null}, "macro.automate_dv.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.default__type_string", "macro_sql": "{%- macro default__type_string(is_hash, char_length) -%}\n    VARCHAR\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1360974, "supported_languages": null}, "macro.automate_dv.bigquery__type_string": {"name": "bigquery__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string(is_hash, char_length) -%}\n    STRING\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.13622, "supported_languages": null}, "macro.automate_dv.sqlserver__type_string": {"name": "sqlserver__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.sqlserver__type_string", "macro_sql": "{%- macro sqlserver__type_string(is_hash, char_length) -%}\n    VARCHAR\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.13634, "supported_languages": null}, "macro.automate_dv.databricks__type_string": {"name": "databricks__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.databricks__type_string", "macro_sql": "{%- macro databricks__type_string(is_hash=false, char_length=255) -%}\n    {%- if is_hash -%}\n        {%- if var('hash', 'MD5') | lower == 'md5' -%}\n            VARCHAR(16)\n        {%- elif var('hash', 'MD5') | lower == 'sha' -%}\n            VARCHAR(32)\n        {%- endif -%}\n    {%- else -%}\n        VARCHAR({{ char_length }})\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.136989, "supported_languages": null}, "macro.automate_dv.type_binary": {"name": "type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.type_binary", "macro_sql": "\n\n{%- macro type_binary() -%}\n  {{- return(adapter.dispatch('type_binary', 'automate_dv')()) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1374156, "supported_languages": null}, "macro.automate_dv.default__type_binary": {"name": "default__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.default__type_binary", "macro_sql": "{%- macro default__type_binary() -%}\n    {%- if var('hash', 'MD5') | lower == 'md5' -%}\n        BINARY(16)\n    {%- elif var('hash', 'MD5') | lower == 'sha' -%}\n        BINARY(32)\n    {%- else -%}\n        BINARY(16)\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1377726, "supported_languages": null}, "macro.automate_dv.bigquery__type_binary": {"name": "bigquery__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.bigquery__type_binary", "macro_sql": "{%- macro bigquery__type_binary() -%}\n    STRING\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1378746, "supported_languages": null}, "macro.automate_dv.postgres__type_binary": {"name": "postgres__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.postgres__type_binary", "macro_sql": "{%- macro postgres__type_binary() -%}\n    BYTEA\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1379726, "supported_languages": null}, "macro.automate_dv.databricks__type_binary": {"name": "databricks__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.databricks__type_binary", "macro_sql": "{%- macro databricks__type_binary() -%}\n    STRING\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1384215, "supported_languages": null}, "macro.automate_dv.cast_datetime": {"name": "cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.cast_datetime", "macro_sql": "\n\n{%- macro cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if as_string -%}\n        {%- set column_str -%} '{{ column_str }}' {%- endset -%}\n    {%- endif -%}\n\n    {%- set date_type = date_type | lower -%}\n\n    {{ return(adapter.dispatch('cast_datetime', 'automate_dv')(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.snowflake__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.139445, "supported_languages": null}, "macro.automate_dv.snowflake__cast_datetime": {"name": "snowflake__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.snowflake__cast_datetime", "macro_sql": "{%- macro snowflake__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if date_type == 'timestamp_tz' -%}\n        TO_TIMESTAMP_TZ({{ column_str }})\n    {%- elif date_type == 'timestamp_ltz' -%}\n        TO_TIMESTAMP_LTZ({{ column_str }})\n    {%- elif date_type == 'timestamp_ntz' -%}\n        TO_TIMESTAMP_NTZ({{ column_str }})\n    {%- else -%}\n        TO_TIMESTAMP({{ column_str }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1402824, "supported_languages": null}, "macro.automate_dv.sqlserver__cast_datetime": {"name": "sqlserver__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.sqlserver__cast_datetime", "macro_sql": "{%- macro sqlserver__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    CONVERT(DATETIME2, {{ column_str }})\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.140578, "supported_languages": null}, "macro.automate_dv.bigquery__cast_datetime": {"name": "bigquery__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.bigquery__cast_datetime", "macro_sql": "{%- macro bigquery__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if date_type == 'timestamp' -%}\n        PARSE_TIMESTAMP('%F %H:%M:%E6S', {{ column_str }})\n    {%- else -%}\n        PARSE_DATETIME('%F %H:%M:%E6S', {{ column_str }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.14098, "supported_languages": null}, "macro.automate_dv.databricks__cast_datetime": {"name": "databricks__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.databricks__cast_datetime", "macro_sql": "{%- macro databricks__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {{ automate_dv.snowflake__cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.snowflake__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1412976, "supported_languages": null}, "macro.automate_dv.postgres__cast_datetime": {"name": "postgres__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.postgres__cast_datetime", "macro_sql": "{%- macro postgres__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    to_char(timestamp {{ column_str }}, 'YYYY-MM-DD HH24:MI:SS.MS')::timestamp\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1415832, "supported_languages": null}, "macro.automate_dv.cast_binary": {"name": "cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.cast_binary", "macro_sql": "\n\n{%- macro cast_binary(column_str, alias=none, quote=true) -%}\n    {{ return(adapter.dispatch('cast_binary', 'automate_dv')(column_str=column_str, alias=alias, quote=quote)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1421993, "supported_languages": null}, "macro.automate_dv.default__cast_binary": {"name": "default__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.default__cast_binary", "macro_sql": "{%- macro default__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {%- if quote -%}\n        CAST('{{ column_str }}' AS {{ automate_dv.type_binary() }})\n    {%- else -%}\n        CAST({{ column_str }} AS {{ automate_dv.type_binary() }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1427727, "supported_languages": null}, "macro.automate_dv.sqlserver__cast_binary": {"name": "sqlserver__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.sqlserver__cast_binary", "macro_sql": "{%- macro sqlserver__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {%- if quote -%}\n        CONVERT({{ automate_dv.type_binary() }}, '{{ column_str }}', 2)\n    {%- else -%}\n        CONVERT({{ automate_dv.type_binary() }}, {{ column_str }}, 2)\n    {%- endif -%}\n\n    {% if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1432486, "supported_languages": null}, "macro.automate_dv.bigquery__cast_binary": {"name": "bigquery__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.bigquery__cast_binary", "macro_sql": "{%- macro bigquery__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {{ automate_dv.default__cast_binary(column_str=column_str, alias=alias, quote=quote) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1436646, "supported_languages": null}, "macro.automate_dv.cast_date": {"name": "cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.cast_date", "macro_sql": "\n\n{%- macro cast_date(column_str, as_string=false, datetime=false, alias=none, date_type=none) -%}\n    {%- if datetime -%}\n        {{- automate_dv.cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type) -}}\n    {%- else -%}\n        {{ return(adapter.dispatch('cast_date', 'automate_dv')(column_str=column_str, as_string=as_string, alias=alias)) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.cast_datetime", "macro.automate_dv.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1447387, "supported_languages": null}, "macro.automate_dv.snowflake__cast_date": {"name": "snowflake__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.snowflake__cast_date", "macro_sql": "{%- macro snowflake__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        TO_DATE({{ column_str }})\n    {%- else -%}\n        TO_DATE('{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.145131, "supported_languages": null}, "macro.automate_dv.sqlserver__cast_date": {"name": "sqlserver__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.sqlserver__cast_date", "macro_sql": "{%- macro sqlserver__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        CONVERT(DATE, {{ column_str }})\n    {%- else -%}\n        CONVERT(DATE, '{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1455112, "supported_languages": null}, "macro.automate_dv.bigquery__cast_date": {"name": "bigquery__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.bigquery__cast_date", "macro_sql": "{%- macro bigquery__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        DATE({{ column_str }})\n    {%- else -%}\n        DATE('{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1458867, "supported_languages": null}, "macro.automate_dv.databricks__cast_date": {"name": "databricks__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.databricks__cast_date", "macro_sql": "{%- macro databricks__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {{ automate_dv.snowflake__cast_date(column_str=column_str, as_string=as_string, alias=alias)}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1461709, "supported_languages": null}, "macro.automate_dv.postgres__cast_date": {"name": "postgres__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.postgres__cast_date", "macro_sql": "{%- macro postgres__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if as_string -%}\n    TO_DATE('{{ column_str }}', 'YYY-MM-DD')\n    {%- else -%}\n    TO_DATE({{ column_str }}::VARCHAR, 'YYY-MM-DD')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1465526, "supported_languages": null}, "macro.automate_dv.select_hash_alg": {"name": "select_hash_alg", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.select_hash_alg", "macro_sql": "\n\n{%- macro select_hash_alg(hash) -%}\n\n    {%- set available_hash_algorithms = ['md5', 'sha'] -%}\n\n    {%- if execute and hash | lower not in available_hash_algorithms %}\n        {%- do exceptions.warn(\"Configured hash ('{}') not recognised. Must be one of: {} (case insensitive)\".format(hash | lower, available_hash_algorithms | join(', '))) -%}\n    {%- endif -%}\n\n    {%- if hash | lower == 'md5' -%}\n        {%- do return(automate_dv.hash_alg_md5()) -%}\n    {%- elif hash | lower == 'sha' -%}\n        {%- do return(automate_dv.hash_alg_sha256()) -%}\n    {%- else -%}\n        {%- do return(automate_dv.hash_alg_md5()) -%}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.hash_alg_md5", "macro.automate_dv.hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1484375, "supported_languages": null}, "macro.automate_dv.hash_alg_md5": {"name": "hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.hash_alg_md5", "macro_sql": "\n\n{%- macro hash_alg_md5() -%}\n\n    {{- adapter.dispatch('hash_alg_md5', 'automate_dv')() -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__hash_alg_md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1486518, "supported_languages": null}, "macro.automate_dv.default__hash_alg_md5": {"name": "default__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.default__hash_alg_md5", "macro_sql": "{% macro default__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary('MD5_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1489086, "supported_languages": null}, "macro.automate_dv.bigquery__hash_alg_md5": {"name": "bigquery__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.bigquery__hash_alg_md5", "macro_sql": "{% macro bigquery__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary('UPPER(TO_HEX(MD5([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1493366, "supported_languages": null}, "macro.automate_dv.sqlserver__hash_alg_md5": {"name": "sqlserver__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.sqlserver__hash_alg_md5", "macro_sql": "{% macro sqlserver__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary(\"HASHBYTES('MD5', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.149603, "supported_languages": null}, "macro.automate_dv.postgres__hash_alg_md5": {"name": "postgres__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.postgres__hash_alg_md5", "macro_sql": "{% macro postgres__hash_alg_md5() -%}\n\n    {% do return(\"DECODE(MD5([HASH_STRING_PLACEHOLDER]), 'hex')\") %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1497796, "supported_languages": null}, "macro.automate_dv.databricks__hash_alg_md5": {"name": "databricks__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.databricks__hash_alg_md5", "macro_sql": "{% macro databricks__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary('UPPER(MD5([HASH_STRING_PLACEHOLDER]))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.150136, "supported_languages": null}, "macro.automate_dv.hash_alg_sha256": {"name": "hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.hash_alg_sha256", "macro_sql": "\n\n\n{%- macro hash_alg_sha256() -%}\n\n    {{- adapter.dispatch('hash_alg_sha256', 'automate_dv')() -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1504655, "supported_languages": null}, "macro.automate_dv.default__hash_alg_sha256": {"name": "default__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.default__hash_alg_sha256", "macro_sql": "{% macro default__hash_alg_sha256() -%}\n\n    {% do return(automate_dv.cast_binary('SHA2_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1509094, "supported_languages": null}, "macro.automate_dv.bigquery__hash_alg_sha256": {"name": "bigquery__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.bigquery__hash_alg_sha256", "macro_sql": "{% macro bigquery__hash_alg_sha256() -%}\n\n    {% do return(automate_dv.cast_binary('UPPER(TO_HEX(SHA256([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.151224, "supported_languages": null}, "macro.automate_dv.sqlserver__hash_alg_sha256": {"name": "sqlserver__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.sqlserver__hash_alg_sha256", "macro_sql": "{% macro sqlserver__hash_alg_sha256() -%}\n\n    {% do return(automate_dv.cast_binary(\"HASHBYTES('SHA2_256', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1514583, "supported_languages": null}, "macro.automate_dv.postgres__hash_alg_sha256": {"name": "postgres__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.postgres__hash_alg_sha256", "macro_sql": "{% macro postgres__hash_alg_sha256() -%}\n    {#- * MD5 is simple function call to md5(val) -#}\n    {#- * SHA256 needs input cast to BYTEA and then its BYTEA result encoded as hex text output -#}\n    {#- e.g. ENCODE(SHA256(CAST(val AS BYTEA)), 'hex') -#}\n    {#- Ref: https://www.postgresql.org/docs/11/functions-binarystring.html  -#}\n\n    {% do return(\"SHA256(CAST([HASH_STRING_PLACEHOLDER] AS BYTEA))\")  %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1516612, "supported_languages": null}, "macro.automate_dv.databricks__hash_alg_sha256": {"name": "databricks__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.databricks__hash_alg_sha256", "macro_sql": "{% macro databricks__hash_alg_sha256() -%}\n\n    {% do return('UPPER(SHA2([HASH_STRING_PLACEHOLDER], 256))') %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.151826, "supported_languages": null}, "macro.automate_dv.null_expression": {"name": "null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.null_expression", "macro_sql": "\n\n{%- macro null_expression(column_str) -%}\n\n    {%- if execute and not column_str -%}\n        {%- do exceptions.raise_compiler_error(\"Must provide a column_str argument to null expression macro!\") -%}\n    {%- endif -%}\n\n    {%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n    {%- set standardise = automate_dv.standard_column_wrapper() %}\n\n    {{ return(adapter.dispatch('null_expression', 'automate_dv')(standardise=standardise, column_str=column_str, null_placeholder_string=null_placeholder_string)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.standard_column_wrapper", "macro.automate_dv.default__null_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.15279, "supported_languages": null}, "macro.automate_dv.default__null_expression": {"name": "default__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.default__null_expression", "macro_sql": "\n\n\n{%- macro default__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        IFNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string}}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1531832, "supported_languages": null}, "macro.automate_dv.postgres__null_expression": {"name": "postgres__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.postgres__null_expression", "macro_sql": "{%- macro postgres__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        COALESCE({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1535335, "supported_languages": null}, "macro.automate_dv.sqlserver__null_expression": {"name": "sqlserver__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.sqlserver__null_expression", "macro_sql": "{%- macro sqlserver__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        ISNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.153894, "supported_languages": null}, "macro.automate_dv.standard_column_wrapper": {"name": "standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.standard_column_wrapper", "macro_sql": "\n\n{%- macro standard_column_wrapper() -%}\n\n    {%- set hash_content_casing = var('hash_content_casing', 'upper') -%}\n    {%- set available_case_configs = ['upper', 'disabled'] -%}\n\n    {%- if execute and (hash_content_casing | lower) not in available_case_configs  -%}\n        {%- do exceptions.raise_compiler_error(\"Must provide a valid casing config for hash_content_casing.\n                                                '{}' was provided. Can be one of {} (case insensitive)\".format(\n                                                                                hash_content_casing,\n                                                                                available_case_configs | join(','))) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('standard_column_wrapper', 'automate_dv')(hash_content_casing=hash_content_casing | lower)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__standard_column_wrapper"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1550684, "supported_languages": null}, "macro.automate_dv.default__standard_column_wrapper": {"name": "default__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.default__standard_column_wrapper", "macro_sql": "\n\n\n{%- macro default__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }})), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1556306, "supported_languages": null}, "macro.automate_dv.databricks__standard_column_wrapper": {"name": "databricks__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.databricks__standard_column_wrapper", "macro_sql": "{%- macro databricks__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string(is_hash=true) }}))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string(is_hash=true) }})), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1561341, "supported_languages": null}, "macro.automate_dv.sqlserver__standard_column_wrapper": {"name": "sqlserver__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.sqlserver__standard_column_wrapper", "macro_sql": "{%- macro sqlserver__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}(MAX)))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}(MAX))), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1565692, "supported_languages": null}, "macro.automate_dv.null_ghost": {"name": "null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.null_ghost", "macro_sql": "\n\n{%- macro null_ghost(datatype, alias) -%}\n    {{ adapter.dispatch('null_ghost', 'automate_dv')(datatype=datatype, alias=alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.157013, "supported_languages": null}, "macro.automate_dv.default__null_ghost": {"name": "default__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.default__null_ghost", "macro_sql": "{%- macro default__null_ghost(datatype, alias) -%}\n    NULL AS {{alias}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1571543, "supported_languages": null}, "macro.automate_dv.bigquery__null_ghost": {"name": "bigquery__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.bigquery__null_ghost", "macro_sql": "{% macro bigquery__null_ghost(datatype, alias) -%}\n    CAST(NULL AS {{datatype}}) AS {{alias}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1573093, "supported_languages": null}, "macro.automate_dv.postgres__null_ghost": {"name": "postgres__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.postgres__null_ghost", "macro_sql": "{%- macro postgres__null_ghost(datatype, alias) -%}\n    {{ automate_dv.bigquery__null_ghost(datatype, alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1574903, "supported_languages": null}, "macro.automate_dv.sqlserver__null_ghost": {"name": "sqlserver__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.sqlserver__null_ghost", "macro_sql": "{%- macro sqlserver__null_ghost(datatype, alias) -%}\n    {{ automate_dv.bigquery__null_ghost(datatype, alias) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.157672, "supported_languages": null}, "macro.automate_dv.date_ghost": {"name": "date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/date_ghost.sql", "original_file_path": "macros/supporting/ghost_records/date_ghost.sql", "unique_id": "macro.automate_dv.date_ghost", "macro_sql": "\n\n{%- macro date_ghost(date_type, alias) -%}\n    {{ adapter.dispatch('date_ghost', 'automate_dv')(date_type=date_type, alias=alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__date_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1581776, "supported_languages": null}, "macro.automate_dv.default__date_ghost": {"name": "default__date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/date_ghost.sql", "original_file_path": "macros/supporting/ghost_records/date_ghost.sql", "unique_id": "macro.automate_dv.default__date_ghost", "macro_sql": "{%- macro default__date_ghost(date_type, alias=none) -%}\n\n        {%- if date_type == 'date' -%}\n            {{ automate_dv.cast_date('1900-01-01', as_string=true, datetime=false, alias=alias) }}\n        {%- else -%}\n            {{ automate_dv.cast_date('1900-01-01 00:00:00', as_string=true, datetime=true, alias=alias, date_type=date_type) }}\n        {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1586792, "supported_languages": null}, "macro.automate_dv.postgres__date_ghost": {"name": "postgres__date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/date_ghost.sql", "original_file_path": "macros/supporting/ghost_records/date_ghost.sql", "unique_id": "macro.automate_dv.postgres__date_ghost", "macro_sql": "{%- macro postgres__date_ghost(date_type, alias=none) -%}\n\n    {%- if date_type == 'date' -%}\n        {{ automate_dv.cast_date('1900-01-01', as_string=true, datetime=false, alias=alias) }}\n    {%- else -%}\n        to_char(timestamp '1900-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.MS')::timestamp {%- if alias %} AS {{alias}}{%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1590984, "supported_languages": null}, "macro.automate_dv.binary_ghost": {"name": "binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.automate_dv.binary_ghost", "macro_sql": "\n\n{%- macro binary_ghost(alias, hash) -%}\n    {{ adapter.dispatch('binary_ghost', 'automate_dv')(alias=alias, hash=hash) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__binary_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1596088, "supported_languages": null}, "macro.automate_dv.default__binary_ghost": {"name": "default__binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.automate_dv.default__binary_ghost", "macro_sql": "{%- macro default__binary_ghost(alias, hash) -%}\n\n    {%- if hash | lower == 'md5' -%}\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\n    {%- elif hash | lower == 'sha' -%}\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 64) | join (''), alias=alias, quote=true) }}\n    {%- else -%}\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1604583, "supported_languages": null}, "macro.automate_dv.sqlserver__binary_ghost": {"name": "sqlserver__binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.automate_dv.sqlserver__binary_ghost", "macro_sql": "{%- macro sqlserver__binary_ghost(alias, hash) -%}\n    {%- if hash | lower == 'md5' -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(16)), 16) AS BINARY(16))\n\t{%- elif hash | lower == 'sha' -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(32)), 32) AS BINARY(32))\n    {%- else -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(16)), 16) AS BINARY(16))\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.160836, "supported_languages": null}, "macro.automate_dv.create_ghost_record": {"name": "create_ghost_record", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/create_ghost_record.sql", "original_file_path": "macros/supporting/ghost_records/create_ghost_record.sql", "unique_id": "macro.automate_dv.create_ghost_record", "macro_sql": "\n\n{%- macro create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('create_ghost_record', 'automate_dv')(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                                            src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                                            src_eff=src_eff, src_ldts=src_ldts,\n                                                            src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__create_ghost_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.161782, "supported_languages": null}, "macro.automate_dv.default__create_ghost_record": {"name": "default__create_ghost_record", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/create_ghost_record.sql", "original_file_path": "macros/supporting/ghost_records/create_ghost_record.sql", "unique_id": "macro.automate_dv.default__create_ghost_record", "macro_sql": "{%- macro default__create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set hash = var('hash', 'MD5') -%}\n{%- set source_str = var('system_record_value', 'AUTOMATE_DV_SYSTEM') -%}\n{%- set columns = adapter.get_columns_in_relation(ref(source_model)) -%}\n{%- set col_definitions = [] -%}\n\n{%- set string_columns = [src_payload] -%}\n\n{%- if src_extra_columns != none -%}\n    {%- do string_columns.append(src_extra_columns) -%}\n{%- endif -%}\n\n{%- set string_columns = automate_dv.expand_column_list(string_columns) -%}\n\n{%- for col in columns -%}\n\n    {%- set col_name = col.column -%}\n\n    {%- if ((col_name | lower) == (src_pk | lower)) or ((col_name | lower) == (src_hashdiff | lower)) -%}\n        {%- set col_sql = automate_dv.binary_ghost(alias=col_name, hash=hash) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif automate_dv.is_something(src_hashdiff['source_column'] | default(none)) and ((src_hashdiff['source_column'] | lower) == (col_name | lower)) -%}\n        {%- set col_sql = automate_dv.binary_ghost(alias=src_hashdiff['source_column'], hash=hash) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif ((col_name | lower) == (src_eff | lower)) or ((col_name | lower) == (src_ldts | lower))-%}\n        {% set col_sql = automate_dv.date_ghost(date_type = (col.dtype | lower), alias=col_name) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif (col_name | lower) == (src_source | lower) -%}\n        {%- set col_sql -%}\n            CAST('{{ source_str }}' AS {{ col.dtype }}) AS {{ src_source }}\n        {%- endset -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif (col_name | lower) is in (string_columns | map('lower') | list) -%}\n        {% set col_sql = automate_dv.null_ghost(col.dtype, col_name) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\nSELECT\n    {% for col in col_definitions -%}\n    {{ col }}\n    {%- if not loop.last -%},\n    {% endif %}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.binary_ghost", "macro.automate_dv.is_something", "macro.automate_dv.date_ghost", "macro.automate_dv.null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1649728, "supported_languages": null}, "macro.automate_dv.materialization_bridge_incremental_default": {"name": "materialization_bridge_incremental_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_bridge_materialization.sql", "original_file_path": "macros/materialisations/incremental_bridge_materialization.sql", "unique_id": "macro.automate_dv.materialization_bridge_incremental_default", "macro_sql": "\n\n{%- materialization bridge_incremental, default -%}\n\n  {%- set full_refresh_mode = should_full_refresh() -%}\n\n  {% if target.type == \"sqlserver\" %}\n      {%- set target_relation = this.incorporate(type='table') -%}\n  {%  else %}\n      {%- set target_relation = this -%}\n  {% endif %}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {%- set to_drop = [] -%}\n  {%- if existing_relation is none -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\n      {%- do adapter.drop_relation(backup_relation) -%}\n\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n      {%- do to_drop.append(backup_relation) -%}\n  {%- else -%}\n\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\n      {%- do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) -%}\n      {%- set build_sql = automate_dv.incremental_bridge_replace(tmp_relation, target_relation) -%}\n{%- endif -%}\n\n  {%- call statement(\"main\") -%}\n      {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {%- do adapter.commit() -%}\n\n  {%- for rel in to_drop -%}\n      {%- do adapter.drop_relation(rel) -%}\n  {%- endfor -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.automate_dv.incremental_bridge_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.167802, "supported_languages": ["sql"]}, "macro.automate_dv.check_placeholder": {"name": "check_placeholder", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/shared_helpers.sql", "original_file_path": "macros/materialisations/shared_helpers.sql", "unique_id": "macro.automate_dv.check_placeholder", "macro_sql": "\n\n{%- macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') -%}\n\n    {%- if model_sql.find(placeholder) == -1 -%}\n    {%- set error_message -%}\n    Model '{{ model.unique_id }}' does not include the required string '{{ placeholder }}' in its sql\n        {%- endset -%}\n        {{- exceptions.raise_compiler_error(error_message) -}}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1684759, "supported_languages": null}, "macro.automate_dv.materialization_pit_incremental_default": {"name": "materialization_pit_incremental_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_materialization.sql", "original_file_path": "macros/materialisations/incremental_pit_materialization.sql", "unique_id": "macro.automate_dv.materialization_pit_incremental_default", "macro_sql": "\n\n{%- materialization pit_incremental, default -%}\n\n  {%- set full_refresh_mode = should_full_refresh() -%}\n\n  {% if target.type == \"sqlserver\" %}\n      {%- set target_relation = this.incorporate(type='table') -%}\n  {%  else %}\n      {%- set target_relation = this -%}\n  {% endif %}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {%- set to_drop = [] -%}\n  {%- if existing_relation is none -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\n      {%- do adapter.drop_relation(backup_relation) -%}\n\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n      {%- do to_drop.append(backup_relation) -%}\n  {%- else -%}\n\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\n      {%- do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) -%}\n      {%- set build_sql = automate_dv.incremental_pit_replace(tmp_relation, target_relation) -%}\n{%- endif -%}\n\n  {%- call statement(\"main\") -%}\n      {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {%- do adapter.commit() -%}\n\n  {%- for rel in to_drop -%}\n      {%- do adapter.drop_relation(rel) -%}\n  {%- endfor -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.automate_dv.incremental_pit_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1714885, "supported_languages": ["sql"]}, "macro.automate_dv.is_any_incremental": {"name": "is_any_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_any_incremental", "macro_sql": "\n\n{%- macro is_any_incremental() -%}\n    {%- if automate_dv.is_vault_insert_by_period() or automate_dv.is_vault_insert_by_rank() or automate_dv.is_pit_incremental() or automate_dv.is_bridge_incremental() or is_incremental() -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_vault_insert_by_period", "macro.automate_dv.is_vault_insert_by_rank", "macro.automate_dv.is_pit_incremental", "macro.automate_dv.is_bridge_incremental", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1724775, "supported_languages": null}, "macro.automate_dv.is_vault_insert_by_period": {"name": "is_vault_insert_by_period", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_vault_insert_by_period", "macro_sql": "{% macro is_vault_insert_by_period() %}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'vault_insert_by_period'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1730628, "supported_languages": null}, "macro.automate_dv.is_vault_insert_by_rank": {"name": "is_vault_insert_by_rank", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_vault_insert_by_rank", "macro_sql": "{% macro is_vault_insert_by_rank() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'vault_insert_by_rank'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.173654, "supported_languages": null}, "macro.automate_dv.is_bridge_incremental": {"name": "is_bridge_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_bridge_incremental", "macro_sql": "{% macro is_bridge_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'bridge_incremental'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1742375, "supported_languages": null}, "macro.automate_dv.is_pit_incremental": {"name": "is_pit_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_pit_incremental", "macro_sql": "{% macro is_pit_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'pit_incremental'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1748676, "supported_languages": null}, "macro.automate_dv.materialization_vault_insert_by_period_default": {"name": "materialization_vault_insert_by_period_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/vault_insert_by_period_materialization.sql", "original_file_path": "macros/materialisations/vault_insert_by_period_materialization.sql", "unique_id": "macro.automate_dv.materialization_vault_insert_by_period_default", "macro_sql": "{% materialization vault_insert_by_period, default -%}\n\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n    {% if target.type == \"sqlserver\" %}\n        {%- set target_relation = this.incorporate(type='table') -%}\n    {%  else %}\n        {%- set target_relation = this -%}\n    {% endif %}\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n    {%- set timestamp_field = config.require('timestamp_field') -%}\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\n\n    {%- set start_stop_dates = automate_dv.get_start_stop_dates(timestamp_field, date_source_models) | as_native -%}\n\n    {%- set period = config.get('period', default='day') -%}\n    {%- if period == 'microsecond' -%}\n        {%- set error_message -%}\n        'This datepart ({{ period }}) is too small and cannot be used for this purpose, consider using a different datepart value (e.g. day).\n         Vault_insert_by materialisations are not intended for this purpose,\n        please see https://automate-dv.readthedocs.io/en/latest/materialisations/'\n        {%- endset -%}\n\n        {{- exceptions.raise_compiler_error(error_message) -}}\n    {%- elif period is in ['millisecond', 'second', 'minute', 'hour'] -%}\n        {%- set warn_message -%}\n        'WARNING: The use of this datepart ({{ period }}) is not recommended, consider using a different datepart value (e.g. day).\n        Vault_insert_by materialisations are not intended for this purpose,\n        please see https://automate-dv.readthedocs.io/en/latest/materialisations/'\n        {%- endset -%}\n\n        {{- exceptions.warn(warn_message) -}}\n    {%- endif -%}\n\n    {%- set to_drop = [] -%}\n\n    {%- do automate_dv.check_placeholder(sql) -%}\n\n    {%- do automate_dv.check_num_periods(start_stop_dates.start_date, start_stop_dates.stop_date, period) -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(core_sql=sql, timestamp_field=timestamp_field,\n                                                                       start_timestamp=start_stop_dates.start_date,\n                                                                       stop_timestamp=start_stop_dates.stop_date,\n                                                                       offset=0, period=period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n        {% do to_drop.append(tmp_relation) %}\n\n    {% elif existing_relation.is_view %}\n\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_period).\") }}\n        {% do adapter.drop_relation(existing_relation) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(core_sql=sql, timestamp_field=timestamp_field,\n                                                                       start_timestamp=start_stop_dates.start_date,\n                                                                       stop_timestamp=start_stop_dates.stop_date,\n                                                                       offset=0, period=period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n    {% elif full_refresh_mode %}\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(core_sql=sql, timestamp_field=timestamp_field,\n                                                                       start_timestamp=start_stop_dates.start_date,\n                                                                       stop_timestamp=start_stop_dates.stop_date,\n                                                                       offset=0, period=period) %}\n        {% if target.type == \"postgres\" %}\n            {{ automate_dv.drop_temporary_special(target_relation) }}\n        {% endif %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n    {% else %}\n        {% set period_boundaries = automate_dv.get_period_boundaries(target_relation,\n                                                                  timestamp_field,\n                                                                  start_stop_dates.start_date,\n                                                                  start_stop_dates.stop_date,\n                                                                  period) %}\n\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n        {% for i in range(period_boundaries.num_periods) -%}\n\n            {%- set iteration_number = i + 1 -%}\n\n            {%- set period_of_load = automate_dv.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\n\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\n\n            {% set tmp_relation = make_temp_relation(target_relation) %}\n\n            {% set tmp_table_sql = automate_dv.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\n                                                                  period_boundaries.start_timestamp,\n                                                                  period_boundaries.stop_timestamp, i) %}\n\n\n\n            {# This call statement drops and then creates a temporary table #}\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\n            {# See MSSQL note and drop code below #}\n\n            {# Postgres needs to have an alias appended #}\n            {% if target.type == \"postgres\" %}\n                {% set tmp_table_sql = tmp_table_sql ~ ' AS SUBQUERY_ALIAS' %}\n            {% endif %}\n\n            {% call statement() -%}\n                {{ create_table_as(True, tmp_relation, tmp_table_sql) }}\n            {%- endcall %}\n\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                  to_relation=target_relation) }}\n\n            {%- set insert_query_name = 'main-' ~ i -%}\n            {% call statement(insert_query_name, fetch_result=True) -%}\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\n                (\n                    SELECT {{ target_cols_csv }}\n                    FROM {{ tmp_relation.include(schema=True) }}\n                );\n            {%- endcall %}\n\n            {% set result = load_result(insert_query_name) %}\n\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n                {%- if not result['response']['rows_affected'] %}\n                    {% if target.type == \"databricks\" and result['data'] | length > 0 %}\n                        {% set rows_inserted = result['data'][0][1] | int %}\n                    {% else %}\n                        {% set rows_inserted = 0 %}\n                    {% endif %}\n                {%- else %}\n                    {% set rows_inserted = result['response']['rows_affected'] %}\n                {%- endif %}\n            {% else %} {# older versions #}\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n            {% endif %}\n\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\n                                                                                              period_boundaries.num_periods,\n                                                                                              period_of_load, rows_inserted,\n                                                                                              model.unique_id)) }}\n\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\n            {% if target.type in ['databricks', 'sqlserver'] %}\n                {{ automate_dv.drop_temporary_special(tmp_relation) }}\n            {% else %}\n                {% do to_drop.append(tmp_relation) %}\n            {% endif %}\n\n            {% do adapter.commit() %}\n\n        {% endfor %}\n\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n            {{ tmp_table_sql }}\n        {%- endcall %}\n\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {% set result = load_result('main') %}\n\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n            {%- if not result['response']['rows_affected'] %}\n                {% if target.type == \"databricks\" and result['data'] | length > 0 %}\n                    {% set rows_inserted = result['data'][0][1] | int %}\n                {% else %}\n                    {% set rows_inserted = 0 %}\n                {% endif %}\n            {%- else %}\n                {% set rows_inserted = result['response']['rows_affected'] %}\n            {%- endif %}\n        {% else %} {# older versions #}\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n        {% endif %}\n\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\n            {{ build_sql }}\n        {%- endcall %}\n\n        -- `COMMIT` happens here\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {% if rel.type is not none %}\n            {% do adapter.drop_relation(rel) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set target_relation = target_relation.incorporate(type='table') %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.automate_dv.get_start_stop_dates", "macro.automate_dv.check_placeholder", "macro.automate_dv.check_num_periods", "macro.dbt.run_hooks", "macro.automate_dv.replace_placeholder_with_period_filter", "macro.dbt.create_table_as", "macro.automate_dv.drop_temporary_special", "macro.automate_dv.get_period_boundaries", "macro.automate_dv.get_period_of_load", "macro.dbt_utils.log_info", "macro.automate_dv.get_period_filter_sql", "macro.dbt.statement", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.18724, "supported_languages": ["sql"]}, "macro.automate_dv.materialization_vault_insert_by_rank_default": {"name": "materialization_vault_insert_by_rank_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/vault_insert_by_rank_materialization.sql", "original_file_path": "macros/materialisations/vault_insert_by_rank_materialization.sql", "unique_id": "macro.automate_dv.materialization_vault_insert_by_rank_default", "macro_sql": "{% materialization vault_insert_by_rank, default -%}\n\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n    {% if target.type == \"sqlserver\" %}\n        {%- set target_relation = this.incorporate(type='table') -%}\n    {%  else %}\n        {%- set target_relation = this -%}\n    {% endif %}\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n    {%- set rank_column = config.require('rank_column') -%}\n    {%- set rank_source_models = config.require('rank_source_models') -%}\n\n    {%- set min_max_ranks = automate_dv.get_min_max_ranks(rank_column, rank_source_models) | as_native -%}\n\n    {%- set to_drop = [] -%}\n\n    {%- do automate_dv.check_placeholder(sql, \"__RANK_FILTER__\") -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% do to_drop.append(tmp_relation) %}\n\n    {% elif existing_relation.is_view %}\n\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_rank).\") }}\n        {% do adapter.drop_relation(existing_relation) %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n    {% elif full_refresh_mode %}\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% if target.type == \"postgres\" %}\n            {{ automate_dv.drop_temporary_special(target_relation) }}\n        {% endif %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n    {% else %}\n\n        {% if min_max_ranks.max_rank | int > 100000 %}\n            {%- set error_message -%}\n            'Max iterations is 100,000. Consider using a different rank column\n            or loading a smaller amount of data.\n            vault_insert_by materialisations are not intended for this purpose,\n            please see https://automate-dv.readthedocs.io/en/latest/materialisations/'\n            {%- endset -%}\n\n            {{- exceptions.raise_compiler_error(error_message) -}}\n        {% else %}\n            {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n            {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n            {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n            {% for i in range(min_max_ranks.max_rank | int ) -%}\n\n                {%- set iteration_number = i + 1 -%}\n\n                {%- set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, iteration_number) -%}\n\n                {{ dbt_utils.log_info(\"Running for {} {} of {} on column '{}' [{}]\".format('rank', iteration_number, min_max_ranks.max_rank, rank_column, model.unique_id)) }}\n\n                {% set tmp_relation = make_temp_relation(target_relation) %}\n\n                {# This call statement drops and then creates a temporary table #}\n                {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\n                {# See MSSQL note and drop code below #}\n                {% call statement() -%}\n                    {{ create_table_as(True, tmp_relation, filtered_sql) }}\n                {%- endcall %}\n\n                {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                      to_relation=target_relation) }}\n\n                {%- set insert_query_name = 'main-' ~ i -%}\n                {% call statement(insert_query_name, fetch_result=True) -%}\n                    INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\n                    (\n                        SELECT {{ target_cols_csv }}\n                        FROM {{ tmp_relation.include(schema=True) }}\n                    );\n                {%- endcall %}\n\n                {% set result = load_result(insert_query_name) %}\n                {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n                    {# Investigate for Databricks #}\n                    {%- if result['response']['rows_affected'] == None %}\n                        {% set rows_inserted = 0 %}\n                    {%- else %}\n                        {% set rows_inserted = result['response']['rows_affected'] %}\n                    {%- endif %}\n\n                {% else %} {# older versions #}\n                    {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n                {% endif %}\n\n                {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n                {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n                {{ dbt_utils.log_info(\"Ran for {} {} of {}; {} records inserted [{}]\".format('rank', iteration_number,\n                                                                                              min_max_ranks.max_rank,\n                                                                                              rows_inserted,\n                                                                                              model.unique_id)) }}\n\n                {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n                {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\n                {% if target.type in ['databricks', 'sqlserver'] %}\n                    {{ automate_dv.drop_temporary_special(tmp_relation) }}\n                {% else %}\n                    {% do to_drop.append(tmp_relation) %}\n                {% endif %}\n\n                {% do adapter.commit() %}\n\n            {% endfor %}\n            {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n                {{ filtered_sql }}\n            {%- endcall %}\n        {% endif %}\n\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {% set result = load_result('main') %}\n\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n            {% set rows_inserted = result['response']['rows_affected'] %}\n        {% else %} {# older versions #}\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n        {% endif %}\n\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\n            {{ build_sql }}\n        {%- endcall %}\n\n        -- `COMMIT` happens here\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {% if rel.type is not none %}\n            {% do adapter.drop_relation(rel) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set target_relation = target_relation.incorporate(type='table') %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.automate_dv.get_min_max_ranks", "macro.automate_dv.check_placeholder", "macro.dbt.run_hooks", "macro.automate_dv.replace_placeholder_with_rank_filter", "macro.dbt.create_table_as", "macro.automate_dv.drop_temporary_special", "macro.dbt_utils.log_info", "macro.dbt.statement", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.196418, "supported_languages": ["sql"]}, "macro.automate_dv.drop_temporary_special": {"name": "drop_temporary_special", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/drop_temporary.sql", "original_file_path": "macros/materialisations/drop_temporary.sql", "unique_id": "macro.automate_dv.drop_temporary_special", "macro_sql": "{% macro drop_temporary_special(tmp_relation) %}\n    {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n    {# the connection or session that created it so drop it now before the commit below closes this session #}\n\n    {%- set drop_query_name = 'DROP_QUERY-' ~ i -%}\n    {% call statement(drop_query_name, fetch_result=True) -%}\n        {% if target.type == 'databricks' %}\n            DROP VIEW {{ tmp_relation }};\n        {% elif target.type == 'sqlserver' %}\n            DROP TABLE {{ tmp_relation }};\n        {% elif target.type == 'postgres' %}\n            DROP TABLE {{ tmp_relation }};\n        {% endif %}\n    {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1974306, "supported_languages": null}, "macro.automate_dv.incremental_pit_replace": {"name": "incremental_pit_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.incremental_pit_replace", "macro_sql": "{% macro incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n\n    {{ adapter.dispatch('incremental_pit_replace', 'automate_dv')(tmp_relation=tmp_relation,\n                                                                    target_relation=target_relation,\n                                                                    statement_name=\"main\") }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__incremental_pit_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1983857, "supported_languages": null}, "macro.automate_dv.default__incremental_pit_replace": {"name": "default__incremental_pit_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.default__incremental_pit_replace", "macro_sql": "{% macro default__incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    TRUNCATE TABLE {{ target_relation }};\n\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.199078, "supported_languages": null}, "macro.automate_dv.databricks__incremental_pit_replace": {"name": "databricks__incremental_pit_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.databricks__incremental_pit_replace", "macro_sql": "{% macro databricks__incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    INSERT OVERWRITE {{ target_relation }} ({{ dest_cols_csv }})\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }};\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1995983, "supported_languages": null}, "macro.automate_dv.incremental_bridge_replace": {"name": "incremental_bridge_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.incremental_bridge_replace", "macro_sql": "{% macro incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n\n    {{ adapter.dispatch('incremental_bridge_replace', 'automate_dv')(tmp_relation=tmp_relation,\n                                                                    target_relation=target_relation,\n                                                                    statement_name=\"main\") }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__incremental_bridge_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.1999695, "supported_languages": null}, "macro.automate_dv.default__incremental_bridge_replace": {"name": "default__incremental_bridge_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.default__incremental_bridge_replace", "macro_sql": "{% macro default__incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    TRUNCATE TABLE {{ target_relation }};\n\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2007189, "supported_languages": null}, "macro.automate_dv.databricks__incremental_bridge_replace": {"name": "databricks__incremental_bridge_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.databricks__incremental_bridge_replace", "macro_sql": "{% macro databricks__incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    INSERT OVERWRITE {{ target_relation }} ({{ dest_cols_csv }})\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    ;\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2014108, "supported_languages": null}, "macro.automate_dv.get_min_max_ranks": {"name": "get_min_max_ranks", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/get_min_max_ranks.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/get_min_max_ranks.sql", "unique_id": "macro.automate_dv.get_min_max_ranks", "macro_sql": "{% macro get_min_max_ranks(rank_column, rank_source_models) %}\n\n    {% if rank_source_models is not none %}\n\n        {% if rank_source_models is string %}\n            {% set rank_source_models = [rank_source_models] %}\n        {% endif %}\n\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in rank_source_models %}\n                SELECT {{ rank_column }} FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ rank_column }}) AS MIN, MAX({{ rank_column }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = automate_dv.get_query_results_as_dict(query_sql) %}\n\n        {% set min_rank = min_max_dict['MIN'][0] | string %}\n        {% set max_rank = min_max_dict['MAX'][0] | string %}\n        {% set min_max_ranks = {\"min_rank\": min_rank, \"max_rank\": max_rank} %}\n\n        {% do return(min_max_ranks) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_rank' configuration. Must provide 'rank_column', and 'rank_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2034326, "supported_languages": null}, "macro.automate_dv.replace_placeholder_with_rank_filter": {"name": "replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.replace_placeholder_with_rank_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) -%}\n\n    {% set macro = adapter.dispatch('replace_placeholder_with_rank_filter',\n                                    'automate_dv')(core_sql=core_sql,\n                                                  rank_column=rank_column,\n                                                  rank_iteration=rank_iteration) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__replace_placeholder_with_rank_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2042086, "supported_languages": null}, "macro.automate_dv.default__replace_placeholder_with_rank_filter": {"name": "default__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.default__replace_placeholder_with_rank_filter", "macro_sql": "{% macro default__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n\n    {%- set rank_filter -%}\n    {{ rank_column }}:: INTEGER = {{ rank_iteration }}::INTEGER\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.204672, "supported_languages": null}, "macro.automate_dv.sqlserver__replace_placeholder_with_rank_filter": {"name": "sqlserver__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.sqlserver__replace_placeholder_with_rank_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n\n    {%- set rank_filter -%}\n        CAST({{ rank_column }} AS INT) = CAST({{ rank_iteration }} AS INT)\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2051008, "supported_languages": null}, "macro.automate_dv.bigquery__replace_placeholder_with_rank_filter": {"name": "bigquery__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.bigquery__replace_placeholder_with_rank_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n    {%- set rank_filter -%}\n        CAST({{ rank_column }} AS INTEGER) = CAST({{ rank_iteration }} AS INTEGER)\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2055244, "supported_languages": null}, "macro.automate_dv.get_period_of_load": {"name": "get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.get_period_of_load", "macro_sql": "\n\n{%- macro get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set macro = adapter.dispatch('get_period_of_load',\n                                    'automate_dv')(period=period,\n                                                   offset=offset,\n                                                   start_timestamp=start_timestamp) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2066321, "supported_languages": null}, "macro.automate_dv.default__get_period_of_load": {"name": "default__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.default__get_period_of_load", "macro_sql": "\n\n\n{%- macro default__get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC('{{ period }}', DATEADD({{ period }}, {{ offset }}, TO_TIMESTAMP('{{ start_timestamp }}'))) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2072423, "supported_languages": null}, "macro.automate_dv.bigquery__get_period_of_load": {"name": "bigquery__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.bigquery__get_period_of_load", "macro_sql": "{%- macro bigquery__get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        {%- if period is in ['millisecond', 'microsecond', 'second', 'minute', 'hour'] -%}\n        SELECT TIMESTAMP_TRUNC(TIMESTAMP_ADD( TIMESTAMP('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\n        {%- elif period is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\n        {%- else -%}\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\n        {%- endif -%}\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2085667, "supported_languages": null}, "macro.automate_dv.sqlserver__get_period_of_load": {"name": "sqlserver__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.sqlserver__get_period_of_load", "macro_sql": "{%- macro sqlserver__get_period_of_load(period, offset, start_timestamp) -%}\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_timestamp_mssql = start_timestamp[0:23] %}\n\n    {% set period_of_load_sql -%}\n        SELECT DATEADD({{ period }}, DATEDIFF({{period}}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2093575, "supported_languages": null}, "macro.automate_dv.databricks__get_period_of_load": {"name": "databricks__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.databricks__get_period_of_load", "macro_sql": "{%- macro databricks__get_period_of_load(period, offset, start_timestamp) -%}\n    {% do return(automate_dv.default__get_period_of_load(period=period, offset=offset, start_timestamp=start_timestamp)) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.209785, "supported_languages": null}, "macro.automate_dv.postgres__get_period_of_load": {"name": "postgres__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.postgres__get_period_of_load", "macro_sql": "{%- macro postgres__get_period_of_load(period, offset, start_timestamp) -%}\n    {# Postgres uses different DateTime arithmetic #}\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC('{{ period }}', TIMESTAMP '{{ start_timestamp }}' + INTERVAL '{{ offset }} {{ period }}') AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2103994, "supported_languages": null}, "macro.automate_dv.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.get_period_boundaries", "macro_sql": "\n\n{%- macro get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set macro = adapter.dispatch('get_period_boundaries',\n                                    'automate_dv')(target_relation=target_relation,\n                                                   timestamp_field=timestamp_field,\n                                                   start_date=start_date,\n                                                   stop_date=stop_date,\n                                                   period=period) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2120576, "supported_languages": null}, "macro.automate_dv.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\n    {%- set datepart = period -%}\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n           SELECT\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\n                COALESCE({{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }},\n                         {{ current_timestamp() }} )::TIMESTAMP AS stop_timestamp\n            FROM {{ target_relation }}\n         )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp',\n                                  'stop_timestamp',\n                                  period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2132096, "supported_languages": null}, "macro.automate_dv.bigquery__get_period_boundaries": {"name": "bigquery__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.bigquery__get_period_boundaries", "macro_sql": "{% macro bigquery__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')\".format(stop_date | lower) -%}\n    {%- set datepart = period -%}\n\n    {% set period_boundary_sql -%}\n        with data as (\n            select\n                COALESCE(\n                    CAST(MAX({{ timestamp_field }}) AS TIMESTAMP),\n                    CAST('{{ start_date }}' AS TIMESTAMP))\n                as START_TIMESTAMP,\n                COALESCE(\n                    CAST({{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }} AS TIMESTAMP),\n                    CAST({{ current_timestamp() }} AS TIMESTAMP))\n                as STOP_TIMESTAMP\n            from {{ target_relation }}\n        )\n        select\n            START_TIMESTAMP,\n            STOP_TIMESTAMP,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 as NUM_PERIODS\n        from data\n    {%- endset %}\n\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2144513, "supported_languages": null}, "macro.automate_dv.sqlserver__get_period_boundaries": {"name": "sqlserver__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.sqlserver__get_period_boundaries", "macro_sql": "{% macro sqlserver__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n    {%- if period is in ['microsecond', 'millisecond', 'second'] -%}\n        {{ automate_dv.sqlserver_datepart_too_small_error(period=period) }}\n    {%- endif -%}\n\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_date = start_date[0:27] %}\n    {% set stop_date = stop_date[0:27] %}\n    {%- set datepart = period -%}\n    {%- set from_date_or_timestamp = \"CAST(NULLIF('{}','none') AS DATETIME2)\".format(stop_date | lower) %}\n\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n           SELECT\n                CAST(COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS DATETIME2)) AS DATETIME2) AS start_timestamp,\n                CAST(COALESCE({{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }},\n                         {{ current_timestamp() }} ) AS DATETIME2) AS stop_timestamp\n            FROM {{ target_relation }}\n      )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.sqlserver_datepart_too_small_error", "macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2162318, "supported_languages": null}, "macro.automate_dv.databricks__get_period_boundaries": {"name": "databricks__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.databricks__get_period_boundaries", "macro_sql": "{% macro databricks__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\n            {%- set datepart = period -%}\n    {% set period_boundary_sql -%}\n\n        WITH period_data AS (\n            SELECT\n                COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS TIMESTAMP)) AS start_timestamp,\n                COALESCE(\n                {{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }},\n                         {{ current_timestamp() }}) AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            IF(stop_timestamp < start_timestamp, stop_timestamp, start_timestamp) AS start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2179313, "supported_languages": null}, "macro.automate_dv.postgres__get_period_boundaries": {"name": "postgres__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.postgres__get_period_boundaries", "macro_sql": "{% macro postgres__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n            SELECT\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\n                COALESCE({{ automate_dv.timestamp_add('millisecond', 86399999, \"NULLIF('\" ~ stop_date | lower ~ \"','none')::TIMESTAMP\") }},\n                         {{ current_timestamp() }} )::TIMESTAMP AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2190628, "supported_languages": null}, "macro.automate_dv.check_num_periods": {"name": "check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "original_file_path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "unique_id": "macro.automate_dv.check_num_periods", "macro_sql": "\n\n{%- macro check_num_periods(start_date, stop_date, period) -%}\n\n    {% set num_periods = adapter.dispatch('check_num_periods',\n                                          'automate_dv')(start_date=start_date,\n                                                         stop_date=stop_date,\n                                                         period=period) %}\n\n    {%- if num_periods > 100000 -%}\n        {{ automate_dv.sqlserver_max_iterations_error() }}\n    {%- endif -%}\n\n    {% do return(num_periods) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__check_num_periods", "macro.automate_dv.sqlserver_max_iterations_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.220293, "supported_languages": null}, "macro.automate_dv.default__check_num_periods": {"name": "default__check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "original_file_path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "unique_id": "macro.automate_dv.default__check_num_periods", "macro_sql": "{% macro default__check_num_periods(start_date, stop_date, period) %}\n\n    {% set num_periods_check_sql %}\n    SELECT {{ datediff('start_timestamp', 'stop_timestamp', period) }} AS NUM_PERIODS\n    FROM\n    (SELECT CAST('{{ start_date }}' AS {{ dbt.type_timestamp() }}) AS start_timestamp,\n        CAST(NULLIF('{{ stop_date | lower }}', 'none') AS {{ dbt.type_timestamp() }}) AS stop_timestamp) AS SUBQUERY_ALIAS\n    {% endset %}\n    {% set num_periods_dict = automate_dv.get_query_results_as_dict(num_periods_check_sql) %}\n    {% set num_periods = num_periods_dict['NUM_PERIODS'][0] | int %}\n\n    {% do return(num_periods) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.type_timestamp", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.221018, "supported_languages": null}, "macro.automate_dv.sqlserver__check_num_periods": {"name": "sqlserver__check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "original_file_path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "unique_id": "macro.automate_dv.sqlserver__check_num_periods", "macro_sql": "{% macro sqlserver__check_num_periods(start_date, stop_date, period) %}\n\n    {% set num_periods_check_sql %}\n    SELECT DATEDIFF_BIG({{ period }}, CAST('{{ start_date }}' AS DATETIME2),\n        CAST(NULLIF('{{ stop_date | lower }}', 'none') AS DATETIME2)) AS NUM_PERIODS\n    {% endset %}\n    {% set num_periods_dict = automate_dv.get_query_results_as_dict(num_periods_check_sql) %}\n    {% set num_periods = num_periods_dict['NUM_PERIODS'][0] | int %}\n\n    {% do return(num_periods) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2215705, "supported_languages": null}, "macro.automate_dv.replace_placeholder_with_period_filter": {"name": "replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.replace_placeholder_with_period_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\n\n    {% set macro = adapter.dispatch('replace_placeholder_with_period_filter',\n                                    'automate_dv')(core_sql=core_sql,\n                                                timestamp_field=timestamp_field,\n                                                start_timestamp=start_timestamp,\n                                                stop_timestamp=stop_timestamp,\n                                                offset=offset,\n                                                period=period) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2231312, "supported_languages": null}, "macro.automate_dv.default__replace_placeholder_with_period_filter": {"name": "default__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.default__replace_placeholder_with_period_filter", "macro_sql": "{% macro default__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n        (TO_TIMESTAMP({{ timestamp_field }})\n        >= DATE_TRUNC('{{ period }}', TO_TIMESTAMP('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}') AND\n             TO_TIMESTAMP({{ timestamp_field }}) < DATE_TRUNC('{{ period }}', TO_TIMESTAMP('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}'))\n      AND (TO_TIMESTAMP({{ timestamp_field }}) >= TO_TIMESTAMP('{{ start_timestamp }}'))\n    {%- endset -%}\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2240422, "supported_languages": null}, "macro.automate_dv.bigquery__replace_placeholder_with_period_filter": {"name": "bigquery__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.bigquery__replace_placeholder_with_period_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n    {%- if period is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n        {%- set timestamp_field_type = 'DATE' -%}\n    {%- elif period is in ['millisecond', 'microsecond', 'second', 'minute', 'hour'] -%}\n        {%- set timestamp_field_type = 'TIMESTAMP' -%}\n    {%- else -%}\n        {%- set timestamp_field_type = 'DATE' -%}\n    {%- endif -%}\n\n    {%- set period_filter -%}\n            ({{ timestamp_field_type }}({{ timestamp_field }}) >= DATE_TRUNC({{ timestamp_field_type }}_ADD( {{ timestamp_field_type }}('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }} ) AND\n             {{ timestamp_field_type }}({{ timestamp_field }}) < DATE_TRUNC({{ timestamp_field_type }}_ADD(TIMESTAMP_ADD( {{ timestamp_field_type }}('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), INTERVAL 1 {{ period }}), {{ period }} )\n      AND TIMESTAMP({{ timestamp_field }}) >= TIMESTAMP('{{ start_timestamp }}'))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2255535, "supported_languages": null}, "macro.automate_dv.sqlserver__replace_placeholder_with_period_filter": {"name": "sqlserver__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.sqlserver__replace_placeholder_with_period_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n    {%- if period is in ['microsecond', 'millisecond', 'second'] -%}\n        {{ automate_dv.sqlserver_datepart_too_small_error(period=period) }}\n    {%- endif -%}\n\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_timestamp_mssql = start_timestamp[0:27] %}\n    {%- set period_filter -%}\n            (CAST({{ timestamp_field }} AS DATETIME2) >= DATEADD({{ period }}, DATEDIFF({{ period }}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AND\n             CAST({{ timestamp_field }} AS DATETIME2) < DATEADD({{ period }}, 1, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\n      AND (CAST({{ timestamp_field }} AS DATETIME2) >= CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.sqlserver_datepart_too_small_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.226548, "supported_languages": null}, "macro.automate_dv.postgres__replace_placeholder_with_period_filter": {"name": "postgres__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.postgres__replace_placeholder_with_period_filter", "macro_sql": "{% macro postgres__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n        {{ timestamp_field }}::TIMESTAMP >= DATE_TRUNC('{{ period }}', TIMESTAMP '{{ start_timestamp }}' + INTERVAL '{{ offset }} {{ period }}')\n        AND {{ timestamp_field }}::TIMESTAMP < DATE_TRUNC('{{ period }}', TIMESTAMP '{{ start_timestamp }}' + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}')\n        AND {{ timestamp_field }}::TIMESTAMP >= TIMESTAMP '{{ start_timestamp }}'\n    {%- endset -%}\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.227621, "supported_languages": null}, "macro.automate_dv.sqlserver_datepart_too_small_error": {"name": "sqlserver_datepart_too_small_error", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/error_messages.sql", "original_file_path": "macros/materialisations/period_mat_helpers/error_messages.sql", "unique_id": "macro.automate_dv.sqlserver_datepart_too_small_error", "macro_sql": "\n\n{%- macro sqlserver_datepart_too_small_error(period) -%}\n\n    {%- set error_message -%}\n    This datepart ({{ period }}) is too small and cannot be used for this purpose in MS SQL Server, consider using a different datepart value (e.g. day).\n    vault_insert_by materialisations are not intended for this purpose, please see https://automate-dv.readthedocs.io/en/latest/materialisations/\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2280414, "supported_languages": null}, "macro.automate_dv.sqlserver_max_iterations_error": {"name": "sqlserver_max_iterations_error", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/error_messages.sql", "original_file_path": "macros/materialisations/period_mat_helpers/error_messages.sql", "unique_id": "macro.automate_dv.sqlserver_max_iterations_error", "macro_sql": "{%- macro sqlserver_max_iterations_error() -%}\n\n    {%- set error_message -%}\n    Max iterations is 100,000. Consider using a different datepart value (e.g. day) or loading data for a shorter time period.\n    vault_insert_by materialisations are not intended for this purpose, please see https://automate-dv.readthedocs.io/en/latest/materialisations/\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2282565, "supported_languages": null}, "macro.automate_dv.get_period_filter_sql": {"name": "get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.get_period_filter_sql", "macro_sql": "\n\n{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {% set macro = adapter.dispatch('get_period_filter_sql',\n                                    'automate_dv')(target_cols_csv=target_cols_csv,\n                                                   base_sql=base_sql,\n                                                   timestamp_field=timestamp_field,\n                                                   period=period,\n                                                   start_timestamp=start_timestamp,\n                                                   stop_timestamp=stop_timestamp,\n                                                   offset=offset) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__get_period_filter_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.22923, "supported_languages": null}, "macro.automate_dv.default__get_period_filter_sql": {"name": "default__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.default__get_period_filter_sql", "macro_sql": "{% macro default__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(core_sql=filtered_sql.sql,\n                                                                                          timestamp_field=timestamp_field,\n                                                                                          start_timestamp=start_timestamp,\n                                                                                          stop_timestamp=stop_timestamp,\n                                                                                          offset=offset, period=period)}) -%}\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2298174, "supported_languages": null}, "macro.automate_dv.sqlserver__get_period_filter_sql": {"name": "sqlserver__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.sqlserver__get_period_filter_sql", "macro_sql": "{% macro sqlserver__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(core_sql=filtered_sql.sql,\n                                                                                          timestamp_field=timestamp_field,\n                                                                                          start_timestamp=start_timestamp,\n                                                                                          stop_timestamp=stop_timestamp,\n                                                                                          offset=offset, period=period)}) -%}\n    {# MSSQL does not allow CTEs in a subquery #}\n    {{ filtered_sql.sql }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.23049, "supported_languages": null}, "macro.automate_dv.postgres__get_period_filter_sql": {"name": "postgres__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.postgres__get_period_filter_sql", "macro_sql": "{% macro postgres__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(core_sql=filtered_sql.sql,\n                                                                                          timestamp_field=timestamp_field,\n                                                                                          start_timestamp=start_timestamp,\n                                                                                          stop_timestamp=stop_timestamp,\n                                                                                          offset=offset, period=period)}) -%}\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2313008, "supported_languages": null}, "macro.automate_dv.get_start_stop_dates": {"name": "get_start_stop_dates", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_start_stop_dates.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_start_stop_dates.sql", "unique_id": "macro.automate_dv.get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(timestamp_field, date_source_models) %}\n\n    {% if config.get('start_date', default=none) is not none %}\n        {%- set start_date = config.get('start_date') -%}\n        {%- set stop_date = config.get('stop_date', default=none) -%}\n\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\n\n    {% elif date_source_models is not none %}\n        {% if date_source_models is string %}\n            {% set date_source_models = [date_source_models] %}\n        {% endif %}\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in date_source_models %}\n                SELECT\n                    {{ timestamp_field }}\n                    FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = automate_dv.get_query_results_as_dict(query_sql) %}\n\n        {% set start_date = min_max_dict['MIN'][0] | string %}\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\n\n        {% do return(min_max_dates) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_period' configuration. Must provide 'start_date' and 'stop_date', just 'stop_date', and/or 'date_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2337458, "supported_languages": null}, "macro.automate_dv.bigquery__ma_sat": {"name": "bigquery__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/ma_sat.sql", "original_file_path": "macros/tables/bigquery/ma_sat.sql", "unique_id": "macro.automate_dv.bigquery__ma_sat", "macro_sql": "\n\n{%- macro bigquery__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) %}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{# Select unique source records -#}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in src_cdk %}\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n\nsource_data_with_count AS (\n    SELECT a.*,\n           b.source_count\n    FROM source_data a\n    INNER JOIN (\n        SELECT {{ automate_dv.prefix([src_pk], 't') }},\n            COUNT(*) AS source_count\n        FROM (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }}, {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }}, {{ automate_dv.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\n        GROUP BY {{ automate_dv.prefix([src_pk], 't') }}\n    ) AS b\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','b'], condition='=') }}\n),\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }},\n                                       {{ automate_dv.prefix([src_cdk], 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n    INNER JOIN (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\n        ON {{ automate_dv.multikey(src_pk, prefix=['inner_mas', 'spk'], condition='=') }}\n    ) AS mas\n    WHERE latest_rank = 1\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n{% if not automate_dv.is_any_incremental() %}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n{%- endif %}\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data_with_count') }}\n    FROM source_data_with_count\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data_with_count AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                       lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ automate_dv.multikey(src_pk, prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ automate_dv.multikey(src_pk, prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\n{#        AND {{ automate_dv.prefix([src_ldts], 'stage') }} = {{ automate_dv.prefix([src_ldts], 'active_records') }} #}\n                AND {{ automate_dv.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ automate_dv.multikey(src_pk, prefix=['source_data_with_count', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2411125, "supported_languages": null}, "macro.automate_dv.bigquery__t_link": {"name": "bigquery__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/t_link.sql", "original_file_path": "macros/tables/bigquery/t_link.sql", "unique_id": "macro.automate_dv.bigquery__t_link", "macro_sql": "\n\n{%- macro bigquery__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2417095, "supported_languages": null}, "macro.automate_dv.bigquery__eff_sat": {"name": "bigquery__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/eff_sat.sql", "original_file_path": "macros/tables/bigquery/eff_sat.sql", "unique_id": "macro.automate_dv.bigquery__eff_sat", "macro_sql": "\n\n{%- macro bigquery__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.242664, "supported_languages": null}, "macro.automate_dv.bigquery__sat": {"name": "bigquery__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/sat.sql", "original_file_path": "macros/tables/bigquery/sat.sql", "unique_id": "macro.automate_dv.bigquery__sat", "macro_sql": "\n\n{%- macro bigquery__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                             src_payload=src_payload,\n                             src_extra_columns=src_extra_columns,\n                             src_eff=src_eff, src_ldts=src_ldts,\n                             src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.243194, "supported_languages": null}, "macro.automate_dv.bigquery__link": {"name": "bigquery__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/link.sql", "original_file_path": "macros/tables/bigquery/link.sql", "unique_id": "macro.automate_dv.bigquery__link", "macro_sql": "\n\n{%- macro bigquery__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__link(src_pk=src_pk,\n                              src_fk=src_fk,\n                              src_extra_columns=src_extra_columns,\n                              src_ldts=src_ldts,\n                              src_source=src_source,\n                              source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.24365, "supported_languages": null}, "macro.automate_dv.bigquery__xts": {"name": "bigquery__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/xts.sql", "original_file_path": "macros/tables/bigquery/xts.sql", "unique_id": "macro.automate_dv.bigquery__xts", "macro_sql": "\n\n{%- macro bigquery__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.244094, "supported_languages": null}, "macro.automate_dv.bigquery__pit": {"name": "bigquery__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/pit.sql", "original_file_path": "macros/tables/bigquery/pit.sql", "unique_id": "macro.automate_dv.bigquery__pit", "macro_sql": "\n\n{%- macro bigquery__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) %}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n    {%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n    {%- set hash = var('hash', 'MD5') -%}\n\n{%- if not enable_ghost_record -%}\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0x0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000000' %}\n{%- endif -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1 )\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] | upper -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] | upper -%}\n        {%- set sat_name = sat_name | upper -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n            {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n            {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n\n        {%- else -%}\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n        {%- endif -%}\n        {{- ',' if not loop.last -}}\n    {%- endfor %}\n    FROM backfill_rows_as_of_dates AS a\n\n    {% for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\n\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n    ORDER BY (1)\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n\n        {%- if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n            {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n            {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n\n        {%- else -%}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n\n        {%- endif -%}\n        {{- \",\" if not loop.last }}\n    {%- endfor %}\n    FROM new_rows_as_of_dates AS a\n\n\n    {% for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\n\n    {% endfor -%}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n    ORDER BY (1)\n),\n\npit AS (\n    SELECT * FROM new_rows\n{%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n{%- endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2550108, "supported_languages": null}, "macro.automate_dv.bigquery__hub": {"name": "bigquery__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/hub.sql", "original_file_path": "macros/tables/bigquery/hub.sql", "unique_id": "macro.automate_dv.bigquery__hub", "macro_sql": "\n\n{%- macro bigquery__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\n    row_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),\n\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n{%- if stage_count > 1 %}\n\n    row_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.259757, "supported_languages": null}, "macro.automate_dv.bigquery__bridge": {"name": "bigquery__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/bridge.sql", "original_file_path": "macros/tables/bigquery/bridge.sql", "unique_id": "macro.automate_dv.bigquery__bridge", "macro_sql": "\n\n{%- macro bigquery__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                                as_of_dates_table=as_of_dates_table,\n                                bridge_walk=bridge_walk,\n                                stage_tables_ldts=stage_tables_ldts,\n                                src_extra_columns=src_extra_columns,\n                                src_ldts=src_ldts,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2605128, "supported_languages": null}, "macro.automate_dv.postgres__ma_sat": {"name": "postgres__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/ma_sat.sql", "original_file_path": "macros/tables/postgres/ma_sat.sql", "unique_id": "macro.automate_dv.postgres__ma_sat", "macro_sql": "\n\n{%- macro postgres__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.sqlserver__ma_sat(src_pk=src_pk, src_cdk=src_cdk,\n                                  src_hashdiff=src_hashdiff, src_payload=src_payload,\n                                  src_extra_columns=src_extra_columns, src_eff=src_eff,\n                                  src_ldts=src_ldts, src_source=src_source,\n                                  source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.sqlserver__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.261113, "supported_languages": null}, "macro.automate_dv.postgres__t_link": {"name": "postgres__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/t_link.sql", "original_file_path": "macros/tables/postgres/t_link.sql", "unique_id": "macro.automate_dv.postgres__t_link", "macro_sql": "\n\n{%- macro postgres__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2616608, "supported_languages": null}, "macro.automate_dv.postgres__eff_sat": {"name": "postgres__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/eff_sat.sql", "original_file_path": "macros/tables/postgres/eff_sat.sql", "unique_id": "macro.automate_dv.postgres__eff_sat", "macro_sql": "\n\n{%- macro postgres__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2622807, "supported_languages": null}, "macro.automate_dv.postgres__sat": {"name": "postgres__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/sat.sql", "original_file_path": "macros/tables/postgres/sat.sql", "unique_id": "macro.automate_dv.postgres__sat", "macro_sql": "\n\n{%- macro postgres__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set window_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set pk_cols = automate_dv.expand_column_list(columns=[src_pk]) -%}\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'a', alias_target='source') }}\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ automate_dv.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {% endif %}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(window_cols, 'a', alias_target='target') }}\n    FROM (\n        SELECT {{ automate_dv.prefix(window_cols, 'current_records', alias_target='target') }},\n            RANK() OVER (\n                PARTITION BY {{ automate_dv.prefix([src_pk], 'current_records') }}\n                ORDER BY {{ automate_dv.prefix([src_ldts], 'current_records') }} DESC\n            ) AS rank\n        FROM {{ this }} AS current_records\n            JOIN (\n                SELECT DISTINCT {{ automate_dv.prefix([src_pk], 'source_data') }}\n                FROM source_data\n            ) AS source_records\n                ON {{ automate_dv.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\n    ) AS a\n    WHERE a.rank = 1\n),\n\n{%- endif %}\n\n{%- if enable_ghost_record %}\n\nghost AS (\n{{- automate_dv.create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) }}\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n    {%- if enable_ghost_record -%}\n    SELECT\n        {{ automate_dv.alias_all(source_cols, 'g') }}\n        FROM ghost AS g\n        {%- if automate_dv.is_any_incremental() %}\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ automate_dv.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'g') }} )\n        {%- endif %}\n    UNION\n    {%- endif %}\n    SELECT DISTINCT {{ automate_dv.alias_all(source_cols, 'stage') }}\n    FROM source_data AS stage\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN latest_records\n    ON {{ automate_dv.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\n        AND {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'stage') }}\n    WHERE {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\n    {%- endif %}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.create_ghost_record", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2699192, "supported_languages": null}, "macro.automate_dv.postgres__link": {"name": "postgres__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/link.sql", "original_file_path": "macros/tables/postgres/link.sql", "unique_id": "macro.automate_dv.postgres__link", "macro_sql": "\n\n{%- macro postgres__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n  SELECT * FROM (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if source_model | length == 1 %}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n  ) as l\n  WHERE row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if source_model | length > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if source_model | length > 1 %}\n\nrow_rank_union AS (\n  SELECT * FROM (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n  ) AS a\n  WHERE row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2751522, "supported_languages": null}, "macro.automate_dv.postgres__xts": {"name": "postgres__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/xts.sql", "original_file_path": "macros/tables/postgres/xts.sql", "unique_id": "macro.automate_dv.postgres__xts", "macro_sql": "\n\n{%- macro postgres__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2758584, "supported_languages": null}, "macro.automate_dv.postgres__pit": {"name": "postgres__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/pit.sql", "original_file_path": "macros/tables/postgres/pit.sql", "unique_id": "macro.automate_dv.postgres__pit", "macro_sql": "\n\n{%- macro postgres__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\n{%- set hash = var('hash', 'MD5') -%}\n\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1)\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{automate_dv.cast_binary(ghost_pk, quote=true)}})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n\n    FROM backfill_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{automate_dv.cast_binary(ghost_pk, quote=true)}})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n\n    {%- endfor %}\n\n    FROM new_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE\n),\n\npit AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n    {% endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost", "macro.automate_dv.cast_binary", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2860525, "supported_languages": null}, "macro.automate_dv.postgres__hub": {"name": "postgres__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/hub.sql", "original_file_path": "macros/tables/postgres/hub.sql", "unique_id": "macro.automate_dv.postgres__hub", "macro_sql": "\n\n{%- macro postgres__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\n-#}\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'rr') }}) {{ automate_dv.prefix(source_cols_with_rank, 'rr') }}\n    {%- else %}\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'rr') }}) {{ automate_dv.prefix(source_cols, 'rr') }}\n    {%- endif %}\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    ORDER BY {{ automate_dv.prefix([src_pk], 'rr') }}, {{ automate_dv.prefix([src_ldts], 'rr') }}\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if source_model | length > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n{%- if source_model | length > 1 %}\n\nrow_rank_union AS (\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\n-#}\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'ru') }}) ru.*\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    ORDER BY {{ automate_dv.prefix([src_pk], 'ru') }}, {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2905266, "supported_languages": null}, "macro.automate_dv.postgres__bridge": {"name": "postgres__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/bridge.sql", "original_file_path": "macros/tables/postgres/bridge.sql", "unique_id": "macro.automate_dv.postgres__bridge", "macro_sql": "\n\n{%- macro postgres__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                                as_of_dates_table=as_of_dates_table,\n                                bridge_walk=bridge_walk,\n                                stage_tables_ldts=stage_tables_ldts,\n                                src_extra_columns=src_extra_columns,\n                                src_ldts=src_ldts,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2910492, "supported_languages": null}, "macro.automate_dv.sqlserver__ma_sat": {"name": "sqlserver__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/ma_sat.sql", "original_file_path": "macros/tables/sqlserver/ma_sat.sql", "unique_id": "macro.automate_dv.sqlserver__ma_sat", "macro_sql": "\n\n{%- macro sqlserver__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{# Select unique source records -#}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in src_cdk %}\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n\nsource_data_with_count AS (\n    SELECT a.*,\n           b.source_count\n    FROM source_data a\n    INNER JOIN\n    (\n        SELECT {{ automate_dv.prefix([src_pk], 't') }},\n               COUNT(*) AS source_count\n        FROM (\n            SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }},\n                            {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }},\n                            {{ automate_dv.prefix(cdk_cols, 's') }}\n            FROM source_data AS s\n        ) AS t\n        GROUP BY {{ automate_dv.prefix([src_pk], 't') }}\n    ) AS b\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','b'], condition='=') }}\n),\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ automate_dv.prefix(cdk_cols, 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n    INNER JOIN (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\n        ON {{ automate_dv.multikey(src_pk, prefix=['inner_mas', 'spk'], condition='=') }}\n        {%- if target.type =='databricks' %}\n        QUALIFY latest_rank = 1\n        {%- endif %}\n    ) AS mas\n    {% if target.type == 'sqlserver' or target.type == 'postgres' -%}\n    WHERE latest_rank = 1\n    {% endif -%}\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n{% if not automate_dv.is_any_incremental() -%}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n{%- endif -%}\n\n{#- if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data_with_count') }}\n    FROM source_data_with_count\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data_with_count AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ automate_dv.multikey(src_pk, prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ automate_dv.multikey(src_pk, prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n{#- In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference -#}\n{#-        AND {{ automate_dv.prefix([src_ldts], 'stage') }} = {{ automate_dv.prefix([src_ldts], 'active_records') }} #}\n                AND {{ automate_dv.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ automate_dv.multikey(src_pk, prefix=['source_data_with_count', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2972713, "supported_languages": null}, "macro.automate_dv.sqlserver__t_link": {"name": "sqlserver__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/t_link.sql", "original_file_path": "macros/tables/sqlserver/t_link.sql", "unique_id": "macro.automate_dv.sqlserver__t_link", "macro_sql": "\n\n{%- macro sqlserver__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.29784, "supported_languages": null}, "macro.automate_dv.sqlserver__eff_sat": {"name": "sqlserver__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/eff_sat.sql", "original_file_path": "macros/tables/sqlserver/eff_sat.sql", "unique_id": "macro.automate_dv.sqlserver__eff_sat", "macro_sql": "\n\n{%- macro sqlserver__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2984252, "supported_languages": null}, "macro.automate_dv.sqlserver__sat": {"name": "sqlserver__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/sat.sql", "original_file_path": "macros/tables/sqlserver/sat.sql", "unique_id": "macro.automate_dv.sqlserver__sat", "macro_sql": "\n\n{%- macro sqlserver__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                             src_payload=src_payload, src_extra_columns=src_extra_columns,\n                             src_eff=src_eff, src_ldts=src_ldts,\n                             src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.2989364, "supported_languages": null}, "macro.automate_dv.sqlserver__link": {"name": "sqlserver__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/link.sql", "original_file_path": "macros/tables/sqlserver/link.sql", "unique_id": "macro.automate_dv.sqlserver__link", "macro_sql": "\n\n{%- macro sqlserver__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    SELECT *\n    FROM\n    (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if stage_count == 1 %}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n    ) l\n    WHERE l.row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n    ),{{ \"\\n\" if not loop.last }}\n    {% endfor -%}\n\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT *\n    FROM\n    (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n    ) r\n    WHERE r.row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.303756, "supported_languages": null}, "macro.automate_dv.sqlserver__xts": {"name": "sqlserver__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/xts.sql", "original_file_path": "macros/tables/sqlserver/xts.sql", "unique_id": "macro.automate_dv.sqlserver__xts", "macro_sql": "\n\n{%- macro sqlserver__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3042786, "supported_languages": null}, "macro.automate_dv.sqlserver__pit": {"name": "sqlserver__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/pit.sql", "original_file_path": "macros/tables/sqlserver/pit.sql", "unique_id": "macro.automate_dv.sqlserver__pit", "macro_sql": "\n\n{%- macro sqlserver__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{{- automate_dv.default__pit(src_pk=src_pk,\n                             src_extra_columns=src_extra_columns,\n                             as_of_dates_table=as_of_dates_table,\n                             satellites=satellites,\n                             stage_tables_ldts=stage_tables_ldts,\n                             src_ldts=src_ldts,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3047667, "supported_languages": null}, "macro.automate_dv.sqlserver__hub": {"name": "sqlserver__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/hub.sql", "original_file_path": "macros/tables/sqlserver/hub.sql", "unique_id": "macro.automate_dv.sqlserver__hub", "macro_sql": "\n\n{%- macro sqlserver__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ source_cols_with_rank | join(', ') }}\n    {%- else %}\n    SELECT {{ source_cols | join(', ') }}\n    {%- endif %}\n    FROM (\n        {%- if model.config.materialized == 'vault_insert_by_rank' %}\n        SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n        {%- else %}\n        SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n        {%- endif %}\n               ROW_NUMBER() OVER(\n                   PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n                   ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n               ) AS row_number\n        FROM {{ ref(src) }} AS rr\n        WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    ) h\n    WHERE h.row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT *\n    FROM (\n        SELECT ru.*,\n               ROW_NUMBER() OVER(\n                   PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n                   ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n               ) AS row_rank_number\n        FROM {{ ns.last_cte }} AS ru\n        WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    ) h\n    WHERE h.row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.309083, "supported_languages": null}, "macro.automate_dv.sqlserver__bridge": {"name": "sqlserver__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/bridge.sql", "original_file_path": "macros/tables/sqlserver/bridge.sql", "unique_id": "macro.automate_dv.sqlserver__bridge", "macro_sql": "\n\n{%- macro sqlserver__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                               as_of_dates_table=as_of_dates_table,\n                               bridge_walk=bridge_walk,\n                               stage_tables_ldts=stage_tables_ldts,\n                               src_extra_columns=src_extra_columns,\n                               src_ldts=src_ldts,\n                               source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3096163, "supported_languages": null}, "macro.automate_dv.databricks__ma_sat": {"name": "databricks__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/ma_sat.sql", "original_file_path": "macros/tables/databricks/ma_sat.sql", "unique_id": "macro.automate_dv.databricks__ma_sat", "macro_sql": "\n\n{%- macro databricks__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.sqlserver__ma_sat(src_pk=src_pk, src_cdk=src_cdk,\n                                  src_hashdiff=src_hashdiff, src_payload=src_payload,\n                                  src_extra_columns=src_extra_columns, src_eff=src_eff,\n                                  src_ldts=src_ldts, src_source=src_source,\n                                  source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.sqlserver__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3101642, "supported_languages": null}, "macro.automate_dv.databricks__t_link": {"name": "databricks__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/t_link.sql", "original_file_path": "macros/tables/databricks/t_link.sql", "unique_id": "macro.automate_dv.databricks__t_link", "macro_sql": "\n\n{%- macro databricks__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3106778, "supported_languages": null}, "macro.automate_dv.databricks__eff_sat": {"name": "databricks__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/eff_sat.sql", "original_file_path": "macros/tables/databricks/eff_sat.sql", "unique_id": "macro.automate_dv.databricks__eff_sat", "macro_sql": "\n\n{%- macro databricks__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3112824, "supported_languages": null}, "macro.automate_dv.databricks__sat": {"name": "databricks__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/sat.sql", "original_file_path": "macros/tables/databricks/sat.sql", "unique_id": "macro.automate_dv.databricks__sat", "macro_sql": "\n\n{%- macro databricks__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__sat(src_pk=src_pk,\n                             src_hashdiff=src_hashdiff,\n                             src_payload=src_payload,\n                             src_extra_columns=src_extra_columns,\n                             src_eff=src_eff,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3118227, "supported_languages": null}, "macro.automate_dv.databricks__link": {"name": "databricks__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/link.sql", "original_file_path": "macros/tables/databricks/link.sql", "unique_id": "macro.automate_dv.databricks__link", "macro_sql": "\n\n{%- macro databricks__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__link(src_pk=src_pk,\n                              src_fk=src_fk,\n                              src_extra_columns=src_extra_columns,\n                              src_ldts=src_ldts,\n                              src_source=src_source,\n                              source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.312269, "supported_languages": null}, "macro.automate_dv.databricks__xts": {"name": "databricks__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/xts.sql", "original_file_path": "macros/tables/databricks/xts.sql", "unique_id": "macro.automate_dv.databricks__xts", "macro_sql": "\n\n{%- macro databricks__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3127537, "supported_languages": null}, "macro.automate_dv.databricks__pit": {"name": "databricks__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/pit.sql", "original_file_path": "macros/tables/databricks/pit.sql", "unique_id": "macro.automate_dv.databricks__pit", "macro_sql": "\n\n{%- macro databricks__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\n{%- set hash = var('hash', 'MD5') -%}\n\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1)\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n\n    FROM backfill_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n\n    {%- endfor %}\n\n    FROM new_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE\n),\n\npit AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n    {% endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost", "macro.automate_dv.cast_binary", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3223574, "supported_languages": null}, "macro.automate_dv.databricks__hub": {"name": "databricks__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/hub.sql", "original_file_path": "macros/tables/databricks/hub.sql", "unique_id": "macro.automate_dv.databricks__hub", "macro_sql": "\n\n{%- macro databricks__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__hub(src_pk=src_pk,\n                             src_nk=src_nk,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3229778, "supported_languages": null}, "macro.automate_dv.databricks__bridge": {"name": "databricks__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/bridge.sql", "original_file_path": "macros/tables/databricks/bridge.sql", "unique_id": "macro.automate_dv.databricks__bridge", "macro_sql": "\n\n{%- macro databricks__bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                                src_extra_columns=src_extra_columns,\n                                src_ldts=src_ldts,\n                                as_of_dates_table=as_of_dates_table,\n                                bridge_walk=bridge_walk,\n                                stage_tables_ldts=stage_tables_ldts,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3235142, "supported_languages": null}, "macro.automate_dv.ma_sat": {"name": "ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/ma_sat.sql", "original_file_path": "macros/tables/snowflake/ma_sat.sql", "unique_id": "macro.automate_dv.ma_sat", "macro_sql": "\n\n{%- macro ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\n                                           src_payload=src_payload, src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('ma_sat', 'automate_dv')(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\n                                                 src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                                 src_eff=src_eff, src_ldts=src_ldts,\n                                                 src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3253443, "supported_languages": null}, "macro.automate_dv.default__ma_sat": {"name": "default__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/ma_sat.sql", "original_file_path": "macros/tables/snowflake/ma_sat.sql", "unique_id": "macro.automate_dv.default__ma_sat", "macro_sql": "\n\n{%- macro default__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{# Select unique source records #}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    {% if automate_dv.is_any_incremental() %}\n        ,COUNT(DISTINCT {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }}, {{ automate_dv.prefix(cdk_cols, 's', alias_target='source') }})\n            OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 's') }}) AS source_count\n    {% endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in cdk_cols %}\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ automate_dv.prefix(cdk_cols, 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n        INNER JOIN (\n            SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }}\n            FROM source_data as s\n        ) AS spk\n            ON {{ automate_dv.multikey(src_pk, prefix=['inner_mas', 'spk'], condition='=') }}\n            QUALIFY latest_rank = 1\n    ) AS mas\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ automate_dv.multikey(src_pk, prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ automate_dv.multikey(src_pk, prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n                AND {{ automate_dv.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ automate_dv.multikey(src_pk, prefix=['source_data', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.is_any_incremental", "macro.automate_dv.multikey", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3306947, "supported_languages": null}, "macro.automate_dv.t_link": {"name": "t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/t_link.sql", "original_file_path": "macros/tables/snowflake/t_link.sql", "unique_id": "macro.automate_dv.t_link", "macro_sql": "\n\n{%- macro t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_fk=src_fk, src_eff=src_eff,\n                                              src_ldts=src_ldts, src_source=src_source,\n                                              source_model=source_model) -}}\n\n    {{ automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('t_link', 'automate_dv')(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                                 src_extra_columns=src_extra_columns,\n                                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                                 source_model=source_model) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3319535, "supported_languages": null}, "macro.automate_dv.default__t_link": {"name": "default__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/t_link.sql", "original_file_path": "macros/tables/snowflake/t_link.sql", "unique_id": "macro.automate_dv.default__t_link", "macro_sql": "\n\n{%- macro default__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) %}\n\nWITH stage AS (\n    SELECT {{ source_cols | join(', ') }}\n    FROM {{ ref(source_model) }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    WHERE __PERIOD_FILTER__\n    AND {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    WHERE __RANK_FILTER__\n    AND {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- else %}\n    WHERE {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- endif %}\n),\nrecords_to_insert AS (\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 'stg') }}\n    FROM stage AS stg\n    {% if automate_dv.is_any_incremental() -%}\n    LEFT JOIN {{ this }} AS tgt\n    ON {{ automate_dv.multikey(src_pk, prefix=['stg','tgt'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='tgt', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.multikey", "macro.automate_dv.prefix", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3339996, "supported_languages": null}, "macro.automate_dv.eff_sat": {"name": "eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/eff_sat.sql", "original_file_path": "macros/tables/snowflake/eff_sat.sql", "unique_id": "macro.automate_dv.eff_sat", "macro_sql": "\n\n{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                              src_start_date=src_start_date, src_end_date=src_end_date,\n                                              src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                              source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('eff_sat', 'automate_dv')(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                                  src_extra_columns=src_extra_columns,\n                                                  src_start_date=src_start_date, src_end_date=src_end_date,\n                                                  src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                                  source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3365486, "supported_languages": null}, "macro.automate_dv.default__eff_sat": {"name": "default__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/eff_sat.sql", "original_file_path": "macros/tables/snowflake/eff_sat.sql", "unique_id": "macro.automate_dv.default__eff_sat", "macro_sql": "{%- macro default__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list(columns=[src_dfk, src_sfk]) -%}\n{%- set dfk_cols = automate_dv.expand_column_list(columns=[src_dfk]) -%}\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\n\n{%- set max_datetime = automate_dv.max_datetime() %}\n\nWITH source_data AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ automate_dv.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{# Selecting the most recent records for each link hashkey -#}\nlatest_records AS (\n    SELECT * FROM (\n        SELECT {{ automate_dv.alias_all(source_cols, 'b') }},\n               ROW_NUMBER() OVER (\n                    PARTITION BY {{ automate_dv.prefix([src_pk], 'b') }}\n                    ORDER BY b.{{ src_ldts }} DESC\n               ) AS row_num\n        FROM {{ this }} AS b\n    )\n    {%- if target.type == 'sqlserver' -%}\n        l\n        WHERE l.row_num = 1\n    {%- else -%}\n        AS inner_rank\n        WHERE row_num = 1\n    {%- endif -%}\n),\n\n{# Selecting the open records of the most recent records for each link hashkey -#}\nlatest_open AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'c') }}\n    FROM latest_records AS c\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'c')) }} = {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n),\n\n{# Selecting the closed records of the most recent records for each link hashkey -#}\nlatest_closed AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'd') }}\n    FROM latest_records AS d\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'd')) }} != {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n),\n\n{# Identifying the completely new link relationships to be opened in eff sat -#}\nnew_open_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'f') }},\n        {{ automate_dv.alias_all(fk_cols, 'f') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'f') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        f.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        f.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        f.{{ src_end_date }} AS {{ src_end_date }},\n        f.{{ src_eff }} AS {{ src_eff }},\n        f.{{ src_ldts }},\n        f.{{ src_source }}\n    FROM source_data AS f\n    LEFT JOIN latest_records AS lr\n    ON {{ automate_dv.multikey(src_pk, prefix=['f','lr'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='lr', condition='IS NULL') }}\n),\n\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\nnew_reopened_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'lc') }},\n        {{ automate_dv.alias_all(fk_cols, 'lc') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'g') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        g.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        g.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        g.{{ src_end_date }} AS {{ src_end_date }},\n        g.{{ src_eff }} AS {{ src_eff }},\n        g.{{ src_ldts }},\n        g.{{ src_source }}\n    FROM source_data AS g\n    INNER JOIN latest_closed AS lc\n    ON {{ automate_dv.multikey(src_pk, prefix=['g','lc'], condition='=') }}\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'g')) }} = {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n),\n\n{%- if is_auto_end_dating %}\n\n{# Creating the closing records -#}\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'lo') }},\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        lo.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_eff }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    INNER JOIN latest_open AS lo\n    ON {{ automate_dv.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\n    WHERE ({{ automate_dv.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\n),\n\n{#- else if (not) is_auto_end_dating -#}\n{% else %}\n\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'lo') }},\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        h.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_end_date }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    LEFT JOIN latest_open AS lo\n    ON {{ automate_dv.multikey(src_pk, prefix=['lo', 'h'], condition='=') }}\n    LEFT JOIN latest_closed AS lc\n    ON {{ automate_dv.multikey(src_pk, prefix=['lc', 'h'], condition='=') }}\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'h')) }} != {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n    AND {{ automate_dv.multikey(src_pk, prefix='lo', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(src_pk, prefix='lc', condition='IS NULL') }}\n),\n\n{#- end if is_auto_end_dating -#}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT * FROM new_open_records\n    {% if target.type == 'bigquery' -%}\n        UNION DISTINCT\n    {%- else -%}\n        UNION\n    {%- endif %}\n    SELECT * FROM new_reopened_records\n    {% if target.type == 'bigquery' -%}\n        UNION DISTINCT\n    {%- else -%}\n        UNION\n    {%- endif %}\n    SELECT * FROM new_closed_records\n)\n\n{#- else if not automate_dv.is_any_incremental() -#}\n{%- else %}\n\nrecords_to_insert AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'i') }}\n    FROM source_data AS i\n)\n\n{#- end if not automate_dv.is_any_incremental() -#}\n{%- endif %}\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.max_datetime", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all", "macro.automate_dv.cast_date", "macro.automate_dv.alias", "macro.automate_dv.cast_datetime", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3443, "supported_languages": null}, "macro.automate_dv.sat": {"name": "sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/sat.sql", "original_file_path": "macros/tables/snowflake/sat.sql", "unique_id": "macro.automate_dv.sat", "macro_sql": "\n\n{%- macro sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_hashdiff=src_hashdiff, src_payload=src_payload,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- set src_payload = automate_dv.process_payload_column_excludes(\n                              src_pk=src_pk, src_hashdiff=src_hashdiff,\n                              src_payload=src_payload, src_extra_columns=src_extra_columns, src_eff=src_eff,\n                              src_ldts=src_ldts, src_source=src_source, source_model=source_model) -%}\n\n    {{ automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('sat', 'automate_dv')(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                           src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                           src_eff=src_eff, src_ldts=src_ldts,\n                                           src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.process_payload_column_excludes", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.346263, "supported_languages": null}, "macro.automate_dv.default__sat": {"name": "default__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/sat.sql", "original_file_path": "macros/tables/snowflake/sat.sql", "unique_id": "macro.automate_dv.default__sat", "macro_sql": "{%- macro default__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set window_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set pk_cols = automate_dv.expand_column_list(columns=[src_pk]) -%}\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'a', alias_target='source') }}\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ automate_dv.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {% endif %}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(window_cols, 'a', alias_target='target') }}\n    FROM (\n        SELECT {{ automate_dv.prefix(window_cols, 'current_records', alias_target='target') }},\n            RANK() OVER (\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'current_records') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'current_records') }} DESC\n            ) AS rank\n        FROM {{ this }} AS current_records\n            JOIN (\n                SELECT DISTINCT {{ automate_dv.prefix([src_pk], 'source_data') }}\n                FROM source_data\n            ) AS source_records\n                ON {{ automate_dv.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\n    ) AS a\n    WHERE a.rank = 1\n),\n\n{%- endif %}\n\n{%- if enable_ghost_record %}\n\nghost AS (\n    {{ automate_dv.create_ghost_record(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                    src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                    src_eff=src_eff, src_ldts=src_ldts,\n                                    src_source=src_source, source_model=source_model) }}\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n    {%- if enable_ghost_record %}\n    SELECT\n        {{ automate_dv.alias_all(source_cols, 'g') }}\n        FROM ghost AS g\n        {%- if automate_dv.is_any_incremental() %}\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ automate_dv.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'g') }} )\n        {%- endif %}\n    UNION {% if target.type == 'bigquery' -%} DISTINCT {%- endif -%}\n    {%- endif %}\n    SELECT DISTINCT {{ automate_dv.alias_all(source_cols, 'stage') }}\n    FROM source_data AS stage\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN latest_records\n    ON {{ automate_dv.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\n        AND {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'stage') }}\n    WHERE {{ automate_dv.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.create_ghost_record", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3506117, "supported_languages": null}, "macro.automate_dv.link": {"name": "link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "unique_id": "macro.automate_dv.link", "macro_sql": "\n\n{%- macro link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_fk=src_fk,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not automate_dv.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ automate_dv.log_relation_sources(this, source_model | length) }}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('link', 'automate_dv')(src_pk=src_pk, src_fk=src_fk,\n                                               src_extra_columns=src_extra_columns,\n                                               src_ldts=src_ldts, src_source=src_source,\n                                               source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.log_relation_sources", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3531263, "supported_languages": null}, "macro.automate_dv.default__link": {"name": "default__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "unique_id": "macro.automate_dv.default__link", "macro_sql": "{%- macro default__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if stage_count == 1 %}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3571575, "supported_languages": null}, "macro.automate_dv.xts": {"name": "xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/xts.sql", "original_file_path": "macros/tables/snowflake/xts.sql", "unique_id": "macro.automate_dv.xts", "macro_sql": "\n\n{%- macro xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_satellite=src_satellite,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not automate_dv.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('xts', 'automate_dv')(src_pk=src_pk,\n                                            src_satellite=src_satellite,\n                                            src_extra_columns=src_extra_columns,\n                                            src_ldts=src_ldts,\n                                            src_source=src_source,\n                                            source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.358997, "supported_languages": null}, "macro.automate_dv.default__xts": {"name": "default__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/xts.sql", "original_file_path": "macros/tables/snowflake/xts.sql", "unique_id": "macro.automate_dv.default__xts", "macro_sql": "{%- macro default__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set hashdiff_col_name_alias = 'HASHDIFF' -%}\n{%- set satellite_name_col_name_alias = 'SATELLITE_NAME' %}\n{%- set satellite_count = src_satellite.keys() | list | length %}\n{%- set stage_count = source_model | length %}\n\n{%- if execute -%}\n    {%- do dbt_utils.log_info('Loading {} from {} source(s) and {} satellite(s)'.format(\"{}.{}.{}\".format(this.database, this.schema, this.identifier),\n                                                                                        stage_count, satellite_count)) -%}\n{%- endif %}\n\n{%- set ns = namespace(last_cte= \"\") %}\n\n{{ 'WITH ' }}\n{%- for src in source_model -%}\n    {%- for satellite in src_satellite.items() -%}\n        {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0] -%}\n        {%- set hashdiff = (satellite[1]['hashdiff'].values() | list)[0] %}\n        {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\n\n{{ cte_name }} AS (\n    SELECT {{ automate_dv.prefix([src_pk], 's') }},\n           s.{{ hashdiff }} AS {{ hashdiff_col_name_alias }},\n           s.{{ satellite_name }} AS {{ satellite_name_col_name_alias }},\n           {%- if automate_dv.is_something(src_extra_columns) -%}\n               {{ automate_dv.prefix([src_extra_columns], 's') }},\n           {%- endif %}\n           s.{{ src_ldts }},\n           s.{{ src_source }}\n    FROM {{ ref(src) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n),\n\n    {%- set ns.last_cte = cte_name %}\n    {%- endfor %}\n{%- endfor %}\n\n{%- if stage_count > 1 or satellite_count > 1 %}\n\nunion_satellites AS (\n    {%- for src in source_model %}\n        {%- for satellite in src_satellite.items() %}\n            {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0]  %}\n            {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\n    SELECT * FROM {{ cte_name }}\n            {%- if not loop.last %}\n    UNION ALL\n            {%- endif %}\n        {%- endfor %}\n        {%- if not loop.last %}\n    UNION ALL\n        {%- endif %}\n    {%- endfor %}\n),\n{%- set ns.last_cte = \"union_satellites\" -%}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.{{ hashdiff_col_name_alias }},\n        a.{{ satellite_name_col_name_alias }},\n        {%- if automate_dv.is_something(src_extra_columns) -%}\n            {{ automate_dv.prefix([src_extra_columns], 'a') }},\n        {%- endif %}\n        a.{{ src_ldts }},\n        a.{{ src_source }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n        ON (\n            a.{{ hashdiff_col_name_alias }} = d.{{ hashdiff_col_name_alias }}\n            AND a.{{ src_ldts }} = d.{{ src_ldts }}\n            AND a.{{ satellite_name_col_name_alias }} = d.{{ satellite_name_col_name_alias }}\n        )\n    WHERE d.{{ hashdiff_col_name_alias }} IS NULL\n    AND d.{{ src_ldts }} IS NULL\n    AND d.{{ satellite_name_col_name_alias }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.automate_dv.prefix", "macro.automate_dv.is_something", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3626745, "supported_languages": null}, "macro.automate_dv.pit": {"name": "pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "unique_id": "macro.automate_dv.pit", "macro_sql": "\n\n{%- macro pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n    {%- if automate_dv.is_something(src_extra_columns) and execute -%}\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\n    {%- endif -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk,\n                                           as_of_dates_table=as_of_dates_table,\n                                           satellites=satellites,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {%- for stg in stage_tables_ldts %}\n        {{ \"-- depends_on: \" ~ ref(stg) -}}\n    {%- endfor -%}\n\n    {{ adapter.dispatch('pit', 'automate_dv')(src_pk=src_pk,\n                                           src_extra_columns=src_extra_columns,\n                                           as_of_dates_table=as_of_dates_table,\n                                           satellites=satellites,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.365267, "supported_languages": null}, "macro.automate_dv.default__pit": {"name": "default__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "unique_id": "macro.automate_dv.default__pit", "macro_sql": "{%- macro default__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\n{%- set hash = var('hash', 'MD5') -%}\n\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1)\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n\n    FROM backfill_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n\n    {%- endfor %}\n\n    FROM new_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE\n),\n\npit AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n    {% endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost", "macro.automate_dv.cast_binary", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.374004, "supported_languages": null}, "macro.automate_dv.hub": {"name": "hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "unique_id": "macro.automate_dv.hub", "macro_sql": "\n\n{%- macro hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_nk=src_nk,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not automate_dv.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ automate_dv.log_relation_sources(this, source_model | length) }}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('hub', 'automate_dv')(src_pk=src_pk, src_nk=src_nk,\n                                              src_extra_columns=src_extra_columns,\n                                              src_ldts=src_ldts, src_source=src_source,\n                                              source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.log_relation_sources", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3758247, "supported_languages": null}, "macro.automate_dv.default__hub": {"name": "default__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "unique_id": "macro.automate_dv.default__hub", "macro_sql": "{%- macro default__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3796535, "supported_languages": null}, "macro.automate_dv.bridge": {"name": "bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/bridge.sql", "original_file_path": "macros/tables/snowflake/bridge.sql", "unique_id": "macro.automate_dv.bridge", "macro_sql": "\n\n{%- macro bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\n\n    {%- if automate_dv.is_something(src_extra_columns) and execute -%}\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\n    {%- endif -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk,\n                                           as_of_dates_table=as_of_dates_table,\n                                           bridge_walk=bridge_walk,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {% for stg in stage_tables_ldts %}\n    {{- \"-- depends_on: \" ~ ref(stg) }}\n    {% endfor %}\n\n    {#- Acquiring the source relation for the AS_OF table -#}\n    {%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n        {%- set source_name = as_of_dates_table | first -%}\n        {%- set source_table_name = as_of_dates_table[source_name] -%}\n        {%- set as_of_dates_table = source(source_name, source_table_name) -%}\n    {%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n        {%- set as_of_dates_table = ref(as_of_dates_table) -%}\n    {%- endif %}\n\n    {{- adapter.dispatch('bridge', 'automate_dv')(src_pk=src_pk,\n                                                  src_extra_columns=src_extra_columns,\n                                                  src_ldts=src_ldts,\n                                                  as_of_dates_table=as_of_dates_table,\n                                                  bridge_walk=bridge_walk,\n                                                  stage_tables_ldts=stage_tables_ldts,\n                                                  source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3823936, "supported_languages": null}, "macro.automate_dv.default__bridge": {"name": "default__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/bridge.sql", "original_file_path": "macros/tables/snowflake/bridge.sql", "unique_id": "macro.automate_dv.default__bridge", "macro_sql": "{%- macro default__bridge(src_pk, src_extra_columns, src_ldts, as_of_dates_table, bridge_walk, stage_tables_ldts, source_model) -%}\n\n{%- set max_datetime = automate_dv.max_datetime() -%}\n\n{#- Setting the new AS_OF dates CTE name -#}\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of'  -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT *\n    FROM {{ as_of_dates_table }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\noverlap AS (\n    {{ automate_dv.bridge_overlap_and_new_rows(src_pk, bridge_walk, 'overlap_pks', 'overlap_as_of') }}\n),\n{%- endif %}\n\nnew_rows AS (\n    {{ automate_dv.bridge_overlap_and_new_rows(src_pk, bridge_walk, ref(source_model), new_as_of_dates_cte) }}\n),\n\n{# Full data from bridge walk(s) -#}\nall_rows AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap\n    {%- endif %}\n),\n\n{# Select most recent set of relationship key(s) for each as of date -#}\ncandidate_rows AS (\n    SELECT *\n    FROM (\n        SELECT *,\n               ROW_NUMBER() OVER (\n               PARTITION BY\n                   AS_OF_DATE,\n                   {% for bridge_step in bridge_walk.keys() -%}\n\n                       {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\n\n                       {{ bridge_link_pk }} {%- if not loop.last %}, {% endif -%}\n\n                   {%- endfor %}\n               ORDER BY\n                   {% for bridge_step in bridge_walk.keys() -%}\n\n                       {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\n\n                       {{ bridge_load_date }} DESC {%- if not loop.last %}, {% endif -%}\n\n                   {%- endfor %}\n               ) AS ROW_NUM\n        FROM all_rows\n    ) AS a\n    WHERE a.ROW_NUM = 1\n),\n\nbridge AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'c') }},\n        c.AS_OF_DATE,\n\n        {% for bridge_step in bridge_walk.keys() %}\n\n        {% set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] %}\n        c.{{ bridge_link_pk }}\n        {%- if not loop.last %}, {%- endif -%}\n        {%- endfor %}\n\n    FROM candidate_rows AS c\n\n{%- for bridge_step in bridge_walk.keys() -%}\n    {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] %}\n\n    {% if loop.first -%} WHERE {%- else -%} AND {%- endif %} {{ automate_dv.cast_date(automate_dv.prefix([bridge_end_date], 'c')) }} = {{ automate_dv.cast_date(max_datetime, true, false) }}\n\n{% endfor -%}\n)\n\nSELECT * FROM bridge\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.max_datetime", "macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.bridge_overlap_and_new_rows", "macro.automate_dv.prefix", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3859649, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3869097, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.388282, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3890824, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3895786, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3902297, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3914793, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3920126, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3926146, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.393233, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.393686, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.394441, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.396154, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3966765, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3970912, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3976622, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.39864, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.3993948, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4000962, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4021313, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4078543, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.40851, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4095438, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4101877, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4112954, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4122076, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.413955, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.41443, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4149613, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4155588, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4165053, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4169972, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4174743, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4180098, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4187717, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.419164, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.419714, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4200628, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4205182, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4210675, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4217546, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4220257, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4224489, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4229524, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4232805, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4239395, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4248886, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.425309, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.425592, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4260612, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4264014, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.42707, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4273274, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4275298, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4277568, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4279585, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4282389, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4284496, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4296708, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4339256, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4350858, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4355361, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4363563, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.437251, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4378805, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4387999, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4412303, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4417298, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4425685, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4429934, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.443179, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4433646, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4435465, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_vault_v2.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4440513, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4450083, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4459298, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4478357, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4484622, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4495828, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4501798, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.450724, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4509764, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4516413, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4520648, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.452752, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4531126, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4535298, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4540517, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4546185, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4548745, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4552865, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4560108, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4563558, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4566832, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4572992, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4584546, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4588864, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4590642, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4600458, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4610882, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4619474, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4638264, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4642508, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4649312, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.465459, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.466372, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4668026, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4672318, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4682481, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4691434, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4702532, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4706223, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.470833, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.47114, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4716609, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.4720023, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1734520876.472234, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_vault_v2.fct_sales": ["model.dbt_vault_v2.hub_location", "model.dbt_vault_v2.hub_product", "model.dbt_vault_v2.hub_sales", "model.dbt_vault_v2.link_location_sales", "model.dbt_vault_v2.link_product_sales", "model.dbt_vault_v2.sat_location", "model.dbt_vault_v2.sat_product", "model.dbt_vault_v2.sat_sales"], "model.dbt_vault_v2.dim_product": ["model.dbt_vault_v2.hub_product", "model.dbt_vault_v2.sat_product"], "model.dbt_vault_v2.dim_location": ["model.dbt_vault_v2.hub_location", "model.dbt_vault_v2.sat_location"], "model.dbt_vault_v2.raw_location": ["source.dbt_vault_v2.samples_data.STG_LOCATION_RAW"], "model.dbt_vault_v2.raw_sales": ["source.dbt_vault_v2.samples_data.STG_SALES_RAW"], "model.dbt_vault_v2.raw_product": ["source.dbt_vault_v2.samples_data.STG_PRODUCT_RAW"], "model.dbt_vault_v2.v_stg_sales": ["model.dbt_vault_v2.raw_sales"], "model.dbt_vault_v2.v_stg_location": ["model.dbt_vault_v2.raw_location"], "model.dbt_vault_v2.v_stg_product": ["model.dbt_vault_v2.raw_product"], "model.dbt_vault_v2.sat_location": ["model.dbt_vault_v2.raw_location", "model.dbt_vault_v2.v_stg_location"], "model.dbt_vault_v2.sat_product": ["model.dbt_vault_v2.raw_product", "model.dbt_vault_v2.v_stg_product"], "model.dbt_vault_v2.sat_sales": ["model.dbt_vault_v2.raw_sales", "model.dbt_vault_v2.v_stg_sales"], "model.dbt_vault_v2.link_product_sales": ["model.dbt_vault_v2.v_stg_sales"], "model.dbt_vault_v2.link_location_sales": ["model.dbt_vault_v2.v_stg_sales"], "model.dbt_vault_v2.hub_product": ["model.dbt_vault_v2.v_stg_product"], "model.dbt_vault_v2.hub_location": ["model.dbt_vault_v2.v_stg_location"], "model.dbt_vault_v2.hub_sales": ["model.dbt_vault_v2.v_stg_sales"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.base_node_relationships"], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.base_metric_relationships"], "model.dbt_project_evaluator.stg_columns": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"], "model.dbt_project_evaluator.stg_sources": [], "model.dbt_project_evaluator.stg_nodes": [], "model.dbt_project_evaluator.stg_exposures": [], "model.dbt_project_evaluator.stg_metrics": [], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.base_exposure_relationships"], "model.dbt_project_evaluator.base_source_columns": [], "model.dbt_project_evaluator.base_metric_relationships": [], "model.dbt_project_evaluator.base_node_columns": [], "model.dbt_project_evaluator.base_exposure_relationships": [], "model.dbt_project_evaluator.base_node_relationships": [], "model.dbt_project_evaluator.stg_naming_convention_folders": [], "model.dbt_project_evaluator.stg_naming_convention_prefixes": [], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_directories": ["model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_sources"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships", "model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.fct_undocumented_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_undocumented_sources": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_documentation_coverage": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_test_coverage": ["model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_sources_without_freshness": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_unused_sources": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_duplicate_sources": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_too_many_joins": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_root_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_hard_coded_references": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": [], "test.dbt_vault_v2.unique_dim_product_sku_id.cf0a3fd846": ["model.dbt_vault_v2.dim_product"], "test.dbt_vault_v2.not_null_dim_product_sku_id.f725edd0d7": ["model.dbt_vault_v2.dim_product"], "test.dbt_vault_v2.unique_fct_sales_transaction_sales.e7e985ef28": ["model.dbt_vault_v2.fct_sales"], "test.dbt_vault_v2.not_null_fct_sales_transaction_sales.9f2f9fb0c2": ["model.dbt_vault_v2.fct_sales"], "test.dbt_vault_v2.unique_dim_location_location_id.9acbee647a": ["model.dbt_vault_v2.dim_location"], "test.dbt_vault_v2.not_null_dim_location_location_id.8635435d86": ["model.dbt_vault_v2.dim_location"], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": ["model.dbt_project_evaluator.fct_public_models_without_contract"], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": ["model.dbt_project_evaluator.fct_undocumented_public_models"], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": ["model.dbt_project_evaluator.fct_model_directories"], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": ["model.dbt_project_evaluator.fct_model_naming_conventions"], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": ["model.dbt_project_evaluator.fct_source_directories"], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": ["model.dbt_project_evaluator.fct_test_directories"], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": ["model.dbt_project_evaluator.fct_documentation_coverage"], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": ["model.dbt_project_evaluator.fct_undocumented_models"], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": ["model.dbt_project_evaluator.fct_undocumented_source_tables"], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": ["model.dbt_project_evaluator.fct_undocumented_sources"], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": ["model.dbt_project_evaluator.fct_test_coverage"], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"], "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": ["model.dbt_project_evaluator.fct_sources_without_freshness"], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": ["model.dbt_project_evaluator.fct_direct_join_to_source"], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": ["model.dbt_project_evaluator.fct_duplicate_sources"], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": ["model.dbt_project_evaluator.fct_model_fanout"], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": ["model.dbt_project_evaluator.fct_multiple_sources_joined"], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": ["model.dbt_project_evaluator.fct_root_models"], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": ["model.dbt_project_evaluator.fct_source_fanout"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": ["model.dbt_project_evaluator.fct_unused_sources"], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": ["model.dbt_project_evaluator.fct_hard_coded_references"], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": ["model.dbt_project_evaluator.fct_too_many_joins"], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": ["model.dbt_project_evaluator.fct_chained_views_dependencies"], "source.dbt_vault_v2.samples_data.STG_LOCATION_RAW": [], "source.dbt_vault_v2.samples_data.STG_PRODUCT_RAW": [], "source.dbt_vault_v2.samples_data.STG_SALES_RAW": []}, "child_map": {"model.dbt_vault_v2.fct_sales": ["test.dbt_vault_v2.not_null_fct_sales_transaction_sales.9f2f9fb0c2", "test.dbt_vault_v2.unique_fct_sales_transaction_sales.e7e985ef28"], "model.dbt_vault_v2.dim_product": ["test.dbt_vault_v2.not_null_dim_product_sku_id.f725edd0d7", "test.dbt_vault_v2.unique_dim_product_sku_id.cf0a3fd846"], "model.dbt_vault_v2.dim_location": ["test.dbt_vault_v2.not_null_dim_location_location_id.8635435d86", "test.dbt_vault_v2.unique_dim_location_location_id.9acbee647a"], "model.dbt_vault_v2.raw_location": ["model.dbt_vault_v2.sat_location", "model.dbt_vault_v2.v_stg_location"], "model.dbt_vault_v2.raw_sales": ["model.dbt_vault_v2.sat_sales", "model.dbt_vault_v2.v_stg_sales"], "model.dbt_vault_v2.raw_product": ["model.dbt_vault_v2.sat_product", "model.dbt_vault_v2.v_stg_product"], "model.dbt_vault_v2.v_stg_sales": ["model.dbt_vault_v2.hub_sales", "model.dbt_vault_v2.link_location_sales", "model.dbt_vault_v2.link_product_sales", "model.dbt_vault_v2.sat_sales"], "model.dbt_vault_v2.v_stg_location": ["model.dbt_vault_v2.hub_location", "model.dbt_vault_v2.sat_location"], "model.dbt_vault_v2.v_stg_product": ["model.dbt_vault_v2.hub_product", "model.dbt_vault_v2.sat_product"], "model.dbt_vault_v2.sat_location": ["model.dbt_vault_v2.dim_location", "model.dbt_vault_v2.fct_sales"], "model.dbt_vault_v2.sat_product": ["model.dbt_vault_v2.dim_product", "model.dbt_vault_v2.fct_sales"], "model.dbt_vault_v2.sat_sales": ["model.dbt_vault_v2.fct_sales"], "model.dbt_vault_v2.link_product_sales": ["model.dbt_vault_v2.fct_sales"], "model.dbt_vault_v2.link_location_sales": ["model.dbt_vault_v2.fct_sales"], "model.dbt_vault_v2.hub_product": ["model.dbt_vault_v2.dim_product", "model.dbt_vault_v2.fct_sales"], "model.dbt_vault_v2.hub_location": ["model.dbt_vault_v2.dim_location", "model.dbt_vault_v2.fct_sales"], "model.dbt_vault_v2.hub_sales": ["model.dbt_vault_v2.fct_sales"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_columns": [], "model.dbt_project_evaluator.stg_sources": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_nodes": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposures": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_metrics": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.base_source_columns": ["model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.base_metric_relationships": ["model.dbt_project_evaluator.stg_metric_relationships"], "model.dbt_project_evaluator.base_node_columns": ["model.dbt_project_evaluator.int_model_test_summary", "model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.base_exposure_relationships": ["model.dbt_project_evaluator.stg_exposure_relationships"], "model.dbt_project_evaluator.base_node_relationships": ["model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.stg_naming_convention_folders": ["model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_naming_convention_prefixes": ["model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2"], "model.dbt_project_evaluator.fct_model_directories": ["test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db"], "model.dbt_project_evaluator.fct_source_directories": ["test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c"], "model.dbt_project_evaluator.fct_test_directories": ["test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_unused_sources"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.fct_documentation_coverage", "model.dbt_project_evaluator.fct_duplicate_sources", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_sources_without_freshness", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.fct_undocumented_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c"], "model.dbt_project_evaluator.fct_undocumented_sources": ["test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166"], "model.dbt_project_evaluator.fct_documentation_coverage": ["test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7"], "model.dbt_project_evaluator.fct_test_coverage": ["test.dbt_project_evaluator.valid_test_coverage.df03f31e09"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0"], "model.dbt_project_evaluator.fct_sources_without_freshness": ["test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_test_coverage"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f"], "model.dbt_project_evaluator.fct_unused_sources": ["test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca"], "model.dbt_project_evaluator.fct_duplicate_sources": ["test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31"], "model.dbt_project_evaluator.fct_too_many_joins": ["test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f"], "model.dbt_project_evaluator.fct_source_fanout": ["test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722"], "model.dbt_project_evaluator.fct_root_models": ["test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d"], "model.dbt_project_evaluator.fct_model_fanout": ["test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95"], "model.dbt_project_evaluator.fct_hard_coded_references": ["test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_duplicate_sources", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_sources_without_freshness", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.fct_unused_sources"], "test.dbt_vault_v2.unique_dim_product_sku_id.cf0a3fd846": [], "test.dbt_vault_v2.not_null_dim_product_sku_id.f725edd0d7": [], "test.dbt_vault_v2.unique_fct_sales_transaction_sales.e7e985ef28": [], "test.dbt_vault_v2.not_null_fct_sales_transaction_sales.9f2f9fb0c2": [], "test.dbt_vault_v2.unique_dim_location_location_id.9acbee647a": [], "test.dbt_vault_v2.not_null_dim_location_location_id.8635435d86": [], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": [], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": [], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": [], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": [], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": [], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": [], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": [], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": [], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": [], "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283": [], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": [], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": [], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": [], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": [], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": [], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": [], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": [], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": [], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": [], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": [], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": [], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": [], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": [], "source.dbt_vault_v2.samples_data.STG_LOCATION_RAW": ["model.dbt_vault_v2.raw_location"], "source.dbt_vault_v2.samples_data.STG_PRODUCT_RAW": ["model.dbt_vault_v2.raw_product"], "source.dbt_vault_v2.samples_data.STG_SALES_RAW": ["model.dbt_vault_v2.raw_sales"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}