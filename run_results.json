{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.1", "generated_at": "2024-12-18T15:42:05.493324Z", "invocation_id": "caa05c91-c67b-42f5-9c93-4092cee110be", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.436695Z", "completed_at": "2024-12-18T15:42:02.457191Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.463182Z", "completed_at": "2024-12-18T15:42:02.463207Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027677536010742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.base_exposure_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.458905Z", "completed_at": "2024-12-18T15:42:02.479326Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.481807Z", "completed_at": "2024-12-18T15:42:02.481820Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.027519941329956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.base_metric_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.463908Z", "completed_at": "2024-12-18T15:42:02.480792Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.483241Z", "completed_at": "2024-12-18T15:42:02.483252Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028355121612548828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.base_node_columns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.473045Z", "completed_at": "2024-12-18T15:42:02.481336Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.484015Z", "completed_at": "2024-12-18T15:42:02.484024Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02916097640991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.base_node_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.486405Z", "completed_at": "2024-12-18T15:42:02.495281Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.497576Z", "completed_at": "2024-12-18T15:42:02.497593Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017480850219726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_source_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.base_source_columns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.514439Z", "completed_at": "2024-12-18T15:42:02.531500Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.533558Z", "completed_at": "2024-12-18T15:42:02.533574Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03892183303833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "relation_name": "DBT_DB.DBT_VAULT.stg_naming_convention_folders", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.505762Z", "completed_at": "2024-12-18T15:42:02.532029Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.534442Z", "completed_at": "2024-12-18T15:42:02.534453Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.040435075759887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metrics", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.stg_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.498548Z", "completed_at": "2024-12-18T15:42:02.532973Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.540630Z", "completed_at": "2024-12-18T15:42:02.540643Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04746103286743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposures", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.stg_exposures", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.535166Z", "completed_at": "2024-12-18T15:42:02.552902Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.555122Z", "completed_at": "2024-12-18T15:42:02.555134Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024615049362182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "relation_name": "DBT_DB.DBT_VAULT.stg_naming_convention_prefixes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.556951Z", "completed_at": "2024-12-18T15:42:02.590306Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.592127Z", "completed_at": "2024-12-18T15:42:02.592147Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03999757766723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_nodes", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.stg_nodes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.570748Z", "completed_at": "2024-12-18T15:42:02.591365Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.593548Z", "completed_at": "2024-12-18T15:42:02.593562Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.040236711502075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_sources", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "DBT_DB.DBT_VAULT.stg_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.578942Z", "completed_at": "2024-12-18T15:42:02.593009Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.595905Z", "completed_at": "2024-12-18T15:42:02.595933Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04199409484863281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.raw_location", "compiled": true, "compiled_code": "select distinct * from DBT_DB.STAGING.STG_LOCATION_RAW", "relation_name": "DBT_DB.DBT_VAULT.raw_location", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.585290Z", "completed_at": "2024-12-18T15:42:02.594452Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.597462Z", "completed_at": "2024-12-18T15:42:02.597476Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015576839447021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.raw_product", "compiled": true, "compiled_code": "select * from DBT_DB.STAGING.STG_PRODUCT_RAW", "relation_name": "DBT_DB.DBT_VAULT.raw_product", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.608347Z", "completed_at": "2024-12-18T15:42:02.610377Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.616174Z", "completed_at": "2024-12-18T15:42:02.616193Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016398191452026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.604282Z", "completed_at": "2024-12-18T15:42:02.617040Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.624749Z", "completed_at": "2024-12-18T15:42:02.624762Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02624225616455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.raw_sales", "compiled": true, "compiled_code": "select * from DBT_DB.STAGING.STG_SALES_RAW", "relation_name": "DBT_DB.DBT_VAULT.raw_sales", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.611796Z", "completed_at": "2024-12-18T15:42:02.623990Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.626815Z", "completed_at": "2024-12-18T15:42:02.626829Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02459716796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from DBT_DB.DBT_VAULT.base_exposure_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "relation_name": "DBT_DB.DBT_VAULT.stg_exposure_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.617635Z", "completed_at": "2024-12-18T15:42:02.627702Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.630604Z", "completed_at": "2024-12-18T15:42:02.630617Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027016401290893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from DBT_DB.DBT_VAULT.base_metric_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "relation_name": "DBT_DB.DBT_VAULT.stg_metric_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.632219Z", "completed_at": "2024-12-18T15:42:02.645828Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:02.699432Z", "completed_at": "2024-12-18T15:42:02.699449Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0737462043762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from DBT_DB.DBT_VAULT.base_node_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "relation_name": "DBT_DB.DBT_VAULT.stg_node_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.700366Z", "completed_at": "2024-12-18T15:42:03.246949Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.261837Z", "completed_at": "2024-12-18T15:42:03.261856Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6222915649414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.v_stg_location", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT *\n\n    FROM DBT_DB.DBT_VAULT.raw_location\n),\n\nderived_columns AS (\n\n    SELECT\n\n    SOURCE_FILE AS RECORD_SOURCE,\n    LOCATION_ID AS LOCATION_KEY,\n    LDTS AS LOAD_DATE\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    LOCATION_KEY,\n    LOAD_DATE,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(LOCATION_ID AS VARCHAR))), '')) AS BINARY(16)) AS LOCATION_HK,\n\n    CAST(MD5_BINARY() AS BINARY(16)) AS LOCATION_HASHDIFF\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    LOCATION_KEY,\n    LOAD_DATE,\n    LOCATION_HK,\n    LOCATION_HASHDIFF\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "relation_name": "DBT_DB.DBT_VAULT.v_stg_location", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.651731Z", "completed_at": "2024-12-18T15:42:03.264992Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.269175Z", "completed_at": "2024-12-18T15:42:03.269191Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.6325998306274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_nodes' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_nodes\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_exposures' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_exposures\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_metrics' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_metrics\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.stg_sources' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.stg_sources\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_prefixes\n), \n\nnaming_convention_folders as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_folders\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n||'_' \n        end as prefix,\n        \n  \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "relation_name": "DBT_DB.DBT_VAULT.int_all_graph_resources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.640444Z", "completed_at": "2024-12-18T15:42:03.319412Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.330934Z", "completed_at": "2024-12-18T15:42:03.330976Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6996383666992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_columns", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.base_node_columns' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.base_node_columns\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('DBT_DB.DBT_VAULT.base_source_columns' as TEXT) as _dbt_source_relation,\n\n                \n\n            from DBT_DB.DBT_VAULT.base_source_columns\n\n            \n        )\n\n        \n)\n\nselect * from final", "relation_name": "DBT_DB.DBT_VAULT.stg_columns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.289168Z", "completed_at": "2024-12-18T15:42:03.409786Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.411684Z", "completed_at": "2024-12-18T15:42:03.411702Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1282041072845459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.hub_location", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.LOCATION_HK, rr.LOCATION_ID, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.LOCATION_HK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_location AS rr\n    WHERE rr.LOCATION_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.LOCATION_HK, a.LOCATION_ID, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.hub_location", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.426797Z", "completed_at": "2024-12-18T15:42:03.439091Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.439621Z", "completed_at": "2024-12-18T15:42:03.439635Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019059419631958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "relation_name": "DBT_DB.DBT_VAULT.fct_documentation_coverage", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.443140Z", "completed_at": "2024-12-18T15:42:03.467542Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.468348Z", "completed_at": "2024-12-18T15:42:03.468369Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026891231536865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n    listagg(\n        resource_name,\n        ', '\n        )\n        within group (order by resource_name) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_duplicate_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.471729Z", "completed_at": "2024-12-18T15:42:03.478593Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.479035Z", "completed_at": "2024-12-18T15:42:03.479044Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00888371467590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_hard_coded_references", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.481150Z", "completed_at": "2024-12-18T15:42:03.491094Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.492170Z", "completed_at": "2024-12-18T15:42:03.492182Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012121915817260742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_prefixes\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    listagg(\n        prefix_value,\n        ', '\n        )\n        within group (order by prefix_value) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_model_naming_conventions", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.386074Z", "completed_at": "2024-12-18T15:42:03.537534Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.539692Z", "completed_at": "2024-12-18T15:42:03.539710Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18430256843566895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.sat_location", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.LOCATION_HK, a.LOCATION_HASHDIFF, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM DBT_DB.DBT_VAULT.v_stg_location AS a\n    WHERE a.LOCATION_HK IS NOT NULL\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.LOCATION_HK, stage.LOCATION_HASHDIFF, stage.LOAD_DATE, stage.RECORD_SOURCE\n    FROM source_data AS stage\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.sat_location", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.529185Z", "completed_at": "2024-12-18T15:42:03.538648Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.541267Z", "completed_at": "2024-12-18T15:42:03.541279Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03716325759887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_public_models_without_contract", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:02.723584Z", "completed_at": "2024-12-18T15:42:03.553887Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.556069Z", "completed_at": "2024-12-18T15:42:03.556082Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.836841344833374, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.v_stg_product", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT *\n\n    FROM DBT_DB.DBT_VAULT.raw_product\n),\n\nderived_columns AS (\n\n    SELECT\n\n    SOURCE_FILE AS RECORD_SOURCE,\n    SKU_ID AS PRODUCT_KEY,\n    LDTS AS LOAD_DATE\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    PRODUCT_KEY,\n    LOAD_DATE,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(SKU_ID AS VARCHAR))), '')) AS BINARY(16)) AS PRODUCT_HK,\n\n    CAST(MD5_BINARY() AS BINARY(16)) AS PRODUCT_HASHDIFF\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    PRODUCT_KEY,\n    LOAD_DATE,\n    PRODUCT_HK,\n    PRODUCT_HASHDIFF\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "relation_name": "DBT_DB.DBT_VAULT.v_stg_product", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.558077Z", "completed_at": "2024-12-18T15:42:03.571499Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.572873Z", "completed_at": "2024-12-18T15:42:03.572888Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02543044090270996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_directories", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_source_directories", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.565473Z", "completed_at": "2024-12-18T15:42:03.577689Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.579522Z", "completed_at": "2024-12-18T15:42:03.579533Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025025129318237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_sources_without_freshness", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.573776Z", "completed_at": "2024-12-18T15:42:03.580466Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.582304Z", "completed_at": "2024-12-18T15:42:03.582318Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011879205703735352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.585806Z", "completed_at": "2024-12-18T15:42:03.596489Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.601972Z", "completed_at": "2024-12-18T15:42:03.601990Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021114110946655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_public_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.592175Z", "completed_at": "2024-12-18T15:42:03.602682Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.604411Z", "completed_at": "2024-12-18T15:42:03.604422Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02015376091003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_source_tables", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.597126Z", "completed_at": "2024-12-18T15:42:03.605336Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.607405Z", "completed_at": "2024-12-18T15:42:03.607419Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016165733337402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_undocumented_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.610032Z", "completed_at": "2024-12-18T15:42:03.635254Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.636021Z", "completed_at": "2024-12-18T15:42:03.636041Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03013157844543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from DBT_DB.DBT_VAULT.int_all_graph_resources\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from DBT_DB.DBT_VAULT.stg_node_relationships\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from DBT_DB.DBT_VAULT.stg_exposure_relationships\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from DBT_DB.DBT_VAULT.stg_metric_relationships\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "relation_name": "DBT_DB.DBT_VAULT.int_direct_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.616742Z", "completed_at": "2024-12-18T15:42:03.644265Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.645029Z", "completed_at": "2024-12-18T15:42:03.645043Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.036336421966552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from DBT_DB.DBT_VAULT.fct_documentation_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.638593Z", "completed_at": "2024-12-18T15:42:03.646046Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.649289Z", "completed_at": "2024-12-18T15:42:03.649301Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011759757995605469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_hard_coded_references\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.629074Z", "completed_at": "2024-12-18T15:42:03.646526Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.650124Z", "completed_at": "2024-12-18T15:42:03.650135Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0344085693359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_duplicate_sources\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.656505Z", "completed_at": "2024-12-18T15:42:03.681726Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.687898Z", "completed_at": "2024-12-18T15:42:03.687921Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.036495208740234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_model_naming_conventions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.273280Z", "completed_at": "2024-12-18T15:42:03.688655Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.690700Z", "completed_at": "2024-12-18T15:42:03.690712Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.42243480682373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.v_stg_sales", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n\n    SELECT *\n\n    FROM DBT_DB.DBT_VAULT.raw_sales\n),\n\nderived_columns AS (\n\n    SELECT\n\n    SOURCE_FILE AS RECORD_SOURCE,\n    TRANSACTION_SALES AS SALES_KEY,\n    LDTS AS LOAD_DATE\n\n    FROM source_data\n),\n\nhashed_columns AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    SALES_KEY,\n    LOAD_DATE,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(TRANSACTION_SALES AS VARCHAR))), '')) AS BINARY(16)) AS SALES_HK,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(LOCATION_ID AS VARCHAR))), '')) AS BINARY(16)) AS LOCATION_HK,\n\n    CAST(MD5_BINARY(NULLIF(UPPER(TRIM(CAST(SKU_ID AS VARCHAR))), '')) AS BINARY(16)) AS PRODUCT_HK,\n\n    CAST(MD5_BINARY(NULLIF(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(SKU_ID AS VARCHAR))), ''), '^^'), '||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(TRANSACTION_SALES AS VARCHAR))), ''), '^^')\n    ), '^^||^^')) AS BINARY(16)) AS PRODUCT_SALES_PK,\n\n    CAST(MD5_BINARY(NULLIF(CONCAT(\n        IFNULL(NULLIF(UPPER(TRIM(CAST(LOCATION_ID AS VARCHAR))), ''), '^^'), '||',\n        IFNULL(NULLIF(UPPER(TRIM(CAST(TRANSACTION_SALES AS VARCHAR))), ''), '^^')\n    ), '^^||^^')) AS BINARY(16)) AS LOCATION_SALES_PK,\n\n    CAST(MD5_BINARY() AS BINARY(16)) AS SALES_HASHDIFF\n\n    FROM derived_columns\n),\n\ncolumns_to_select AS (\n\n    SELECT\n\n    RECORD_SOURCE,\n    SALES_KEY,\n    LOAD_DATE,\n    SALES_HK,\n    LOCATION_HK,\n    PRODUCT_HK,\n    PRODUCT_SALES_PK,\n    LOCATION_SALES_PK,\n    SALES_HASHDIFF\n\n    FROM hashed_columns\n)\n\nSELECT * FROM columns_to_select", "relation_name": "DBT_DB.DBT_VAULT.v_stg_sales", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.677679Z", "completed_at": "2024-12-18T15:42:03.689195Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.692218Z", "completed_at": "2024-12-18T15:42:03.692229Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.037648916244506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.dim_location", "compiled": true, "compiled_code": "WITH location_hub_sat AS (\n    SELECT\n        s.*,\n        h.location_id\n    FROM DBT_DB.DBT_VAULT.hub_location AS h\n    INNER JOIN DBT_DB.DBT_VAULT.sat_location AS s\n        ON h.location_hk = s.location_hk\n    QUALIFY lead(s.load_date) OVER (\n        PARTITION BY h.location_hk\n        ORDER BY s.load_date\n    ) IS NULL\n),\n\nstar_location AS (\n    SELECT\n        location_hub_sat.location_id,\n        location_hub_sat.load_date,\n        location_hub_sat.location_code,\n        location_hub_sat.city_id,\n        location_hub_sat.state_id,\n        location_hub_sat.country_id,\n        location_hub_sat.district_id,\n        location_hub_sat.zone_id,\n        location_hub_sat.region_id,\n        location_hub_sat.area_id\n    FROM location_hub_sat\n)\n\nSELECT *\nFROM star_location", "relation_name": "DBT_DB.data_mart.dim_location", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.682290Z", "completed_at": "2024-12-18T15:42:03.691706Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.694609Z", "completed_at": "2024-12-18T15:42:03.694618Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03942465782165527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_public_models_without_contract\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.699094Z", "completed_at": "2024-12-18T15:42:03.735740Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.739054Z", "completed_at": "2024-12-18T15:42:03.739070Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04614853858947754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.hub_product", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.PRODUCT_HK, rr.SKU_ID, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.PRODUCT_HK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_product AS rr\n    WHERE rr.PRODUCT_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.PRODUCT_HK, a.SKU_ID, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.hub_product", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.720171Z", "completed_at": "2024-12-18T15:42:03.738394Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.740662Z", "completed_at": "2024-12-18T15:42:03.740678Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.042356252670288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_source_directories\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.730593Z", "completed_at": "2024-12-18T15:42:03.740052Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.742725Z", "completed_at": "2024-12-18T15:42:03.742738Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.038488149642944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_sources_without_freshness\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.747824Z", "completed_at": "2024-12-18T15:42:03.764927Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.765881Z", "completed_at": "2024-12-18T15:42:03.765895Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021783828735351562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.753115Z", "completed_at": "2024-12-18T15:42:03.774559Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.776604Z", "completed_at": "2024-12-18T15:42:03.776618Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.031132221221923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_public_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.758359Z", "completed_at": "2024-12-18T15:42:03.776064Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.777576Z", "completed_at": "2024-12-18T15:42:03.777589Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030992507934570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_source_tables\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.769221Z", "completed_at": "2024-12-18T15:42:03.778374Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.780154Z", "completed_at": "2024-12-18T15:42:03.780167Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012591838836669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_undocumented_sources\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.785044Z", "completed_at": "2024-12-18T15:42:03.831234Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.835343Z", "completed_at": "2024-12-18T15:42:03.835360Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.054563283920288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_directories", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from DBT_DB.DBT_VAULT.int_direct_relationships\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_test_directories", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.793331Z", "completed_at": "2024-12-18T15:42:03.834460Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.837427Z", "completed_at": "2024-12-18T15:42:03.837441Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0559840202331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from DBT_DB.DBT_VAULT.int_direct_relationships\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        array_construct( resource_name ) as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "relation_name": "DBT_DB.DBT_VAULT.int_all_dag_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.819089Z", "completed_at": "2024-12-18T15:42:03.836255Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:03.839174Z", "completed_at": "2024-12-18T15:42:03.839186Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05495500564575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nrelationships as (\n    select * from DBT_DB.DBT_VAULT.int_direct_relationships\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from DBT_DB.DBT_VAULT.base_node_columns\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "relation_name": "DBT_DB.DBT_VAULT.int_model_test_summary", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.707419Z", "completed_at": "2024-12-18T15:42:03.980408Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.005022Z", "completed_at": "2024-12-18T15:42:04.005064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30852770805358887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.sat_product", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.PRODUCT_HK, a.PRODUCT_HASHDIFF, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM DBT_DB.DBT_VAULT.v_stg_product AS a\n    WHERE a.PRODUCT_HK IS NOT NULL\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.PRODUCT_HK, stage.PRODUCT_HASHDIFF, stage.LOAD_DATE, stage.RECORD_SOURCE\n    FROM source_data AS stage\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.sat_product", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.852467Z", "completed_at": "2024-12-18T15:42:03.992834Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.015934Z", "completed_at": "2024-12-18T15:42:04.015962Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1735093593597412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.hub_sales", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.SALES_HK, rr.TRANSACTION_SALES, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.SALES_HK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS rr\n    WHERE rr.SALES_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.SALES_HK, a.TRANSACTION_SALES, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.hub_sales", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.858556Z", "completed_at": "2024-12-18T15:42:04.019525Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.023094Z", "completed_at": "2024-12-18T15:42:04.023109Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17754101753234863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.link_location_sales", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.LOCATION_SALES_PK, rr.LOCATION_HK, rr.SALES_HK, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.LOCATION_SALES_PK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS rr\n    WHERE rr.LOCATION_SALES_PK IS NOT NULL\n    AND rr.LOCATION_HK IS NOT NULL\n    AND rr.SALES_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.LOCATION_SALES_PK, a.LOCATION_HK, a.SALES_HK, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.link_location_sales", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:03.873263Z", "completed_at": "2024-12-18T15:42:04.020619Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.024035Z", "completed_at": "2024-12-18T15:42:04.024049Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17695212364196777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.link_product_sales", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH row_rank_1 AS (\n    SELECT rr.PRODUCT_SALES_PK, rr.PRODUCT_HK, rr.SALES_HK, rr.LOAD_DATE, rr.RECORD_SOURCE,\n           ROW_NUMBER() OVER(\n               PARTITION BY rr.PRODUCT_SALES_PK\n               ORDER BY rr.LOAD_DATE\n           ) AS row_number\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS rr\n    WHERE rr.PRODUCT_SALES_PK IS NOT NULL\n    AND rr.PRODUCT_HK IS NOT NULL\n    AND rr.SALES_HK IS NOT NULL\n    QUALIFY row_number = 1\n),\n\nrecords_to_insert AS (\n    SELECT a.PRODUCT_SALES_PK, a.PRODUCT_HK, a.SALES_HK, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM row_rank_1 AS a\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.link_product_sales", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.040088Z", "completed_at": "2024-12-18T15:42:04.062012Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.069613Z", "completed_at": "2024-12-18T15:42:04.069639Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04480099678039551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_vault_v2.not_null_dim_location_location_id.8635435d86", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom DBT_DB.data_mart.dim_location\nwhere location_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.054616Z", "completed_at": "2024-12-18T15:42:04.071452Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.073401Z", "completed_at": "2024-12-18T15:42:04.073419Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0351870059967041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_vault_v2.unique_dim_location_location_id.9acbee647a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DB.data_mart.dim_location\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.062716Z", "completed_at": "2024-12-18T15:42:04.074524Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.076890Z", "completed_at": "2024-12-18T15:42:04.076908Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03772687911987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_test_directories\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.092940Z", "completed_at": "2024-12-18T15:42:04.162874Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.164291Z", "completed_at": "2024-12-18T15:42:04.164315Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08420538902282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_exposure_parents_materializations", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.082510Z", "completed_at": "2024-12-18T15:42:04.155783Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.156665Z", "completed_at": "2024-12-18T15:42:04.156686Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08055806159973145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_direct_join_to_source", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.028685Z", "completed_at": "2024-12-18T15:42:04.255929Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.261225Z", "completed_at": "2024-12-18T15:42:04.261245Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23903894424438477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.sat_sales", "compiled": true, "compiled_code": "-- Generated by AutomateDV (formerly known as dbtvault)\n\n    \n\nWITH source_data AS (\n    SELECT a.SALES_HK, a.SALES_HASHDIFF, a.LOAD_DATE, a.RECORD_SOURCE\n    FROM DBT_DB.DBT_VAULT.v_stg_sales AS a\n    WHERE a.SALES_HK IS NOT NULL\n),\n\nrecords_to_insert AS (\n    SELECT DISTINCT stage.SALES_HK, stage.SALES_HASHDIFF, stage.LOAD_DATE, stage.RECORD_SOURCE\n    FROM source_data AS stage\n)\n\nSELECT * FROM records_to_insert", "relation_name": "DBT_DB.DBT_VAULT.sat_sales", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.144300Z", "completed_at": "2024-12-18T15:42:04.265029Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.267030Z", "completed_at": "2024-12-18T15:42:04.267050Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.19205069541931152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "relation_name": "DBT_DB.DBT_VAULT.fct_chained_views_dependencies", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.192050Z", "completed_at": "2024-12-18T15:42:04.296788Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.297911Z", "completed_at": "2024-12-18T15:42:04.297935Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1081228256225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_marts_or_intermediate_dependent_on_source", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.229495Z", "completed_at": "2024-12-18T15:42:04.340959Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.342210Z", "completed_at": "2024-12-18T15:42:04.342235Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17325687408447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_exposures_dependent_on_private_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.273480Z", "completed_at": "2024-12-18T15:42:04.377488Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.386255Z", "completed_at": "2024-12-18T15:42:04.386285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11485862731933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_directories", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from DBT_DB.DBT_VAULT.int_all_graph_resources\n    where not is_excluded\n),\n\nfolders as (\n    select * from DBT_DB.DBT_VAULT.stg_naming_convention_folders\n), \n\nall_dag_relationships as (\n    select * from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_model_directories", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.302416Z", "completed_at": "2024-12-18T15:42:04.390177Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.391131Z", "completed_at": "2024-12-18T15:42:04.391147Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09060287475585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    listagg(\n        parent,\n        ', '\n        )\n        within group (order by parent) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_multiple_sources_joined", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.321499Z", "completed_at": "2024-12-18T15:42:04.394491Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.395385Z", "completed_at": "2024-12-18T15:42:04.395399Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07599282264709473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_model_fanout", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.354539Z", "completed_at": "2024-12-18T15:42:04.481844Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.482879Z", "completed_at": "2024-12-18T15:42:04.482900Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1360318660736084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_rejoining_of_upstream_concepts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.399764Z", "completed_at": "2024-12-18T15:42:04.504674Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.506839Z", "completed_at": "2024-12-18T15:42:04.506867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11031627655029297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_root_models", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_root_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.461448Z", "completed_at": "2024-12-18T15:42:04.577072Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.589176Z", "completed_at": "2024-12-18T15:42:04.589204Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13019919395446777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_staging_dependent_on_marts_or_intermediate", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.487368Z", "completed_at": "2024-12-18T15:42:04.610131Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.644594Z", "completed_at": "2024-12-18T15:42:04.644635Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.159898042678833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_staging_dependent_on_staging", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.570210Z", "completed_at": "2024-12-18T15:42:04.648854Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.670856Z", "completed_at": "2024-12-18T15:42:04.670894Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12263703346252441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_too_many_joins", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.436300Z", "completed_at": "2024-12-18T15:42:04.595092Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.596033Z", "completed_at": "2024-12-18T15:42:04.596051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.16376781463623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_source_fanout", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.614746Z", "completed_at": "2024-12-18T15:42:04.770820Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.775011Z", "completed_at": "2024-12-18T15:42:04.775024Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.16861820220947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from DBT_DB.DBT_VAULT.int_all_dag_relationships\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_unused_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.681676Z", "completed_at": "2024-12-18T15:42:04.772985Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.773781Z", "completed_at": "2024-12-18T15:42:04.773801Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09387874603271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.dim_product", "compiled": true, "compiled_code": "WITH product_hub_sat AS (\n    SELECT\n        s.*,\n        h.sku_id\n    FROM DBT_DB.DBT_VAULT.hub_product AS h\n    INNER JOIN DBT_DB.DBT_VAULT.sat_product AS s\n        ON h.product_hk = s.product_hk\n    QUALIFY lead(s.load_date) OVER (\n        PARTITION BY h.product_hk\n        ORDER BY s.load_date\n    ) IS NULL\n),\n\nstar_product AS (\n    SELECT\n        sku_id,\n        load_date,\n        class_id,\n        color_id,\n        curr_status_id,\n        function_id,\n        line_id,\n        model_id,\n        style_color_id,\n        style_id\n    FROM product_hub_sat\n)\n\nSELECT *\nFROM star_product", "relation_name": "DBT_DB.data_mart.dim_product", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.654268Z", "completed_at": "2024-12-18T15:42:04.776234Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.780232Z", "completed_at": "2024-12-18T15:42:04.780250Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12926816940307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "compiled": true, "compiled_code": "with\n\ntests as (\n    select * from DBT_DB.DBT_VAULT.int_model_test_summary\n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "DBT_DB.DBT_VAULT.fct_missing_primary_key_tests", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.698624Z", "completed_at": "2024-12-18T15:42:04.804803Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.808215Z", "completed_at": "2024-12-18T15:42:04.808234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1334550380706787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from DBT_DB.DBT_VAULT.int_model_test_summary\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "relation_name": "DBT_DB.DBT_VAULT.fct_test_coverage", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.785480Z", "completed_at": "2024-12-18T15:42:04.809950Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.810724Z", "completed_at": "2024-12-18T15:42:04.810737Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.032311201095581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_exposure_parents_materializations\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.795106Z", "completed_at": "2024-12-18T15:42:04.812076Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.857397Z", "completed_at": "2024-12-18T15:42:04.857425Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07501554489135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_direct_join_to_source\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.814865Z", "completed_at": "2024-12-18T15:42:04.860775Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.863818Z", "completed_at": "2024-12-18T15:42:04.863836Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05744314193725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_vault_v2.fct_sales", "compiled": true, "compiled_code": "with selected_sat_sales as (\n    select *\n    from DBT_DB.DBT_VAULT.sat_sales qualify\n        lead(load_date)\n            over (partition by sales_hk order by load_date asc)\n        is null\n),\n\nselected_sat_location as (\n    select *\n    from DBT_DB.DBT_VAULT.sat_location qualify\n        lead(load_date)\n            over (partition by location_hk order by load_date asc)\n        is null\n),\n\nselected_sat_product as (\n    select *\n    from DBT_DB.DBT_VAULT.sat_product qualify\n        lead(load_date)\n            over (partition by product_hk order by load_date asc)\n        is null\n)\n\nselect\n    hs.transaction_sales,\n    ss.partition_key,\n    ss.subpartition_key,\n    ss.ticket_code,\n    ss.ticket_line_code,\n    hl.location_id,\n    sl.location_code,\n    ss.location_original_id,\n    ss.business_date,\n    ss.register_code,\n    ss.transaction_time,\n    ss.transaction_type_id,\n    ss.transaction_type_code,\n    hp.sku_id,\n    sp.material_code\nfrom DBT_DB.DBT_VAULT.hub_sales as hs\nleft join selected_sat_sales as ss on hs.sales_hk = ss.sales_hk\nleft join DBT_DB.DBT_VAULT.link_location_sales as lls on hs.sales_hk = lls.sales_hk\nleft join DBT_DB.DBT_VAULT.hub_location as hl on lls.location_hk = hl.location_hk\nleft join selected_sat_location as sl on hl.location_hk = sl.location_hk\nleft join DBT_DB.DBT_VAULT.link_product_sales as lps on hs.sales_hk = lps.sales_hk\nleft join DBT_DB.DBT_VAULT.hub_product as hp on lps.product_hk = hp.product_hk\nleft join selected_sat_product as sp on hp.product_hk = sp.product_hk", "relation_name": "DBT_DB.data_mart.fct_sales", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.846949Z", "completed_at": "2024-12-18T15:42:04.865645Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.869135Z", "completed_at": "2024-12-18T15:42:04.869151Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040376901626586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_marts_or_intermediate_dependent_on_source\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.833413Z", "completed_at": "2024-12-18T15:42:04.862632Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.881686Z", "completed_at": "2024-12-18T15:42:04.881708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05007529258728027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_chained_views_dependencies\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.870685Z", "completed_at": "2024-12-18T15:42:04.880787Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.884197Z", "completed_at": "2024-12-18T15:42:04.884214Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01800704002380371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_exposures_dependent_on_private_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.886054Z", "completed_at": "2024-12-18T15:42:04.902881Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.904923Z", "completed_at": "2024-12-18T15:42:04.904941Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025976181030273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_model_directories\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.896676Z", "completed_at": "2024-12-18T15:42:04.905745Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.917237Z", "completed_at": "2024-12-18T15:42:04.917252Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03394174575805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_multiple_sources_joined\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.906430Z", "completed_at": "2024-12-18T15:42:04.918848Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.921438Z", "completed_at": "2024-12-18T15:42:04.921451Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025807857513427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_model_fanout\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.911519Z", "completed_at": "2024-12-18T15:42:04.919991Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.922869Z", "completed_at": "2024-12-18T15:42:04.922880Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02078080177307129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_rejoining_of_upstream_concepts\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.925018Z", "completed_at": "2024-12-18T15:42:04.933763Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.940171Z", "completed_at": "2024-12-18T15:42:04.940187Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020865917205810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_root_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.934283Z", "completed_at": "2024-12-18T15:42:04.946406Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.953334Z", "completed_at": "2024-12-18T15:42:04.953356Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02983832359313965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_staging_dependent_on_marts_or_intermediate\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.948008Z", "completed_at": "2024-12-18T15:42:04.955899Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.958053Z", "completed_at": "2024-12-18T15:42:04.958064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02507305145263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_too_many_joins\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.941137Z", "completed_at": "2024-12-18T15:42:04.956958Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.959316Z", "completed_at": "2024-12-18T15:42:04.959326Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0271759033203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_staging_dependent_on_staging\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.960063Z", "completed_at": "2024-12-18T15:42:04.968925Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.974967Z", "completed_at": "2024-12-18T15:42:04.974983Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020133256912231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_source_fanout\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.969458Z", "completed_at": "2024-12-18T15:42:04.981983Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:04.988999Z", "completed_at": "2024-12-18T15:42:04.989020Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030369281768798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_unused_sources\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.976664Z", "completed_at": "2024-12-18T15:42:04.992743Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:05.000932Z", "completed_at": "2024-12-18T15:42:05.000951Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03274679183959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_vault_v2.not_null_dim_product_sku_id.f725edd0d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku_id\nfrom DBT_DB.data_mart.dim_product\nwhere sku_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.983508Z", "completed_at": "2024-12-18T15:42:04.993267Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:05.002103Z", "completed_at": "2024-12-18T15:42:05.002119Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028443574905395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_vault_v2.unique_dim_product_sku_id.cf0a3fd846", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sku_id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DB.data_mart.dim_product\nwhere sku_id is not null\ngroup by sku_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:04.994245Z", "completed_at": "2024-12-18T15:42:05.005255Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:05.019315Z", "completed_at": "2024-12-18T15:42:05.019330Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029290199279785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from DBT_DB.DBT_VAULT.fct_missing_primary_key_tests\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:05.006923Z", "completed_at": "2024-12-18T15:42:05.022213Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:05.030248Z", "completed_at": "2024-12-18T15:42:05.030269Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03673505783081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from DBT_DB.DBT_VAULT.fct_test_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:05.024304Z", "completed_at": "2024-12-18T15:42:05.038406Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:05.039188Z", "completed_at": "2024-12-18T15:42:05.039199Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02169179916381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_vault_v2.not_null_fct_sales_transaction_sales.9f2f9fb0c2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_sales\nfrom DBT_DB.data_mart.fct_sales\nwhere transaction_sales is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-18T15:42:05.031840Z", "completed_at": "2024-12-18T15:42:05.040235Z"}, {"name": "execute", "started_at": "2024-12-18T15:42:05.041105Z", "completed_at": "2024-12-18T15:42:05.041117Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020904064178466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_vault_v2.unique_fct_sales_transaction_sales.e7e985ef28", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_sales as unique_field,\n    count(*) as n_records\n\nfrom DBT_DB.data_mart.fct_sales\nwhere transaction_sales is not null\ngroup by transaction_sales\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 3.6645936965942383, "args": {"strict_mode": false, "require_resource_names_without_spaces": false, "skip_nodes_if_on_run_start_fails": false, "which": "generate", "exclude": [], "log_format": "default", "require_batched_execution_for_custom_microbatch_strategy": false, "use_colors_file": true, "log_level": "info", "print": true, "compile": true, "state_modified_compare_more_unrendered_values": false, "indirect_selection": "eager", "send_anonymous_usage_stats": true, "populate_cache": true, "source_freshness_run_project_hooks": false, "require_nested_cumulative_type_params": false, "empty_catalog": false, "log_level_file": "debug", "partial_parse_file_diff": true, "warn_error_options": {"include": [], "exclude": []}, "partial_parse": true, "write_json": true, "invocation_command": "dbt docs generate", "favor_state": false, "introspect": true, "log_file_max_bytes": 10485760, "macro_debugging": false, "log_path": "/home/issam/snowflake-demo/dbt_vault_v2/logs", "printer_width": 80, "select": [], "show_resource_report": false, "static": false, "defer": false, "version_check": true, "static_parser": true, "state_modified_compare_vars": false, "vars": {}, "cache_selected_only": false, "log_format_file": "debug", "require_yaml_configuration_for_mf_time_spines": false, "require_explicit_package_overrides_for_builtin_materializations": true, "quiet": false, "use_colors": true, "profiles_dir": "/home/issam/.dbt", "project_dir": "/home/issam/snowflake-demo/dbt_vault_v2"}}